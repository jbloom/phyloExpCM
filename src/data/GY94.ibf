/* 
HYPHY include batch file implementing Goldman-Yang 1994 codon model.

This HYPHY file written by Jesse Bloom.
*/

// Inclusion of these files is required for the function to work, but it is assumed they have already been included elsewhere in the calling HYPHY command file. If that isn't true, you might get an error.
// #include "NTsCodonsAAs.ibf";
// #include "CF3x4.ibf";

function CreateGY94Model(codonfreqmethod, kappa_method, omega_method, omega_classes, rate_classes, printoutput) {
/* Creates the Goldman-Yang 1994 codon model.

This model will be created in the global variable named model, which is defined in terms of the following variables:

* kappa is the relative transition to transversion rate.

* omega is the dN/dS ratio. 

* t is the branch length, which is different for each branch.

Calling arguments:

    codonfilter : there should be a global variable with this name that is 
        a DataSetFilter of sequences filtered to the 61 non-stop codons,
        by applying CreateFilter(data, 3, "", "", "TAA,TAG,TGA");

    codonfreqmethod : a string specifying the method used for determining the
        equilibrium codon frequencies. Valid values are:

        * "F3x4" : calculate equilibrium codon frequencies as products
            of the observed nucleotide frequencies at each position
            as described in Yang et al, Genetics, 2000 
            (http://www.genetics.org/content/155/1/431.full)

        * "CF3x4" : the corrected F3x4 method described in
          Kosakovsky Pond et al, PLoS One, 5:e11230 (2010). In general,
          this method should be preferred to the F3x4 method for the reasons
          described in the aforementioned reference.

    kappa_method : kappa is the relative rate of transition substitutions 
        relative to transversion ratios (for example, a value of kappa = 2.0 means
        that a given transition substitution occurs at twice the rate of a given
        transversion substitution). Valid values are:

        * "global" : specifies that kappa is the same for all branches and all sites.
          all sites. You probably want to use this option.

        * "branchlocal" : specifies that kappa can have different values on different
          tree branches. You should have a good reason if you use this option,
          as kappa is usually treated as global across a tree.

    omega_method: omega is used to specify the relative rate of nonsynonymous 
        to synonymous substitutions (for example, a value of omega = 0.5 means that
        a given nonsynonymous substitution occurs at half the rate of a given
        synonymous substitution). Valid values are:

        * "global" : specifies that omega is the same for all branches and all sites.

        * "branchlocal" : specifies that omega can have different values on
          different tree branches. If omega_method is "branchlocal", then
          omega_classes must be one.

    omega_classes: the number of different classes for the omega values. Must
        be a number >= 1. If it is one, then there is just one rate. If it is
        > 1, then there are that many rate classes drawn with equal probability
        from a gamma distribution whose shape parameter omega_alpha and
        mean omega_mean are both optimized by maximum likelihood.

    rate_classes: like omega_classes but for the synonymous rate values. However,
        the mean is fixed to one, so only the shape parameter rate_alpha is
        optimized.

    printoutput : Switch specifying whether we print summary output. Values are:
        0 : means no output
        1 : means some output

*/
    initial_kappa = 4.0;
    initial_omega = 0.2;
    tol = 1e-5; // tolerance when error checking for quantities summing to one
    if (printoutput >= 1) {
        fprintf(stdout, "\nConstructing Goldman-Yang 1994 (GY94) codon model.\n");
        fprintf(stdout, "Equilibrium codon frequencies will be computed using the ", codonfreqmethod, " method.\n");
    }
    if ((codonfreqmethod == "F3x4") || (codonfreqmethod == "CF3x4")) {
        // Get the observed nucleotide frequences
        // obsfreqs[i][j] gives the frequency of nucleotide i (0 <= i <= 3)
        // at codon position j (0 <= j <= 2).
        HarvestFrequencies(obsfreqs, codonfilter, 3, 1, 1);
        // check that frequencies sum to one at each codon position, print frequencies
        for (j = 0; j <= 2; j = j + 1) { 
            sum = 0.0;
            for (i = 0; i <= 3; i = i + 1){
                sum = sum + obsfreqs[i][j];
            }
            assert(1.0 - tol <= sum <= 1.0 + tol, "\nERROR: nucleotide frequencies don't sum to one.\n");
        }
        // Now build the codon frequencies for the 61 non-stop codons into codonfreqs.
        // codonfreqs[k] gives frequency of non-stop codon k
        if (codonfreqmethod == "CF3x4") {
            corrected3x4 = CF3x4(obsfreqs, "TGA,TAA,TAG");
            codonfreqs = {N_Codons, 1};
            for (k = 0; k < N_Codons; k = k + 1) {
                codon = Codons[k];
                codonfreq = 1.0;
                for (j = 0; j <= 2; j = j + 1) {
                    nt = codon[j];
                    codonfreq = codonfreq * corrected3x4[NT_Indices[nt]][j];
                }
                codonfreqs[k] = codonfreq;
            }
        }
        if (codonfreqmethod == "F3x4") {
            codonfreqs = {N_Codons, 1};
            codonfreqsum = 0.0;
            for (k = 0; k < N_Codons; k = k + 1) { // loop over the non-stop codons
                codon = Codons[k];
                codonfreq = 1.0;
                for (j = 0; j <= 2; j = j + 1) { // loop over the codon positions
                    nt = codon[j];
                    codonfreq = codonfreq * obsfreqs[NT_Indices[nt]][j];
                }
                codonfreqs[k] = codonfreq;
                codonfreqsum = codonfreqsum + codonfreq;
            }
            codonfreqs = codonfreqs * (1.0 / codonfreqsum);
        }
        sum = 0.0;
        for (k = 0; k < N_Codons; k = k + 1) { // check that frequencies sum to one
            sum = sum + codonfreqs[k];
        }
        assert(1.0 - tol < sum < 1.0 + tol, "\nERROR: codon frequencies don't sum to one.\n");
    }
    else {
        assert(0 == 1, "\nERROR: Invalid value of codonfreqmethod\n");
    }
    // set kappa
    if (kappa_method == "global") {
        if (printoutput >= 1) {
            fprintf(stdout, "\nThe relative rate of transitions to transversions kappa will be global for all sites and branches.\n");
        }
        global kappa = initial_kappa;
    }
    else {if (kappa_method == "branchlocal") {
        if (printoutput >= 1) {
            fprintf(stdout, "\nThe relative rate of transitions relative to transversions kappa will be local to branches.\n");
        }
        kappa = initial_kappa;
    }
    else {
        assert(0 == 1, "\nERROR: Invalid value of kappa_method\n");
    }}
    kappa :> 0;
    // set omega
    assert(omega_classes >= 1, "omega_classes must be >= 1");
    if (omega_method == "global") {
        if (omega_classes == 1) {
            if (printoutput >= 1) {
                fprintf(stdout, "\nUsing a single global dN/dS ratio omega for all branches.\n");
            }
            global omega = initial_omega;
        }
        else {
            if (printoutput >= 1) {
                fprintf(stdout, "\nUsing ", omega_classes, " discrete gamma-distributed dN/dS ratios omega that are global to all branches with an estimated shape parameter omega_alpha and a mean omega_mean.\n");
            }
            global omega_alpha = 0.2;
            global omega_mean = initial_omega;
            omega_mean :> 1.0e-3;
            omega_mean :< 100;
            omega_alpha :> 0.02;
            omega_alpha :< 100;
            category omega = (omega_classes, EQUAL, MEAN, GammaDist(_x_, omega_alpha, omega_alpha / omega_mean), CGammaDist(_x_, omega_alpha, omega_alpha / omega_mean), 0.0, 1.0e10);
        }
    }
    else {if (omega_method == "branchlocal") {
        if (omega_classes == 1) {
            if (printoutput >= 1) {
                fprintf(stdout, "\nUsing a single local dN/dS ratio omega that is estimated separately for each branch.\n");
            }
            omega = initial_omega;
        }
        else {
            assert(0 == 1, "Cannot combine omega_scope of branchlocal with omega_classes > 1");
        }
    }
    else {
        assert(0 == 1, "\nERROR: Invalid value of omega_method\n");
    }}
    omega :> 0;
    // set rate variation
    assert(rate_classes >= 1, "rate_classes must be >= 1");
    if (rate_classes == 1 ) {
        fprintf(stdout, "\nUsing a single rate parameter (no rate variation).\n");
        global rateparameter := 1.0; // simply set the rate parameter to one
    } else {
        global rate_alpha = 0.5;
        rate_alpha :> 1.0e-2;
        rate_alpha :< 1.0e3;
        category rateparameter = (rate_classes, EQUAL, MEAN, GammaDist(_x_, rate_alpha, rate_alpha), CGammaDist(_x_, rate_alpha, rate_alpha), 0.0, 1.0e25, CGammaDist(_x_, rate_alpha + 1.0, rate_alpha));
        fprintf(stdout, "\nUsing ", rate_classes, " discrete gamma-distributed rate classes with an estimated shape parameter rate_alpha.\n");
    }
    // build the transition matrix
    // ratematrix[i, j] is the transition rate from codon i to j
    ratematrix = {N_Codons, N_Codons};
    for (i = 0; i < N_Codons; i = i + 1) {
        for (j = 0; j < N_Codons; j = j + 1) {
            icodon = Codons[i];
            jcodon = Codons[j];
            iaa = TranslateByString[icodon];
            jaa = TranslateByString[jcodon];
            mutationtype = ClassifyCodonMutation(icodon, jcodon);
            if (mutationtype == "*") {
                assert(i == j, "Not identical indices");
                // do nothing for diagonal entries
            } else {
                if (mutationtype == "TRANSITION") {
                    if (iaa == jaa) {
                        ratematrix[i][j] := t * kappa * rateparameter;
                    } else {
                        ratematrix[i][j] := t * kappa * omega * rateparameter;
                    }
                } else {
                    if (mutationtype == "TRANSVERSION") {
                        if (iaa == jaa) {
                            ratematrix[i][j] := t * rateparameter;
                        } else {
                            ratematrix[i][j] := t * omega * rateparameter;
                        }
                    } else {
                        ratematrix[i][j] := 0.0; // not a single nucleotide mutation
                    }
                }
            }
        }
    }
    Model model = (ratematrix, codonfreqs, 1);
    return 1;
}
