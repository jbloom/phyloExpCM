INTEGRATION_PRECISION_FACTOR = 5.0e-6;
END_OF_FILE = 0;
LIKELIHOOD_FUNCTION_OUTPUT = 5;
ACCEPT_BRANCH_LENGTHS = 1;
#include "/home/jbloom/.local/lib/python2.7/site-packages/phyloExpCM/data//NTsCodonsAAs.ibf";
fprintf(stdout, "Running HYPHY script hyphy_cmds.bf...\n");
DataSet data = ReadDataFile("_codenames_Aligned_NPs.fasta");
assert(data.sites % 3 == 0, "Sequence lengths not multiples of 3");
totalcodons = data.sites $ 3;
fprintf(stdout, "Read from _codenames_Aligned_NPs.fasta a set of ", data.species, " seqeunces consisting of ", data.sites, " nucleotides corresponding to ", totalcodons, " codons each.\n");
fprintf(stdout, "The analysis will include the following 497 codon positions (sequential numbering starting with 1):\n2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498\n");
assert(totalcodons >= 498, "Largest included site exceeds sequence length");
DataSetFilter codonfilter = CreateFilter(data, 3, "3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493", "", "TAA,TAG,TGA");
assert(data.species == codonfilter.species, "species number mismatch");
assert(codonfilter.sites == 497, "Codon filtered data does not contain the right number of sites");
fprintf(stdout, "Created a codon filter of ", codonfilter.sites, " sites.\n");
assert(totalcodons - (totalcodons - 498) - 1 == codonfilter.sites, "Codon filtered data is not the expected length. Do sequences contain stop codons?");
CheckCodonFilter("codonfilter");
fprintf(stdout, "Reading tree string from _codenames_codonphyml_tree.newick.\n");
fscanf("_codenames_codonphyml_tree.newick", String, treestring);
fprintf(stdout, "Using the experimentally determined substitution models in /home/jbloom/phyloExpCM/examples/2013Analysis_Influenza_NP_Human_1918_Descended/experimental_substitution_models//replicate_B_HalpernBruno.ibf...\n");
#include "/home/jbloom/phyloExpCM/examples/2013Analysis_Influenza_NP_Human_1918_Descended/experimental_substitution_models//replicate_B_HalpernBruno.ibf";
fprintf(stdout, "Now constructing the likelihood function...\n");
DataSetFilter codonfilter2 = CreateFilter(data, 3, "3-5", "", "TAA,TAG,TGA");
assert(data.species == codonfilter2.species, "species number mismatch");
assert(1 == codonfilter2.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter2");
UseModel(model2);
ExecuteCommands("Tree tree = treestring;");
assert(codonfilter.species == TipCount(tree), "Number of species and number of tips differ");
DataSetFilter codonfilter3 = CreateFilter(data, 3, "6-8", "", "TAA,TAG,TGA");
assert(data.species == codonfilter3.species, "species number mismatch");
assert(1 == codonfilter3.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter3");
UseModel(model3);
ExecuteCommands("Tree tree3 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree3, tree);
DataSetFilter codonfilter4 = CreateFilter(data, 3, "9-11", "", "TAA,TAG,TGA");
assert(data.species == codonfilter4.species, "species number mismatch");
assert(1 == codonfilter4.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter4");
UseModel(model4);
ExecuteCommands("Tree tree4 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree4, tree);
DataSetFilter codonfilter5 = CreateFilter(data, 3, "12-14", "", "TAA,TAG,TGA");
assert(data.species == codonfilter5.species, "species number mismatch");
assert(1 == codonfilter5.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter5");
UseModel(model5);
ExecuteCommands("Tree tree5 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree5, tree);
DataSetFilter codonfilter6 = CreateFilter(data, 3, "15-17", "", "TAA,TAG,TGA");
assert(data.species == codonfilter6.species, "species number mismatch");
assert(1 == codonfilter6.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter6");
UseModel(model6);
ExecuteCommands("Tree tree6 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree6, tree);
DataSetFilter codonfilter7 = CreateFilter(data, 3, "18-20", "", "TAA,TAG,TGA");
assert(data.species == codonfilter7.species, "species number mismatch");
assert(1 == codonfilter7.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter7");
UseModel(model7);
ExecuteCommands("Tree tree7 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree7, tree);
DataSetFilter codonfilter8 = CreateFilter(data, 3, "21-23", "", "TAA,TAG,TGA");
assert(data.species == codonfilter8.species, "species number mismatch");
assert(1 == codonfilter8.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter8");
UseModel(model8);
ExecuteCommands("Tree tree8 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree8, tree);
DataSetFilter codonfilter9 = CreateFilter(data, 3, "24-26", "", "TAA,TAG,TGA");
assert(data.species == codonfilter9.species, "species number mismatch");
assert(1 == codonfilter9.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter9");
UseModel(model9);
ExecuteCommands("Tree tree9 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree9, tree);
DataSetFilter codonfilter10 = CreateFilter(data, 3, "27-29", "", "TAA,TAG,TGA");
assert(data.species == codonfilter10.species, "species number mismatch");
assert(1 == codonfilter10.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter10");
UseModel(model10);
ExecuteCommands("Tree tree10 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree10, tree);
DataSetFilter codonfilter11 = CreateFilter(data, 3, "30-32", "", "TAA,TAG,TGA");
assert(data.species == codonfilter11.species, "species number mismatch");
assert(1 == codonfilter11.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter11");
UseModel(model11);
ExecuteCommands("Tree tree11 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree11, tree);
DataSetFilter codonfilter12 = CreateFilter(data, 3, "33-35", "", "TAA,TAG,TGA");
assert(data.species == codonfilter12.species, "species number mismatch");
assert(1 == codonfilter12.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter12");
UseModel(model12);
ExecuteCommands("Tree tree12 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree12, tree);
DataSetFilter codonfilter13 = CreateFilter(data, 3, "36-38", "", "TAA,TAG,TGA");
assert(data.species == codonfilter13.species, "species number mismatch");
assert(1 == codonfilter13.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter13");
UseModel(model13);
ExecuteCommands("Tree tree13 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree13, tree);
DataSetFilter codonfilter14 = CreateFilter(data, 3, "39-41", "", "TAA,TAG,TGA");
assert(data.species == codonfilter14.species, "species number mismatch");
assert(1 == codonfilter14.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter14");
UseModel(model14);
ExecuteCommands("Tree tree14 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree14, tree);
DataSetFilter codonfilter15 = CreateFilter(data, 3, "42-44", "", "TAA,TAG,TGA");
assert(data.species == codonfilter15.species, "species number mismatch");
assert(1 == codonfilter15.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter15");
UseModel(model15);
ExecuteCommands("Tree tree15 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree15, tree);
DataSetFilter codonfilter16 = CreateFilter(data, 3, "45-47", "", "TAA,TAG,TGA");
assert(data.species == codonfilter16.species, "species number mismatch");
assert(1 == codonfilter16.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter16");
UseModel(model16);
ExecuteCommands("Tree tree16 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree16, tree);
DataSetFilter codonfilter17 = CreateFilter(data, 3, "48-50", "", "TAA,TAG,TGA");
assert(data.species == codonfilter17.species, "species number mismatch");
assert(1 == codonfilter17.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter17");
UseModel(model17);
ExecuteCommands("Tree tree17 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree17, tree);
DataSetFilter codonfilter18 = CreateFilter(data, 3, "51-53", "", "TAA,TAG,TGA");
assert(data.species == codonfilter18.species, "species number mismatch");
assert(1 == codonfilter18.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter18");
UseModel(model18);
ExecuteCommands("Tree tree18 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree18, tree);
DataSetFilter codonfilter19 = CreateFilter(data, 3, "54-56", "", "TAA,TAG,TGA");
assert(data.species == codonfilter19.species, "species number mismatch");
assert(1 == codonfilter19.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter19");
UseModel(model19);
ExecuteCommands("Tree tree19 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree19, tree);
DataSetFilter codonfilter20 = CreateFilter(data, 3, "57-59", "", "TAA,TAG,TGA");
assert(data.species == codonfilter20.species, "species number mismatch");
assert(1 == codonfilter20.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter20");
UseModel(model20);
ExecuteCommands("Tree tree20 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree20, tree);
DataSetFilter codonfilter21 = CreateFilter(data, 3, "60-62", "", "TAA,TAG,TGA");
assert(data.species == codonfilter21.species, "species number mismatch");
assert(1 == codonfilter21.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter21");
UseModel(model21);
ExecuteCommands("Tree tree21 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree21, tree);
DataSetFilter codonfilter22 = CreateFilter(data, 3, "63-65", "", "TAA,TAG,TGA");
assert(data.species == codonfilter22.species, "species number mismatch");
assert(1 == codonfilter22.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter22");
UseModel(model22);
ExecuteCommands("Tree tree22 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree22, tree);
DataSetFilter codonfilter23 = CreateFilter(data, 3, "66-68", "", "TAA,TAG,TGA");
assert(data.species == codonfilter23.species, "species number mismatch");
assert(1 == codonfilter23.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter23");
UseModel(model23);
ExecuteCommands("Tree tree23 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree23, tree);
DataSetFilter codonfilter24 = CreateFilter(data, 3, "69-71", "", "TAA,TAG,TGA");
assert(data.species == codonfilter24.species, "species number mismatch");
assert(1 == codonfilter24.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter24");
UseModel(model24);
ExecuteCommands("Tree tree24 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree24, tree);
DataSetFilter codonfilter25 = CreateFilter(data, 3, "72-74", "", "TAA,TAG,TGA");
assert(data.species == codonfilter25.species, "species number mismatch");
assert(1 == codonfilter25.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter25");
UseModel(model25);
ExecuteCommands("Tree tree25 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree25, tree);
DataSetFilter codonfilter26 = CreateFilter(data, 3, "75-77", "", "TAA,TAG,TGA");
assert(data.species == codonfilter26.species, "species number mismatch");
assert(1 == codonfilter26.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter26");
UseModel(model26);
ExecuteCommands("Tree tree26 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree26, tree);
DataSetFilter codonfilter27 = CreateFilter(data, 3, "78-80", "", "TAA,TAG,TGA");
assert(data.species == codonfilter27.species, "species number mismatch");
assert(1 == codonfilter27.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter27");
UseModel(model27);
ExecuteCommands("Tree tree27 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree27, tree);
DataSetFilter codonfilter28 = CreateFilter(data, 3, "81-83", "", "TAA,TAG,TGA");
assert(data.species == codonfilter28.species, "species number mismatch");
assert(1 == codonfilter28.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter28");
UseModel(model28);
ExecuteCommands("Tree tree28 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree28, tree);
DataSetFilter codonfilter29 = CreateFilter(data, 3, "84-86", "", "TAA,TAG,TGA");
assert(data.species == codonfilter29.species, "species number mismatch");
assert(1 == codonfilter29.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter29");
UseModel(model29);
ExecuteCommands("Tree tree29 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree29, tree);
DataSetFilter codonfilter30 = CreateFilter(data, 3, "87-89", "", "TAA,TAG,TGA");
assert(data.species == codonfilter30.species, "species number mismatch");
assert(1 == codonfilter30.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter30");
UseModel(model30);
ExecuteCommands("Tree tree30 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree30, tree);
DataSetFilter codonfilter31 = CreateFilter(data, 3, "90-92", "", "TAA,TAG,TGA");
assert(data.species == codonfilter31.species, "species number mismatch");
assert(1 == codonfilter31.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter31");
UseModel(model31);
ExecuteCommands("Tree tree31 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree31, tree);
DataSetFilter codonfilter32 = CreateFilter(data, 3, "93-95", "", "TAA,TAG,TGA");
assert(data.species == codonfilter32.species, "species number mismatch");
assert(1 == codonfilter32.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter32");
UseModel(model32);
ExecuteCommands("Tree tree32 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree32, tree);
DataSetFilter codonfilter33 = CreateFilter(data, 3, "96-98", "", "TAA,TAG,TGA");
assert(data.species == codonfilter33.species, "species number mismatch");
assert(1 == codonfilter33.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter33");
UseModel(model33);
ExecuteCommands("Tree tree33 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree33, tree);
DataSetFilter codonfilter34 = CreateFilter(data, 3, "99-101", "", "TAA,TAG,TGA");
assert(data.species == codonfilter34.species, "species number mismatch");
assert(1 == codonfilter34.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter34");
UseModel(model34);
ExecuteCommands("Tree tree34 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree34, tree);
DataSetFilter codonfilter35 = CreateFilter(data, 3, "102-104", "", "TAA,TAG,TGA");
assert(data.species == codonfilter35.species, "species number mismatch");
assert(1 == codonfilter35.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter35");
UseModel(model35);
ExecuteCommands("Tree tree35 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree35, tree);
DataSetFilter codonfilter36 = CreateFilter(data, 3, "105-107", "", "TAA,TAG,TGA");
assert(data.species == codonfilter36.species, "species number mismatch");
assert(1 == codonfilter36.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter36");
UseModel(model36);
ExecuteCommands("Tree tree36 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree36, tree);
DataSetFilter codonfilter37 = CreateFilter(data, 3, "108-110", "", "TAA,TAG,TGA");
assert(data.species == codonfilter37.species, "species number mismatch");
assert(1 == codonfilter37.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter37");
UseModel(model37);
ExecuteCommands("Tree tree37 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree37, tree);
DataSetFilter codonfilter38 = CreateFilter(data, 3, "111-113", "", "TAA,TAG,TGA");
assert(data.species == codonfilter38.species, "species number mismatch");
assert(1 == codonfilter38.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter38");
UseModel(model38);
ExecuteCommands("Tree tree38 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree38, tree);
DataSetFilter codonfilter39 = CreateFilter(data, 3, "114-116", "", "TAA,TAG,TGA");
assert(data.species == codonfilter39.species, "species number mismatch");
assert(1 == codonfilter39.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter39");
UseModel(model39);
ExecuteCommands("Tree tree39 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree39, tree);
DataSetFilter codonfilter40 = CreateFilter(data, 3, "117-119", "", "TAA,TAG,TGA");
assert(data.species == codonfilter40.species, "species number mismatch");
assert(1 == codonfilter40.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter40");
UseModel(model40);
ExecuteCommands("Tree tree40 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree40, tree);
DataSetFilter codonfilter41 = CreateFilter(data, 3, "120-122", "", "TAA,TAG,TGA");
assert(data.species == codonfilter41.species, "species number mismatch");
assert(1 == codonfilter41.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter41");
UseModel(model41);
ExecuteCommands("Tree tree41 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree41, tree);
DataSetFilter codonfilter42 = CreateFilter(data, 3, "123-125", "", "TAA,TAG,TGA");
assert(data.species == codonfilter42.species, "species number mismatch");
assert(1 == codonfilter42.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter42");
UseModel(model42);
ExecuteCommands("Tree tree42 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree42, tree);
DataSetFilter codonfilter43 = CreateFilter(data, 3, "126-128", "", "TAA,TAG,TGA");
assert(data.species == codonfilter43.species, "species number mismatch");
assert(1 == codonfilter43.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter43");
UseModel(model43);
ExecuteCommands("Tree tree43 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree43, tree);
DataSetFilter codonfilter44 = CreateFilter(data, 3, "129-131", "", "TAA,TAG,TGA");
assert(data.species == codonfilter44.species, "species number mismatch");
assert(1 == codonfilter44.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter44");
UseModel(model44);
ExecuteCommands("Tree tree44 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree44, tree);
DataSetFilter codonfilter45 = CreateFilter(data, 3, "132-134", "", "TAA,TAG,TGA");
assert(data.species == codonfilter45.species, "species number mismatch");
assert(1 == codonfilter45.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter45");
UseModel(model45);
ExecuteCommands("Tree tree45 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree45, tree);
DataSetFilter codonfilter46 = CreateFilter(data, 3, "135-137", "", "TAA,TAG,TGA");
assert(data.species == codonfilter46.species, "species number mismatch");
assert(1 == codonfilter46.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter46");
UseModel(model46);
ExecuteCommands("Tree tree46 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree46, tree);
DataSetFilter codonfilter47 = CreateFilter(data, 3, "138-140", "", "TAA,TAG,TGA");
assert(data.species == codonfilter47.species, "species number mismatch");
assert(1 == codonfilter47.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter47");
UseModel(model47);
ExecuteCommands("Tree tree47 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree47, tree);
DataSetFilter codonfilter48 = CreateFilter(data, 3, "141-143", "", "TAA,TAG,TGA");
assert(data.species == codonfilter48.species, "species number mismatch");
assert(1 == codonfilter48.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter48");
UseModel(model48);
ExecuteCommands("Tree tree48 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree48, tree);
DataSetFilter codonfilter49 = CreateFilter(data, 3, "144-146", "", "TAA,TAG,TGA");
assert(data.species == codonfilter49.species, "species number mismatch");
assert(1 == codonfilter49.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter49");
UseModel(model49);
ExecuteCommands("Tree tree49 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree49, tree);
DataSetFilter codonfilter50 = CreateFilter(data, 3, "147-149", "", "TAA,TAG,TGA");
assert(data.species == codonfilter50.species, "species number mismatch");
assert(1 == codonfilter50.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter50");
UseModel(model50);
ExecuteCommands("Tree tree50 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree50, tree);
DataSetFilter codonfilter51 = CreateFilter(data, 3, "150-152", "", "TAA,TAG,TGA");
assert(data.species == codonfilter51.species, "species number mismatch");
assert(1 == codonfilter51.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter51");
UseModel(model51);
ExecuteCommands("Tree tree51 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree51, tree);
DataSetFilter codonfilter52 = CreateFilter(data, 3, "153-155", "", "TAA,TAG,TGA");
assert(data.species == codonfilter52.species, "species number mismatch");
assert(1 == codonfilter52.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter52");
UseModel(model52);
ExecuteCommands("Tree tree52 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree52, tree);
DataSetFilter codonfilter53 = CreateFilter(data, 3, "156-158", "", "TAA,TAG,TGA");
assert(data.species == codonfilter53.species, "species number mismatch");
assert(1 == codonfilter53.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter53");
UseModel(model53);
ExecuteCommands("Tree tree53 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree53, tree);
DataSetFilter codonfilter54 = CreateFilter(data, 3, "159-161", "", "TAA,TAG,TGA");
assert(data.species == codonfilter54.species, "species number mismatch");
assert(1 == codonfilter54.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter54");
UseModel(model54);
ExecuteCommands("Tree tree54 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree54, tree);
DataSetFilter codonfilter55 = CreateFilter(data, 3, "162-164", "", "TAA,TAG,TGA");
assert(data.species == codonfilter55.species, "species number mismatch");
assert(1 == codonfilter55.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter55");
UseModel(model55);
ExecuteCommands("Tree tree55 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree55, tree);
DataSetFilter codonfilter56 = CreateFilter(data, 3, "165-167", "", "TAA,TAG,TGA");
assert(data.species == codonfilter56.species, "species number mismatch");
assert(1 == codonfilter56.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter56");
UseModel(model56);
ExecuteCommands("Tree tree56 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree56, tree);
DataSetFilter codonfilter57 = CreateFilter(data, 3, "168-170", "", "TAA,TAG,TGA");
assert(data.species == codonfilter57.species, "species number mismatch");
assert(1 == codonfilter57.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter57");
UseModel(model57);
ExecuteCommands("Tree tree57 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree57, tree);
DataSetFilter codonfilter58 = CreateFilter(data, 3, "171-173", "", "TAA,TAG,TGA");
assert(data.species == codonfilter58.species, "species number mismatch");
assert(1 == codonfilter58.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter58");
UseModel(model58);
ExecuteCommands("Tree tree58 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree58, tree);
DataSetFilter codonfilter59 = CreateFilter(data, 3, "174-176", "", "TAA,TAG,TGA");
assert(data.species == codonfilter59.species, "species number mismatch");
assert(1 == codonfilter59.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter59");
UseModel(model59);
ExecuteCommands("Tree tree59 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree59, tree);
DataSetFilter codonfilter60 = CreateFilter(data, 3, "177-179", "", "TAA,TAG,TGA");
assert(data.species == codonfilter60.species, "species number mismatch");
assert(1 == codonfilter60.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter60");
UseModel(model60);
ExecuteCommands("Tree tree60 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree60, tree);
DataSetFilter codonfilter61 = CreateFilter(data, 3, "180-182", "", "TAA,TAG,TGA");
assert(data.species == codonfilter61.species, "species number mismatch");
assert(1 == codonfilter61.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter61");
UseModel(model61);
ExecuteCommands("Tree tree61 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree61, tree);
DataSetFilter codonfilter62 = CreateFilter(data, 3, "183-185", "", "TAA,TAG,TGA");
assert(data.species == codonfilter62.species, "species number mismatch");
assert(1 == codonfilter62.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter62");
UseModel(model62);
ExecuteCommands("Tree tree62 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree62, tree);
DataSetFilter codonfilter63 = CreateFilter(data, 3, "186-188", "", "TAA,TAG,TGA");
assert(data.species == codonfilter63.species, "species number mismatch");
assert(1 == codonfilter63.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter63");
UseModel(model63);
ExecuteCommands("Tree tree63 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree63, tree);
DataSetFilter codonfilter64 = CreateFilter(data, 3, "189-191", "", "TAA,TAG,TGA");
assert(data.species == codonfilter64.species, "species number mismatch");
assert(1 == codonfilter64.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter64");
UseModel(model64);
ExecuteCommands("Tree tree64 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree64, tree);
DataSetFilter codonfilter65 = CreateFilter(data, 3, "192-194", "", "TAA,TAG,TGA");
assert(data.species == codonfilter65.species, "species number mismatch");
assert(1 == codonfilter65.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter65");
UseModel(model65);
ExecuteCommands("Tree tree65 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree65, tree);
DataSetFilter codonfilter66 = CreateFilter(data, 3, "195-197", "", "TAA,TAG,TGA");
assert(data.species == codonfilter66.species, "species number mismatch");
assert(1 == codonfilter66.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter66");
UseModel(model66);
ExecuteCommands("Tree tree66 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree66, tree);
DataSetFilter codonfilter67 = CreateFilter(data, 3, "198-200", "", "TAA,TAG,TGA");
assert(data.species == codonfilter67.species, "species number mismatch");
assert(1 == codonfilter67.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter67");
UseModel(model67);
ExecuteCommands("Tree tree67 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree67, tree);
DataSetFilter codonfilter68 = CreateFilter(data, 3, "201-203", "", "TAA,TAG,TGA");
assert(data.species == codonfilter68.species, "species number mismatch");
assert(1 == codonfilter68.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter68");
UseModel(model68);
ExecuteCommands("Tree tree68 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree68, tree);
DataSetFilter codonfilter69 = CreateFilter(data, 3, "204-206", "", "TAA,TAG,TGA");
assert(data.species == codonfilter69.species, "species number mismatch");
assert(1 == codonfilter69.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter69");
UseModel(model69);
ExecuteCommands("Tree tree69 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree69, tree);
DataSetFilter codonfilter70 = CreateFilter(data, 3, "207-209", "", "TAA,TAG,TGA");
assert(data.species == codonfilter70.species, "species number mismatch");
assert(1 == codonfilter70.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter70");
UseModel(model70);
ExecuteCommands("Tree tree70 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree70, tree);
DataSetFilter codonfilter71 = CreateFilter(data, 3, "210-212", "", "TAA,TAG,TGA");
assert(data.species == codonfilter71.species, "species number mismatch");
assert(1 == codonfilter71.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter71");
UseModel(model71);
ExecuteCommands("Tree tree71 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree71, tree);
DataSetFilter codonfilter72 = CreateFilter(data, 3, "213-215", "", "TAA,TAG,TGA");
assert(data.species == codonfilter72.species, "species number mismatch");
assert(1 == codonfilter72.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter72");
UseModel(model72);
ExecuteCommands("Tree tree72 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree72, tree);
DataSetFilter codonfilter73 = CreateFilter(data, 3, "216-218", "", "TAA,TAG,TGA");
assert(data.species == codonfilter73.species, "species number mismatch");
assert(1 == codonfilter73.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter73");
UseModel(model73);
ExecuteCommands("Tree tree73 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree73, tree);
DataSetFilter codonfilter74 = CreateFilter(data, 3, "219-221", "", "TAA,TAG,TGA");
assert(data.species == codonfilter74.species, "species number mismatch");
assert(1 == codonfilter74.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter74");
UseModel(model74);
ExecuteCommands("Tree tree74 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree74, tree);
DataSetFilter codonfilter75 = CreateFilter(data, 3, "222-224", "", "TAA,TAG,TGA");
assert(data.species == codonfilter75.species, "species number mismatch");
assert(1 == codonfilter75.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter75");
UseModel(model75);
ExecuteCommands("Tree tree75 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree75, tree);
DataSetFilter codonfilter76 = CreateFilter(data, 3, "225-227", "", "TAA,TAG,TGA");
assert(data.species == codonfilter76.species, "species number mismatch");
assert(1 == codonfilter76.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter76");
UseModel(model76);
ExecuteCommands("Tree tree76 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree76, tree);
DataSetFilter codonfilter77 = CreateFilter(data, 3, "228-230", "", "TAA,TAG,TGA");
assert(data.species == codonfilter77.species, "species number mismatch");
assert(1 == codonfilter77.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter77");
UseModel(model77);
ExecuteCommands("Tree tree77 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree77, tree);
DataSetFilter codonfilter78 = CreateFilter(data, 3, "231-233", "", "TAA,TAG,TGA");
assert(data.species == codonfilter78.species, "species number mismatch");
assert(1 == codonfilter78.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter78");
UseModel(model78);
ExecuteCommands("Tree tree78 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree78, tree);
DataSetFilter codonfilter79 = CreateFilter(data, 3, "234-236", "", "TAA,TAG,TGA");
assert(data.species == codonfilter79.species, "species number mismatch");
assert(1 == codonfilter79.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter79");
UseModel(model79);
ExecuteCommands("Tree tree79 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree79, tree);
DataSetFilter codonfilter80 = CreateFilter(data, 3, "237-239", "", "TAA,TAG,TGA");
assert(data.species == codonfilter80.species, "species number mismatch");
assert(1 == codonfilter80.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter80");
UseModel(model80);
ExecuteCommands("Tree tree80 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree80, tree);
DataSetFilter codonfilter81 = CreateFilter(data, 3, "240-242", "", "TAA,TAG,TGA");
assert(data.species == codonfilter81.species, "species number mismatch");
assert(1 == codonfilter81.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter81");
UseModel(model81);
ExecuteCommands("Tree tree81 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree81, tree);
DataSetFilter codonfilter82 = CreateFilter(data, 3, "243-245", "", "TAA,TAG,TGA");
assert(data.species == codonfilter82.species, "species number mismatch");
assert(1 == codonfilter82.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter82");
UseModel(model82);
ExecuteCommands("Tree tree82 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree82, tree);
DataSetFilter codonfilter83 = CreateFilter(data, 3, "246-248", "", "TAA,TAG,TGA");
assert(data.species == codonfilter83.species, "species number mismatch");
assert(1 == codonfilter83.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter83");
UseModel(model83);
ExecuteCommands("Tree tree83 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree83, tree);
DataSetFilter codonfilter84 = CreateFilter(data, 3, "249-251", "", "TAA,TAG,TGA");
assert(data.species == codonfilter84.species, "species number mismatch");
assert(1 == codonfilter84.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter84");
UseModel(model84);
ExecuteCommands("Tree tree84 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree84, tree);
DataSetFilter codonfilter85 = CreateFilter(data, 3, "252-254", "", "TAA,TAG,TGA");
assert(data.species == codonfilter85.species, "species number mismatch");
assert(1 == codonfilter85.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter85");
UseModel(model85);
ExecuteCommands("Tree tree85 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree85, tree);
DataSetFilter codonfilter86 = CreateFilter(data, 3, "255-257", "", "TAA,TAG,TGA");
assert(data.species == codonfilter86.species, "species number mismatch");
assert(1 == codonfilter86.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter86");
UseModel(model86);
ExecuteCommands("Tree tree86 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree86, tree);
DataSetFilter codonfilter87 = CreateFilter(data, 3, "258-260", "", "TAA,TAG,TGA");
assert(data.species == codonfilter87.species, "species number mismatch");
assert(1 == codonfilter87.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter87");
UseModel(model87);
ExecuteCommands("Tree tree87 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree87, tree);
DataSetFilter codonfilter88 = CreateFilter(data, 3, "261-263", "", "TAA,TAG,TGA");
assert(data.species == codonfilter88.species, "species number mismatch");
assert(1 == codonfilter88.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter88");
UseModel(model88);
ExecuteCommands("Tree tree88 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree88, tree);
DataSetFilter codonfilter89 = CreateFilter(data, 3, "264-266", "", "TAA,TAG,TGA");
assert(data.species == codonfilter89.species, "species number mismatch");
assert(1 == codonfilter89.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter89");
UseModel(model89);
ExecuteCommands("Tree tree89 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree89, tree);
DataSetFilter codonfilter90 = CreateFilter(data, 3, "267-269", "", "TAA,TAG,TGA");
assert(data.species == codonfilter90.species, "species number mismatch");
assert(1 == codonfilter90.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter90");
UseModel(model90);
ExecuteCommands("Tree tree90 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree90, tree);
DataSetFilter codonfilter91 = CreateFilter(data, 3, "270-272", "", "TAA,TAG,TGA");
assert(data.species == codonfilter91.species, "species number mismatch");
assert(1 == codonfilter91.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter91");
UseModel(model91);
ExecuteCommands("Tree tree91 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree91, tree);
DataSetFilter codonfilter92 = CreateFilter(data, 3, "273-275", "", "TAA,TAG,TGA");
assert(data.species == codonfilter92.species, "species number mismatch");
assert(1 == codonfilter92.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter92");
UseModel(model92);
ExecuteCommands("Tree tree92 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree92, tree);
DataSetFilter codonfilter93 = CreateFilter(data, 3, "276-278", "", "TAA,TAG,TGA");
assert(data.species == codonfilter93.species, "species number mismatch");
assert(1 == codonfilter93.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter93");
UseModel(model93);
ExecuteCommands("Tree tree93 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree93, tree);
DataSetFilter codonfilter94 = CreateFilter(data, 3, "279-281", "", "TAA,TAG,TGA");
assert(data.species == codonfilter94.species, "species number mismatch");
assert(1 == codonfilter94.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter94");
UseModel(model94);
ExecuteCommands("Tree tree94 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree94, tree);
DataSetFilter codonfilter95 = CreateFilter(data, 3, "282-284", "", "TAA,TAG,TGA");
assert(data.species == codonfilter95.species, "species number mismatch");
assert(1 == codonfilter95.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter95");
UseModel(model95);
ExecuteCommands("Tree tree95 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree95, tree);
DataSetFilter codonfilter96 = CreateFilter(data, 3, "285-287", "", "TAA,TAG,TGA");
assert(data.species == codonfilter96.species, "species number mismatch");
assert(1 == codonfilter96.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter96");
UseModel(model96);
ExecuteCommands("Tree tree96 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree96, tree);
DataSetFilter codonfilter97 = CreateFilter(data, 3, "288-290", "", "TAA,TAG,TGA");
assert(data.species == codonfilter97.species, "species number mismatch");
assert(1 == codonfilter97.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter97");
UseModel(model97);
ExecuteCommands("Tree tree97 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree97, tree);
DataSetFilter codonfilter98 = CreateFilter(data, 3, "291-293", "", "TAA,TAG,TGA");
assert(data.species == codonfilter98.species, "species number mismatch");
assert(1 == codonfilter98.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter98");
UseModel(model98);
ExecuteCommands("Tree tree98 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree98, tree);
DataSetFilter codonfilter99 = CreateFilter(data, 3, "294-296", "", "TAA,TAG,TGA");
assert(data.species == codonfilter99.species, "species number mismatch");
assert(1 == codonfilter99.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter99");
UseModel(model99);
ExecuteCommands("Tree tree99 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree99, tree);
DataSetFilter codonfilter100 = CreateFilter(data, 3, "297-299", "", "TAA,TAG,TGA");
assert(data.species == codonfilter100.species, "species number mismatch");
assert(1 == codonfilter100.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter100");
UseModel(model100);
ExecuteCommands("Tree tree100 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree100, tree);
DataSetFilter codonfilter101 = CreateFilter(data, 3, "300-302", "", "TAA,TAG,TGA");
assert(data.species == codonfilter101.species, "species number mismatch");
assert(1 == codonfilter101.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter101");
UseModel(model101);
ExecuteCommands("Tree tree101 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree101, tree);
DataSetFilter codonfilter102 = CreateFilter(data, 3, "303-305", "", "TAA,TAG,TGA");
assert(data.species == codonfilter102.species, "species number mismatch");
assert(1 == codonfilter102.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter102");
UseModel(model102);
ExecuteCommands("Tree tree102 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree102, tree);
DataSetFilter codonfilter103 = CreateFilter(data, 3, "306-308", "", "TAA,TAG,TGA");
assert(data.species == codonfilter103.species, "species number mismatch");
assert(1 == codonfilter103.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter103");
UseModel(model103);
ExecuteCommands("Tree tree103 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree103, tree);
DataSetFilter codonfilter104 = CreateFilter(data, 3, "309-311", "", "TAA,TAG,TGA");
assert(data.species == codonfilter104.species, "species number mismatch");
assert(1 == codonfilter104.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter104");
UseModel(model104);
ExecuteCommands("Tree tree104 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree104, tree);
DataSetFilter codonfilter105 = CreateFilter(data, 3, "312-314", "", "TAA,TAG,TGA");
assert(data.species == codonfilter105.species, "species number mismatch");
assert(1 == codonfilter105.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter105");
UseModel(model105);
ExecuteCommands("Tree tree105 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree105, tree);
DataSetFilter codonfilter106 = CreateFilter(data, 3, "315-317", "", "TAA,TAG,TGA");
assert(data.species == codonfilter106.species, "species number mismatch");
assert(1 == codonfilter106.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter106");
UseModel(model106);
ExecuteCommands("Tree tree106 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree106, tree);
DataSetFilter codonfilter107 = CreateFilter(data, 3, "318-320", "", "TAA,TAG,TGA");
assert(data.species == codonfilter107.species, "species number mismatch");
assert(1 == codonfilter107.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter107");
UseModel(model107);
ExecuteCommands("Tree tree107 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree107, tree);
DataSetFilter codonfilter108 = CreateFilter(data, 3, "321-323", "", "TAA,TAG,TGA");
assert(data.species == codonfilter108.species, "species number mismatch");
assert(1 == codonfilter108.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter108");
UseModel(model108);
ExecuteCommands("Tree tree108 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree108, tree);
DataSetFilter codonfilter109 = CreateFilter(data, 3, "324-326", "", "TAA,TAG,TGA");
assert(data.species == codonfilter109.species, "species number mismatch");
assert(1 == codonfilter109.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter109");
UseModel(model109);
ExecuteCommands("Tree tree109 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree109, tree);
DataSetFilter codonfilter110 = CreateFilter(data, 3, "327-329", "", "TAA,TAG,TGA");
assert(data.species == codonfilter110.species, "species number mismatch");
assert(1 == codonfilter110.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter110");
UseModel(model110);
ExecuteCommands("Tree tree110 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree110, tree);
DataSetFilter codonfilter111 = CreateFilter(data, 3, "330-332", "", "TAA,TAG,TGA");
assert(data.species == codonfilter111.species, "species number mismatch");
assert(1 == codonfilter111.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter111");
UseModel(model111);
ExecuteCommands("Tree tree111 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree111, tree);
DataSetFilter codonfilter112 = CreateFilter(data, 3, "333-335", "", "TAA,TAG,TGA");
assert(data.species == codonfilter112.species, "species number mismatch");
assert(1 == codonfilter112.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter112");
UseModel(model112);
ExecuteCommands("Tree tree112 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree112, tree);
DataSetFilter codonfilter113 = CreateFilter(data, 3, "336-338", "", "TAA,TAG,TGA");
assert(data.species == codonfilter113.species, "species number mismatch");
assert(1 == codonfilter113.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter113");
UseModel(model113);
ExecuteCommands("Tree tree113 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree113, tree);
DataSetFilter codonfilter114 = CreateFilter(data, 3, "339-341", "", "TAA,TAG,TGA");
assert(data.species == codonfilter114.species, "species number mismatch");
assert(1 == codonfilter114.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter114");
UseModel(model114);
ExecuteCommands("Tree tree114 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree114, tree);
DataSetFilter codonfilter115 = CreateFilter(data, 3, "342-344", "", "TAA,TAG,TGA");
assert(data.species == codonfilter115.species, "species number mismatch");
assert(1 == codonfilter115.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter115");
UseModel(model115);
ExecuteCommands("Tree tree115 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree115, tree);
DataSetFilter codonfilter116 = CreateFilter(data, 3, "345-347", "", "TAA,TAG,TGA");
assert(data.species == codonfilter116.species, "species number mismatch");
assert(1 == codonfilter116.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter116");
UseModel(model116);
ExecuteCommands("Tree tree116 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree116, tree);
DataSetFilter codonfilter117 = CreateFilter(data, 3, "348-350", "", "TAA,TAG,TGA");
assert(data.species == codonfilter117.species, "species number mismatch");
assert(1 == codonfilter117.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter117");
UseModel(model117);
ExecuteCommands("Tree tree117 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree117, tree);
DataSetFilter codonfilter118 = CreateFilter(data, 3, "351-353", "", "TAA,TAG,TGA");
assert(data.species == codonfilter118.species, "species number mismatch");
assert(1 == codonfilter118.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter118");
UseModel(model118);
ExecuteCommands("Tree tree118 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree118, tree);
DataSetFilter codonfilter119 = CreateFilter(data, 3, "354-356", "", "TAA,TAG,TGA");
assert(data.species == codonfilter119.species, "species number mismatch");
assert(1 == codonfilter119.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter119");
UseModel(model119);
ExecuteCommands("Tree tree119 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree119, tree);
DataSetFilter codonfilter120 = CreateFilter(data, 3, "357-359", "", "TAA,TAG,TGA");
assert(data.species == codonfilter120.species, "species number mismatch");
assert(1 == codonfilter120.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter120");
UseModel(model120);
ExecuteCommands("Tree tree120 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree120, tree);
DataSetFilter codonfilter121 = CreateFilter(data, 3, "360-362", "", "TAA,TAG,TGA");
assert(data.species == codonfilter121.species, "species number mismatch");
assert(1 == codonfilter121.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter121");
UseModel(model121);
ExecuteCommands("Tree tree121 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree121, tree);
DataSetFilter codonfilter122 = CreateFilter(data, 3, "363-365", "", "TAA,TAG,TGA");
assert(data.species == codonfilter122.species, "species number mismatch");
assert(1 == codonfilter122.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter122");
UseModel(model122);
ExecuteCommands("Tree tree122 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree122, tree);
DataSetFilter codonfilter123 = CreateFilter(data, 3, "366-368", "", "TAA,TAG,TGA");
assert(data.species == codonfilter123.species, "species number mismatch");
assert(1 == codonfilter123.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter123");
UseModel(model123);
ExecuteCommands("Tree tree123 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree123, tree);
DataSetFilter codonfilter124 = CreateFilter(data, 3, "369-371", "", "TAA,TAG,TGA");
assert(data.species == codonfilter124.species, "species number mismatch");
assert(1 == codonfilter124.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter124");
UseModel(model124);
ExecuteCommands("Tree tree124 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree124, tree);
DataSetFilter codonfilter125 = CreateFilter(data, 3, "372-374", "", "TAA,TAG,TGA");
assert(data.species == codonfilter125.species, "species number mismatch");
assert(1 == codonfilter125.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter125");
UseModel(model125);
ExecuteCommands("Tree tree125 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree125, tree);
DataSetFilter codonfilter126 = CreateFilter(data, 3, "375-377", "", "TAA,TAG,TGA");
assert(data.species == codonfilter126.species, "species number mismatch");
assert(1 == codonfilter126.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter126");
UseModel(model126);
ExecuteCommands("Tree tree126 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree126, tree);
DataSetFilter codonfilter127 = CreateFilter(data, 3, "378-380", "", "TAA,TAG,TGA");
assert(data.species == codonfilter127.species, "species number mismatch");
assert(1 == codonfilter127.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter127");
UseModel(model127);
ExecuteCommands("Tree tree127 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree127, tree);
DataSetFilter codonfilter128 = CreateFilter(data, 3, "381-383", "", "TAA,TAG,TGA");
assert(data.species == codonfilter128.species, "species number mismatch");
assert(1 == codonfilter128.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter128");
UseModel(model128);
ExecuteCommands("Tree tree128 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree128, tree);
DataSetFilter codonfilter129 = CreateFilter(data, 3, "384-386", "", "TAA,TAG,TGA");
assert(data.species == codonfilter129.species, "species number mismatch");
assert(1 == codonfilter129.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter129");
UseModel(model129);
ExecuteCommands("Tree tree129 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree129, tree);
DataSetFilter codonfilter130 = CreateFilter(data, 3, "387-389", "", "TAA,TAG,TGA");
assert(data.species == codonfilter130.species, "species number mismatch");
assert(1 == codonfilter130.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter130");
UseModel(model130);
ExecuteCommands("Tree tree130 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree130, tree);
DataSetFilter codonfilter131 = CreateFilter(data, 3, "390-392", "", "TAA,TAG,TGA");
assert(data.species == codonfilter131.species, "species number mismatch");
assert(1 == codonfilter131.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter131");
UseModel(model131);
ExecuteCommands("Tree tree131 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree131, tree);
DataSetFilter codonfilter132 = CreateFilter(data, 3, "393-395", "", "TAA,TAG,TGA");
assert(data.species == codonfilter132.species, "species number mismatch");
assert(1 == codonfilter132.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter132");
UseModel(model132);
ExecuteCommands("Tree tree132 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree132, tree);
DataSetFilter codonfilter133 = CreateFilter(data, 3, "396-398", "", "TAA,TAG,TGA");
assert(data.species == codonfilter133.species, "species number mismatch");
assert(1 == codonfilter133.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter133");
UseModel(model133);
ExecuteCommands("Tree tree133 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree133, tree);
DataSetFilter codonfilter134 = CreateFilter(data, 3, "399-401", "", "TAA,TAG,TGA");
assert(data.species == codonfilter134.species, "species number mismatch");
assert(1 == codonfilter134.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter134");
UseModel(model134);
ExecuteCommands("Tree tree134 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree134, tree);
DataSetFilter codonfilter135 = CreateFilter(data, 3, "402-404", "", "TAA,TAG,TGA");
assert(data.species == codonfilter135.species, "species number mismatch");
assert(1 == codonfilter135.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter135");
UseModel(model135);
ExecuteCommands("Tree tree135 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree135, tree);
DataSetFilter codonfilter136 = CreateFilter(data, 3, "405-407", "", "TAA,TAG,TGA");
assert(data.species == codonfilter136.species, "species number mismatch");
assert(1 == codonfilter136.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter136");
UseModel(model136);
ExecuteCommands("Tree tree136 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree136, tree);
DataSetFilter codonfilter137 = CreateFilter(data, 3, "408-410", "", "TAA,TAG,TGA");
assert(data.species == codonfilter137.species, "species number mismatch");
assert(1 == codonfilter137.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter137");
UseModel(model137);
ExecuteCommands("Tree tree137 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree137, tree);
DataSetFilter codonfilter138 = CreateFilter(data, 3, "411-413", "", "TAA,TAG,TGA");
assert(data.species == codonfilter138.species, "species number mismatch");
assert(1 == codonfilter138.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter138");
UseModel(model138);
ExecuteCommands("Tree tree138 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree138, tree);
DataSetFilter codonfilter139 = CreateFilter(data, 3, "414-416", "", "TAA,TAG,TGA");
assert(data.species == codonfilter139.species, "species number mismatch");
assert(1 == codonfilter139.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter139");
UseModel(model139);
ExecuteCommands("Tree tree139 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree139, tree);
DataSetFilter codonfilter140 = CreateFilter(data, 3, "417-419", "", "TAA,TAG,TGA");
assert(data.species == codonfilter140.species, "species number mismatch");
assert(1 == codonfilter140.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter140");
UseModel(model140);
ExecuteCommands("Tree tree140 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree140, tree);
DataSetFilter codonfilter141 = CreateFilter(data, 3, "420-422", "", "TAA,TAG,TGA");
assert(data.species == codonfilter141.species, "species number mismatch");
assert(1 == codonfilter141.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter141");
UseModel(model141);
ExecuteCommands("Tree tree141 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree141, tree);
DataSetFilter codonfilter142 = CreateFilter(data, 3, "423-425", "", "TAA,TAG,TGA");
assert(data.species == codonfilter142.species, "species number mismatch");
assert(1 == codonfilter142.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter142");
UseModel(model142);
ExecuteCommands("Tree tree142 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree142, tree);
DataSetFilter codonfilter143 = CreateFilter(data, 3, "426-428", "", "TAA,TAG,TGA");
assert(data.species == codonfilter143.species, "species number mismatch");
assert(1 == codonfilter143.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter143");
UseModel(model143);
ExecuteCommands("Tree tree143 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree143, tree);
DataSetFilter codonfilter144 = CreateFilter(data, 3, "429-431", "", "TAA,TAG,TGA");
assert(data.species == codonfilter144.species, "species number mismatch");
assert(1 == codonfilter144.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter144");
UseModel(model144);
ExecuteCommands("Tree tree144 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree144, tree);
DataSetFilter codonfilter145 = CreateFilter(data, 3, "432-434", "", "TAA,TAG,TGA");
assert(data.species == codonfilter145.species, "species number mismatch");
assert(1 == codonfilter145.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter145");
UseModel(model145);
ExecuteCommands("Tree tree145 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree145, tree);
DataSetFilter codonfilter146 = CreateFilter(data, 3, "435-437", "", "TAA,TAG,TGA");
assert(data.species == codonfilter146.species, "species number mismatch");
assert(1 == codonfilter146.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter146");
UseModel(model146);
ExecuteCommands("Tree tree146 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree146, tree);
DataSetFilter codonfilter147 = CreateFilter(data, 3, "438-440", "", "TAA,TAG,TGA");
assert(data.species == codonfilter147.species, "species number mismatch");
assert(1 == codonfilter147.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter147");
UseModel(model147);
ExecuteCommands("Tree tree147 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree147, tree);
DataSetFilter codonfilter148 = CreateFilter(data, 3, "441-443", "", "TAA,TAG,TGA");
assert(data.species == codonfilter148.species, "species number mismatch");
assert(1 == codonfilter148.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter148");
UseModel(model148);
ExecuteCommands("Tree tree148 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree148, tree);
DataSetFilter codonfilter149 = CreateFilter(data, 3, "444-446", "", "TAA,TAG,TGA");
assert(data.species == codonfilter149.species, "species number mismatch");
assert(1 == codonfilter149.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter149");
UseModel(model149);
ExecuteCommands("Tree tree149 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree149, tree);
DataSetFilter codonfilter150 = CreateFilter(data, 3, "447-449", "", "TAA,TAG,TGA");
assert(data.species == codonfilter150.species, "species number mismatch");
assert(1 == codonfilter150.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter150");
UseModel(model150);
ExecuteCommands("Tree tree150 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree150, tree);
DataSetFilter codonfilter151 = CreateFilter(data, 3, "450-452", "", "TAA,TAG,TGA");
assert(data.species == codonfilter151.species, "species number mismatch");
assert(1 == codonfilter151.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter151");
UseModel(model151);
ExecuteCommands("Tree tree151 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree151, tree);
DataSetFilter codonfilter152 = CreateFilter(data, 3, "453-455", "", "TAA,TAG,TGA");
assert(data.species == codonfilter152.species, "species number mismatch");
assert(1 == codonfilter152.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter152");
UseModel(model152);
ExecuteCommands("Tree tree152 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree152, tree);
DataSetFilter codonfilter153 = CreateFilter(data, 3, "456-458", "", "TAA,TAG,TGA");
assert(data.species == codonfilter153.species, "species number mismatch");
assert(1 == codonfilter153.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter153");
UseModel(model153);
ExecuteCommands("Tree tree153 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree153, tree);
DataSetFilter codonfilter154 = CreateFilter(data, 3, "459-461", "", "TAA,TAG,TGA");
assert(data.species == codonfilter154.species, "species number mismatch");
assert(1 == codonfilter154.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter154");
UseModel(model154);
ExecuteCommands("Tree tree154 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree154, tree);
DataSetFilter codonfilter155 = CreateFilter(data, 3, "462-464", "", "TAA,TAG,TGA");
assert(data.species == codonfilter155.species, "species number mismatch");
assert(1 == codonfilter155.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter155");
UseModel(model155);
ExecuteCommands("Tree tree155 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree155, tree);
DataSetFilter codonfilter156 = CreateFilter(data, 3, "465-467", "", "TAA,TAG,TGA");
assert(data.species == codonfilter156.species, "species number mismatch");
assert(1 == codonfilter156.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter156");
UseModel(model156);
ExecuteCommands("Tree tree156 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree156, tree);
DataSetFilter codonfilter157 = CreateFilter(data, 3, "468-470", "", "TAA,TAG,TGA");
assert(data.species == codonfilter157.species, "species number mismatch");
assert(1 == codonfilter157.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter157");
UseModel(model157);
ExecuteCommands("Tree tree157 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree157, tree);
DataSetFilter codonfilter158 = CreateFilter(data, 3, "471-473", "", "TAA,TAG,TGA");
assert(data.species == codonfilter158.species, "species number mismatch");
assert(1 == codonfilter158.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter158");
UseModel(model158);
ExecuteCommands("Tree tree158 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree158, tree);
DataSetFilter codonfilter159 = CreateFilter(data, 3, "474-476", "", "TAA,TAG,TGA");
assert(data.species == codonfilter159.species, "species number mismatch");
assert(1 == codonfilter159.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter159");
UseModel(model159);
ExecuteCommands("Tree tree159 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree159, tree);
DataSetFilter codonfilter160 = CreateFilter(data, 3, "477-479", "", "TAA,TAG,TGA");
assert(data.species == codonfilter160.species, "species number mismatch");
assert(1 == codonfilter160.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter160");
UseModel(model160);
ExecuteCommands("Tree tree160 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree160, tree);
DataSetFilter codonfilter161 = CreateFilter(data, 3, "480-482", "", "TAA,TAG,TGA");
assert(data.species == codonfilter161.species, "species number mismatch");
assert(1 == codonfilter161.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter161");
UseModel(model161);
ExecuteCommands("Tree tree161 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree161, tree);
DataSetFilter codonfilter162 = CreateFilter(data, 3, "483-485", "", "TAA,TAG,TGA");
assert(data.species == codonfilter162.species, "species number mismatch");
assert(1 == codonfilter162.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter162");
UseModel(model162);
ExecuteCommands("Tree tree162 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree162, tree);
DataSetFilter codonfilter163 = CreateFilter(data, 3, "486-488", "", "TAA,TAG,TGA");
assert(data.species == codonfilter163.species, "species number mismatch");
assert(1 == codonfilter163.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter163");
UseModel(model163);
ExecuteCommands("Tree tree163 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree163, tree);
DataSetFilter codonfilter164 = CreateFilter(data, 3, "489-491", "", "TAA,TAG,TGA");
assert(data.species == codonfilter164.species, "species number mismatch");
assert(1 == codonfilter164.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter164");
UseModel(model164);
ExecuteCommands("Tree tree164 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree164, tree);
DataSetFilter codonfilter165 = CreateFilter(data, 3, "492-494", "", "TAA,TAG,TGA");
assert(data.species == codonfilter165.species, "species number mismatch");
assert(1 == codonfilter165.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter165");
UseModel(model165);
ExecuteCommands("Tree tree165 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree165, tree);
DataSetFilter codonfilter166 = CreateFilter(data, 3, "495-497", "", "TAA,TAG,TGA");
assert(data.species == codonfilter166.species, "species number mismatch");
assert(1 == codonfilter166.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter166");
UseModel(model166);
ExecuteCommands("Tree tree166 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree166, tree);
DataSetFilter codonfilter167 = CreateFilter(data, 3, "498-500", "", "TAA,TAG,TGA");
assert(data.species == codonfilter167.species, "species number mismatch");
assert(1 == codonfilter167.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter167");
UseModel(model167);
ExecuteCommands("Tree tree167 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree167, tree);
DataSetFilter codonfilter168 = CreateFilter(data, 3, "501-503", "", "TAA,TAG,TGA");
assert(data.species == codonfilter168.species, "species number mismatch");
assert(1 == codonfilter168.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter168");
UseModel(model168);
ExecuteCommands("Tree tree168 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree168, tree);
DataSetFilter codonfilter169 = CreateFilter(data, 3, "504-506", "", "TAA,TAG,TGA");
assert(data.species == codonfilter169.species, "species number mismatch");
assert(1 == codonfilter169.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter169");
UseModel(model169);
ExecuteCommands("Tree tree169 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree169, tree);
DataSetFilter codonfilter170 = CreateFilter(data, 3, "507-509", "", "TAA,TAG,TGA");
assert(data.species == codonfilter170.species, "species number mismatch");
assert(1 == codonfilter170.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter170");
UseModel(model170);
ExecuteCommands("Tree tree170 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree170, tree);
DataSetFilter codonfilter171 = CreateFilter(data, 3, "510-512", "", "TAA,TAG,TGA");
assert(data.species == codonfilter171.species, "species number mismatch");
assert(1 == codonfilter171.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter171");
UseModel(model171);
ExecuteCommands("Tree tree171 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree171, tree);
DataSetFilter codonfilter172 = CreateFilter(data, 3, "513-515", "", "TAA,TAG,TGA");
assert(data.species == codonfilter172.species, "species number mismatch");
assert(1 == codonfilter172.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter172");
UseModel(model172);
ExecuteCommands("Tree tree172 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree172, tree);
DataSetFilter codonfilter173 = CreateFilter(data, 3, "516-518", "", "TAA,TAG,TGA");
assert(data.species == codonfilter173.species, "species number mismatch");
assert(1 == codonfilter173.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter173");
UseModel(model173);
ExecuteCommands("Tree tree173 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree173, tree);
DataSetFilter codonfilter174 = CreateFilter(data, 3, "519-521", "", "TAA,TAG,TGA");
assert(data.species == codonfilter174.species, "species number mismatch");
assert(1 == codonfilter174.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter174");
UseModel(model174);
ExecuteCommands("Tree tree174 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree174, tree);
DataSetFilter codonfilter175 = CreateFilter(data, 3, "522-524", "", "TAA,TAG,TGA");
assert(data.species == codonfilter175.species, "species number mismatch");
assert(1 == codonfilter175.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter175");
UseModel(model175);
ExecuteCommands("Tree tree175 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree175, tree);
DataSetFilter codonfilter176 = CreateFilter(data, 3, "525-527", "", "TAA,TAG,TGA");
assert(data.species == codonfilter176.species, "species number mismatch");
assert(1 == codonfilter176.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter176");
UseModel(model176);
ExecuteCommands("Tree tree176 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree176, tree);
DataSetFilter codonfilter177 = CreateFilter(data, 3, "528-530", "", "TAA,TAG,TGA");
assert(data.species == codonfilter177.species, "species number mismatch");
assert(1 == codonfilter177.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter177");
UseModel(model177);
ExecuteCommands("Tree tree177 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree177, tree);
DataSetFilter codonfilter178 = CreateFilter(data, 3, "531-533", "", "TAA,TAG,TGA");
assert(data.species == codonfilter178.species, "species number mismatch");
assert(1 == codonfilter178.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter178");
UseModel(model178);
ExecuteCommands("Tree tree178 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree178, tree);
DataSetFilter codonfilter179 = CreateFilter(data, 3, "534-536", "", "TAA,TAG,TGA");
assert(data.species == codonfilter179.species, "species number mismatch");
assert(1 == codonfilter179.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter179");
UseModel(model179);
ExecuteCommands("Tree tree179 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree179, tree);
DataSetFilter codonfilter180 = CreateFilter(data, 3, "537-539", "", "TAA,TAG,TGA");
assert(data.species == codonfilter180.species, "species number mismatch");
assert(1 == codonfilter180.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter180");
UseModel(model180);
ExecuteCommands("Tree tree180 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree180, tree);
DataSetFilter codonfilter181 = CreateFilter(data, 3, "540-542", "", "TAA,TAG,TGA");
assert(data.species == codonfilter181.species, "species number mismatch");
assert(1 == codonfilter181.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter181");
UseModel(model181);
ExecuteCommands("Tree tree181 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree181, tree);
DataSetFilter codonfilter182 = CreateFilter(data, 3, "543-545", "", "TAA,TAG,TGA");
assert(data.species == codonfilter182.species, "species number mismatch");
assert(1 == codonfilter182.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter182");
UseModel(model182);
ExecuteCommands("Tree tree182 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree182, tree);
DataSetFilter codonfilter183 = CreateFilter(data, 3, "546-548", "", "TAA,TAG,TGA");
assert(data.species == codonfilter183.species, "species number mismatch");
assert(1 == codonfilter183.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter183");
UseModel(model183);
ExecuteCommands("Tree tree183 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree183, tree);
DataSetFilter codonfilter184 = CreateFilter(data, 3, "549-551", "", "TAA,TAG,TGA");
assert(data.species == codonfilter184.species, "species number mismatch");
assert(1 == codonfilter184.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter184");
UseModel(model184);
ExecuteCommands("Tree tree184 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree184, tree);
DataSetFilter codonfilter185 = CreateFilter(data, 3, "552-554", "", "TAA,TAG,TGA");
assert(data.species == codonfilter185.species, "species number mismatch");
assert(1 == codonfilter185.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter185");
UseModel(model185);
ExecuteCommands("Tree tree185 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree185, tree);
DataSetFilter codonfilter186 = CreateFilter(data, 3, "555-557", "", "TAA,TAG,TGA");
assert(data.species == codonfilter186.species, "species number mismatch");
assert(1 == codonfilter186.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter186");
UseModel(model186);
ExecuteCommands("Tree tree186 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree186, tree);
DataSetFilter codonfilter187 = CreateFilter(data, 3, "558-560", "", "TAA,TAG,TGA");
assert(data.species == codonfilter187.species, "species number mismatch");
assert(1 == codonfilter187.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter187");
UseModel(model187);
ExecuteCommands("Tree tree187 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree187, tree);
DataSetFilter codonfilter188 = CreateFilter(data, 3, "561-563", "", "TAA,TAG,TGA");
assert(data.species == codonfilter188.species, "species number mismatch");
assert(1 == codonfilter188.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter188");
UseModel(model188);
ExecuteCommands("Tree tree188 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree188, tree);
DataSetFilter codonfilter189 = CreateFilter(data, 3, "564-566", "", "TAA,TAG,TGA");
assert(data.species == codonfilter189.species, "species number mismatch");
assert(1 == codonfilter189.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter189");
UseModel(model189);
ExecuteCommands("Tree tree189 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree189, tree);
DataSetFilter codonfilter190 = CreateFilter(data, 3, "567-569", "", "TAA,TAG,TGA");
assert(data.species == codonfilter190.species, "species number mismatch");
assert(1 == codonfilter190.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter190");
UseModel(model190);
ExecuteCommands("Tree tree190 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree190, tree);
DataSetFilter codonfilter191 = CreateFilter(data, 3, "570-572", "", "TAA,TAG,TGA");
assert(data.species == codonfilter191.species, "species number mismatch");
assert(1 == codonfilter191.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter191");
UseModel(model191);
ExecuteCommands("Tree tree191 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree191, tree);
DataSetFilter codonfilter192 = CreateFilter(data, 3, "573-575", "", "TAA,TAG,TGA");
assert(data.species == codonfilter192.species, "species number mismatch");
assert(1 == codonfilter192.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter192");
UseModel(model192);
ExecuteCommands("Tree tree192 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree192, tree);
DataSetFilter codonfilter193 = CreateFilter(data, 3, "576-578", "", "TAA,TAG,TGA");
assert(data.species == codonfilter193.species, "species number mismatch");
assert(1 == codonfilter193.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter193");
UseModel(model193);
ExecuteCommands("Tree tree193 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree193, tree);
DataSetFilter codonfilter194 = CreateFilter(data, 3, "579-581", "", "TAA,TAG,TGA");
assert(data.species == codonfilter194.species, "species number mismatch");
assert(1 == codonfilter194.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter194");
UseModel(model194);
ExecuteCommands("Tree tree194 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree194, tree);
DataSetFilter codonfilter195 = CreateFilter(data, 3, "582-584", "", "TAA,TAG,TGA");
assert(data.species == codonfilter195.species, "species number mismatch");
assert(1 == codonfilter195.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter195");
UseModel(model195);
ExecuteCommands("Tree tree195 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree195, tree);
DataSetFilter codonfilter196 = CreateFilter(data, 3, "585-587", "", "TAA,TAG,TGA");
assert(data.species == codonfilter196.species, "species number mismatch");
assert(1 == codonfilter196.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter196");
UseModel(model196);
ExecuteCommands("Tree tree196 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree196, tree);
DataSetFilter codonfilter197 = CreateFilter(data, 3, "588-590", "", "TAA,TAG,TGA");
assert(data.species == codonfilter197.species, "species number mismatch");
assert(1 == codonfilter197.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter197");
UseModel(model197);
ExecuteCommands("Tree tree197 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree197, tree);
DataSetFilter codonfilter198 = CreateFilter(data, 3, "591-593", "", "TAA,TAG,TGA");
assert(data.species == codonfilter198.species, "species number mismatch");
assert(1 == codonfilter198.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter198");
UseModel(model198);
ExecuteCommands("Tree tree198 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree198, tree);
DataSetFilter codonfilter199 = CreateFilter(data, 3, "594-596", "", "TAA,TAG,TGA");
assert(data.species == codonfilter199.species, "species number mismatch");
assert(1 == codonfilter199.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter199");
UseModel(model199);
ExecuteCommands("Tree tree199 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree199, tree);
DataSetFilter codonfilter200 = CreateFilter(data, 3, "597-599", "", "TAA,TAG,TGA");
assert(data.species == codonfilter200.species, "species number mismatch");
assert(1 == codonfilter200.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter200");
UseModel(model200);
ExecuteCommands("Tree tree200 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree200, tree);
DataSetFilter codonfilter201 = CreateFilter(data, 3, "600-602", "", "TAA,TAG,TGA");
assert(data.species == codonfilter201.species, "species number mismatch");
assert(1 == codonfilter201.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter201");
UseModel(model201);
ExecuteCommands("Tree tree201 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree201, tree);
DataSetFilter codonfilter202 = CreateFilter(data, 3, "603-605", "", "TAA,TAG,TGA");
assert(data.species == codonfilter202.species, "species number mismatch");
assert(1 == codonfilter202.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter202");
UseModel(model202);
ExecuteCommands("Tree tree202 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree202, tree);
DataSetFilter codonfilter203 = CreateFilter(data, 3, "606-608", "", "TAA,TAG,TGA");
assert(data.species == codonfilter203.species, "species number mismatch");
assert(1 == codonfilter203.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter203");
UseModel(model203);
ExecuteCommands("Tree tree203 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree203, tree);
DataSetFilter codonfilter204 = CreateFilter(data, 3, "609-611", "", "TAA,TAG,TGA");
assert(data.species == codonfilter204.species, "species number mismatch");
assert(1 == codonfilter204.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter204");
UseModel(model204);
ExecuteCommands("Tree tree204 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree204, tree);
DataSetFilter codonfilter205 = CreateFilter(data, 3, "612-614", "", "TAA,TAG,TGA");
assert(data.species == codonfilter205.species, "species number mismatch");
assert(1 == codonfilter205.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter205");
UseModel(model205);
ExecuteCommands("Tree tree205 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree205, tree);
DataSetFilter codonfilter206 = CreateFilter(data, 3, "615-617", "", "TAA,TAG,TGA");
assert(data.species == codonfilter206.species, "species number mismatch");
assert(1 == codonfilter206.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter206");
UseModel(model206);
ExecuteCommands("Tree tree206 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree206, tree);
DataSetFilter codonfilter207 = CreateFilter(data, 3, "618-620", "", "TAA,TAG,TGA");
assert(data.species == codonfilter207.species, "species number mismatch");
assert(1 == codonfilter207.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter207");
UseModel(model207);
ExecuteCommands("Tree tree207 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree207, tree);
DataSetFilter codonfilter208 = CreateFilter(data, 3, "621-623", "", "TAA,TAG,TGA");
assert(data.species == codonfilter208.species, "species number mismatch");
assert(1 == codonfilter208.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter208");
UseModel(model208);
ExecuteCommands("Tree tree208 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree208, tree);
DataSetFilter codonfilter209 = CreateFilter(data, 3, "624-626", "", "TAA,TAG,TGA");
assert(data.species == codonfilter209.species, "species number mismatch");
assert(1 == codonfilter209.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter209");
UseModel(model209);
ExecuteCommands("Tree tree209 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree209, tree);
DataSetFilter codonfilter210 = CreateFilter(data, 3, "627-629", "", "TAA,TAG,TGA");
assert(data.species == codonfilter210.species, "species number mismatch");
assert(1 == codonfilter210.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter210");
UseModel(model210);
ExecuteCommands("Tree tree210 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree210, tree);
DataSetFilter codonfilter211 = CreateFilter(data, 3, "630-632", "", "TAA,TAG,TGA");
assert(data.species == codonfilter211.species, "species number mismatch");
assert(1 == codonfilter211.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter211");
UseModel(model211);
ExecuteCommands("Tree tree211 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree211, tree);
DataSetFilter codonfilter212 = CreateFilter(data, 3, "633-635", "", "TAA,TAG,TGA");
assert(data.species == codonfilter212.species, "species number mismatch");
assert(1 == codonfilter212.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter212");
UseModel(model212);
ExecuteCommands("Tree tree212 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree212, tree);
DataSetFilter codonfilter213 = CreateFilter(data, 3, "636-638", "", "TAA,TAG,TGA");
assert(data.species == codonfilter213.species, "species number mismatch");
assert(1 == codonfilter213.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter213");
UseModel(model213);
ExecuteCommands("Tree tree213 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree213, tree);
DataSetFilter codonfilter214 = CreateFilter(data, 3, "639-641", "", "TAA,TAG,TGA");
assert(data.species == codonfilter214.species, "species number mismatch");
assert(1 == codonfilter214.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter214");
UseModel(model214);
ExecuteCommands("Tree tree214 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree214, tree);
DataSetFilter codonfilter215 = CreateFilter(data, 3, "642-644", "", "TAA,TAG,TGA");
assert(data.species == codonfilter215.species, "species number mismatch");
assert(1 == codonfilter215.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter215");
UseModel(model215);
ExecuteCommands("Tree tree215 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree215, tree);
DataSetFilter codonfilter216 = CreateFilter(data, 3, "645-647", "", "TAA,TAG,TGA");
assert(data.species == codonfilter216.species, "species number mismatch");
assert(1 == codonfilter216.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter216");
UseModel(model216);
ExecuteCommands("Tree tree216 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree216, tree);
DataSetFilter codonfilter217 = CreateFilter(data, 3, "648-650", "", "TAA,TAG,TGA");
assert(data.species == codonfilter217.species, "species number mismatch");
assert(1 == codonfilter217.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter217");
UseModel(model217);
ExecuteCommands("Tree tree217 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree217, tree);
DataSetFilter codonfilter218 = CreateFilter(data, 3, "651-653", "", "TAA,TAG,TGA");
assert(data.species == codonfilter218.species, "species number mismatch");
assert(1 == codonfilter218.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter218");
UseModel(model218);
ExecuteCommands("Tree tree218 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree218, tree);
DataSetFilter codonfilter219 = CreateFilter(data, 3, "654-656", "", "TAA,TAG,TGA");
assert(data.species == codonfilter219.species, "species number mismatch");
assert(1 == codonfilter219.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter219");
UseModel(model219);
ExecuteCommands("Tree tree219 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree219, tree);
DataSetFilter codonfilter220 = CreateFilter(data, 3, "657-659", "", "TAA,TAG,TGA");
assert(data.species == codonfilter220.species, "species number mismatch");
assert(1 == codonfilter220.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter220");
UseModel(model220);
ExecuteCommands("Tree tree220 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree220, tree);
DataSetFilter codonfilter221 = CreateFilter(data, 3, "660-662", "", "TAA,TAG,TGA");
assert(data.species == codonfilter221.species, "species number mismatch");
assert(1 == codonfilter221.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter221");
UseModel(model221);
ExecuteCommands("Tree tree221 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree221, tree);
DataSetFilter codonfilter222 = CreateFilter(data, 3, "663-665", "", "TAA,TAG,TGA");
assert(data.species == codonfilter222.species, "species number mismatch");
assert(1 == codonfilter222.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter222");
UseModel(model222);
ExecuteCommands("Tree tree222 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree222, tree);
DataSetFilter codonfilter223 = CreateFilter(data, 3, "666-668", "", "TAA,TAG,TGA");
assert(data.species == codonfilter223.species, "species number mismatch");
assert(1 == codonfilter223.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter223");
UseModel(model223);
ExecuteCommands("Tree tree223 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree223, tree);
DataSetFilter codonfilter224 = CreateFilter(data, 3, "669-671", "", "TAA,TAG,TGA");
assert(data.species == codonfilter224.species, "species number mismatch");
assert(1 == codonfilter224.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter224");
UseModel(model224);
ExecuteCommands("Tree tree224 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree224, tree);
DataSetFilter codonfilter225 = CreateFilter(data, 3, "672-674", "", "TAA,TAG,TGA");
assert(data.species == codonfilter225.species, "species number mismatch");
assert(1 == codonfilter225.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter225");
UseModel(model225);
ExecuteCommands("Tree tree225 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree225, tree);
DataSetFilter codonfilter226 = CreateFilter(data, 3, "675-677", "", "TAA,TAG,TGA");
assert(data.species == codonfilter226.species, "species number mismatch");
assert(1 == codonfilter226.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter226");
UseModel(model226);
ExecuteCommands("Tree tree226 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree226, tree);
DataSetFilter codonfilter227 = CreateFilter(data, 3, "678-680", "", "TAA,TAG,TGA");
assert(data.species == codonfilter227.species, "species number mismatch");
assert(1 == codonfilter227.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter227");
UseModel(model227);
ExecuteCommands("Tree tree227 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree227, tree);
DataSetFilter codonfilter228 = CreateFilter(data, 3, "681-683", "", "TAA,TAG,TGA");
assert(data.species == codonfilter228.species, "species number mismatch");
assert(1 == codonfilter228.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter228");
UseModel(model228);
ExecuteCommands("Tree tree228 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree228, tree);
DataSetFilter codonfilter229 = CreateFilter(data, 3, "684-686", "", "TAA,TAG,TGA");
assert(data.species == codonfilter229.species, "species number mismatch");
assert(1 == codonfilter229.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter229");
UseModel(model229);
ExecuteCommands("Tree tree229 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree229, tree);
DataSetFilter codonfilter230 = CreateFilter(data, 3, "687-689", "", "TAA,TAG,TGA");
assert(data.species == codonfilter230.species, "species number mismatch");
assert(1 == codonfilter230.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter230");
UseModel(model230);
ExecuteCommands("Tree tree230 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree230, tree);
DataSetFilter codonfilter231 = CreateFilter(data, 3, "690-692", "", "TAA,TAG,TGA");
assert(data.species == codonfilter231.species, "species number mismatch");
assert(1 == codonfilter231.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter231");
UseModel(model231);
ExecuteCommands("Tree tree231 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree231, tree);
DataSetFilter codonfilter232 = CreateFilter(data, 3, "693-695", "", "TAA,TAG,TGA");
assert(data.species == codonfilter232.species, "species number mismatch");
assert(1 == codonfilter232.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter232");
UseModel(model232);
ExecuteCommands("Tree tree232 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree232, tree);
DataSetFilter codonfilter233 = CreateFilter(data, 3, "696-698", "", "TAA,TAG,TGA");
assert(data.species == codonfilter233.species, "species number mismatch");
assert(1 == codonfilter233.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter233");
UseModel(model233);
ExecuteCommands("Tree tree233 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree233, tree);
DataSetFilter codonfilter234 = CreateFilter(data, 3, "699-701", "", "TAA,TAG,TGA");
assert(data.species == codonfilter234.species, "species number mismatch");
assert(1 == codonfilter234.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter234");
UseModel(model234);
ExecuteCommands("Tree tree234 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree234, tree);
DataSetFilter codonfilter235 = CreateFilter(data, 3, "702-704", "", "TAA,TAG,TGA");
assert(data.species == codonfilter235.species, "species number mismatch");
assert(1 == codonfilter235.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter235");
UseModel(model235);
ExecuteCommands("Tree tree235 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree235, tree);
DataSetFilter codonfilter236 = CreateFilter(data, 3, "705-707", "", "TAA,TAG,TGA");
assert(data.species == codonfilter236.species, "species number mismatch");
assert(1 == codonfilter236.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter236");
UseModel(model236);
ExecuteCommands("Tree tree236 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree236, tree);
DataSetFilter codonfilter237 = CreateFilter(data, 3, "708-710", "", "TAA,TAG,TGA");
assert(data.species == codonfilter237.species, "species number mismatch");
assert(1 == codonfilter237.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter237");
UseModel(model237);
ExecuteCommands("Tree tree237 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree237, tree);
DataSetFilter codonfilter238 = CreateFilter(data, 3, "711-713", "", "TAA,TAG,TGA");
assert(data.species == codonfilter238.species, "species number mismatch");
assert(1 == codonfilter238.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter238");
UseModel(model238);
ExecuteCommands("Tree tree238 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree238, tree);
DataSetFilter codonfilter239 = CreateFilter(data, 3, "714-716", "", "TAA,TAG,TGA");
assert(data.species == codonfilter239.species, "species number mismatch");
assert(1 == codonfilter239.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter239");
UseModel(model239);
ExecuteCommands("Tree tree239 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree239, tree);
DataSetFilter codonfilter240 = CreateFilter(data, 3, "717-719", "", "TAA,TAG,TGA");
assert(data.species == codonfilter240.species, "species number mismatch");
assert(1 == codonfilter240.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter240");
UseModel(model240);
ExecuteCommands("Tree tree240 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree240, tree);
DataSetFilter codonfilter241 = CreateFilter(data, 3, "720-722", "", "TAA,TAG,TGA");
assert(data.species == codonfilter241.species, "species number mismatch");
assert(1 == codonfilter241.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter241");
UseModel(model241);
ExecuteCommands("Tree tree241 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree241, tree);
DataSetFilter codonfilter242 = CreateFilter(data, 3, "723-725", "", "TAA,TAG,TGA");
assert(data.species == codonfilter242.species, "species number mismatch");
assert(1 == codonfilter242.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter242");
UseModel(model242);
ExecuteCommands("Tree tree242 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree242, tree);
DataSetFilter codonfilter243 = CreateFilter(data, 3, "726-728", "", "TAA,TAG,TGA");
assert(data.species == codonfilter243.species, "species number mismatch");
assert(1 == codonfilter243.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter243");
UseModel(model243);
ExecuteCommands("Tree tree243 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree243, tree);
DataSetFilter codonfilter244 = CreateFilter(data, 3, "729-731", "", "TAA,TAG,TGA");
assert(data.species == codonfilter244.species, "species number mismatch");
assert(1 == codonfilter244.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter244");
UseModel(model244);
ExecuteCommands("Tree tree244 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree244, tree);
DataSetFilter codonfilter245 = CreateFilter(data, 3, "732-734", "", "TAA,TAG,TGA");
assert(data.species == codonfilter245.species, "species number mismatch");
assert(1 == codonfilter245.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter245");
UseModel(model245);
ExecuteCommands("Tree tree245 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree245, tree);
DataSetFilter codonfilter246 = CreateFilter(data, 3, "735-737", "", "TAA,TAG,TGA");
assert(data.species == codonfilter246.species, "species number mismatch");
assert(1 == codonfilter246.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter246");
UseModel(model246);
ExecuteCommands("Tree tree246 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree246, tree);
DataSetFilter codonfilter247 = CreateFilter(data, 3, "738-740", "", "TAA,TAG,TGA");
assert(data.species == codonfilter247.species, "species number mismatch");
assert(1 == codonfilter247.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter247");
UseModel(model247);
ExecuteCommands("Tree tree247 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree247, tree);
DataSetFilter codonfilter248 = CreateFilter(data, 3, "741-743", "", "TAA,TAG,TGA");
assert(data.species == codonfilter248.species, "species number mismatch");
assert(1 == codonfilter248.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter248");
UseModel(model248);
ExecuteCommands("Tree tree248 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree248, tree);
DataSetFilter codonfilter249 = CreateFilter(data, 3, "744-746", "", "TAA,TAG,TGA");
assert(data.species == codonfilter249.species, "species number mismatch");
assert(1 == codonfilter249.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter249");
UseModel(model249);
ExecuteCommands("Tree tree249 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree249, tree);
DataSetFilter codonfilter250 = CreateFilter(data, 3, "747-749", "", "TAA,TAG,TGA");
assert(data.species == codonfilter250.species, "species number mismatch");
assert(1 == codonfilter250.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter250");
UseModel(model250);
ExecuteCommands("Tree tree250 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree250, tree);
DataSetFilter codonfilter251 = CreateFilter(data, 3, "750-752", "", "TAA,TAG,TGA");
assert(data.species == codonfilter251.species, "species number mismatch");
assert(1 == codonfilter251.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter251");
UseModel(model251);
ExecuteCommands("Tree tree251 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree251, tree);
DataSetFilter codonfilter252 = CreateFilter(data, 3, "753-755", "", "TAA,TAG,TGA");
assert(data.species == codonfilter252.species, "species number mismatch");
assert(1 == codonfilter252.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter252");
UseModel(model252);
ExecuteCommands("Tree tree252 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree252, tree);
DataSetFilter codonfilter253 = CreateFilter(data, 3, "756-758", "", "TAA,TAG,TGA");
assert(data.species == codonfilter253.species, "species number mismatch");
assert(1 == codonfilter253.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter253");
UseModel(model253);
ExecuteCommands("Tree tree253 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree253, tree);
DataSetFilter codonfilter254 = CreateFilter(data, 3, "759-761", "", "TAA,TAG,TGA");
assert(data.species == codonfilter254.species, "species number mismatch");
assert(1 == codonfilter254.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter254");
UseModel(model254);
ExecuteCommands("Tree tree254 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree254, tree);
DataSetFilter codonfilter255 = CreateFilter(data, 3, "762-764", "", "TAA,TAG,TGA");
assert(data.species == codonfilter255.species, "species number mismatch");
assert(1 == codonfilter255.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter255");
UseModel(model255);
ExecuteCommands("Tree tree255 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree255, tree);
DataSetFilter codonfilter256 = CreateFilter(data, 3, "765-767", "", "TAA,TAG,TGA");
assert(data.species == codonfilter256.species, "species number mismatch");
assert(1 == codonfilter256.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter256");
UseModel(model256);
ExecuteCommands("Tree tree256 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree256, tree);
DataSetFilter codonfilter257 = CreateFilter(data, 3, "768-770", "", "TAA,TAG,TGA");
assert(data.species == codonfilter257.species, "species number mismatch");
assert(1 == codonfilter257.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter257");
UseModel(model257);
ExecuteCommands("Tree tree257 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree257, tree);
DataSetFilter codonfilter258 = CreateFilter(data, 3, "771-773", "", "TAA,TAG,TGA");
assert(data.species == codonfilter258.species, "species number mismatch");
assert(1 == codonfilter258.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter258");
UseModel(model258);
ExecuteCommands("Tree tree258 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree258, tree);
DataSetFilter codonfilter259 = CreateFilter(data, 3, "774-776", "", "TAA,TAG,TGA");
assert(data.species == codonfilter259.species, "species number mismatch");
assert(1 == codonfilter259.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter259");
UseModel(model259);
ExecuteCommands("Tree tree259 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree259, tree);
DataSetFilter codonfilter260 = CreateFilter(data, 3, "777-779", "", "TAA,TAG,TGA");
assert(data.species == codonfilter260.species, "species number mismatch");
assert(1 == codonfilter260.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter260");
UseModel(model260);
ExecuteCommands("Tree tree260 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree260, tree);
DataSetFilter codonfilter261 = CreateFilter(data, 3, "780-782", "", "TAA,TAG,TGA");
assert(data.species == codonfilter261.species, "species number mismatch");
assert(1 == codonfilter261.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter261");
UseModel(model261);
ExecuteCommands("Tree tree261 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree261, tree);
DataSetFilter codonfilter262 = CreateFilter(data, 3, "783-785", "", "TAA,TAG,TGA");
assert(data.species == codonfilter262.species, "species number mismatch");
assert(1 == codonfilter262.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter262");
UseModel(model262);
ExecuteCommands("Tree tree262 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree262, tree);
DataSetFilter codonfilter263 = CreateFilter(data, 3, "786-788", "", "TAA,TAG,TGA");
assert(data.species == codonfilter263.species, "species number mismatch");
assert(1 == codonfilter263.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter263");
UseModel(model263);
ExecuteCommands("Tree tree263 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree263, tree);
DataSetFilter codonfilter264 = CreateFilter(data, 3, "789-791", "", "TAA,TAG,TGA");
assert(data.species == codonfilter264.species, "species number mismatch");
assert(1 == codonfilter264.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter264");
UseModel(model264);
ExecuteCommands("Tree tree264 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree264, tree);
DataSetFilter codonfilter265 = CreateFilter(data, 3, "792-794", "", "TAA,TAG,TGA");
assert(data.species == codonfilter265.species, "species number mismatch");
assert(1 == codonfilter265.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter265");
UseModel(model265);
ExecuteCommands("Tree tree265 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree265, tree);
DataSetFilter codonfilter266 = CreateFilter(data, 3, "795-797", "", "TAA,TAG,TGA");
assert(data.species == codonfilter266.species, "species number mismatch");
assert(1 == codonfilter266.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter266");
UseModel(model266);
ExecuteCommands("Tree tree266 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree266, tree);
DataSetFilter codonfilter267 = CreateFilter(data, 3, "798-800", "", "TAA,TAG,TGA");
assert(data.species == codonfilter267.species, "species number mismatch");
assert(1 == codonfilter267.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter267");
UseModel(model267);
ExecuteCommands("Tree tree267 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree267, tree);
DataSetFilter codonfilter268 = CreateFilter(data, 3, "801-803", "", "TAA,TAG,TGA");
assert(data.species == codonfilter268.species, "species number mismatch");
assert(1 == codonfilter268.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter268");
UseModel(model268);
ExecuteCommands("Tree tree268 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree268, tree);
DataSetFilter codonfilter269 = CreateFilter(data, 3, "804-806", "", "TAA,TAG,TGA");
assert(data.species == codonfilter269.species, "species number mismatch");
assert(1 == codonfilter269.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter269");
UseModel(model269);
ExecuteCommands("Tree tree269 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree269, tree);
DataSetFilter codonfilter270 = CreateFilter(data, 3, "807-809", "", "TAA,TAG,TGA");
assert(data.species == codonfilter270.species, "species number mismatch");
assert(1 == codonfilter270.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter270");
UseModel(model270);
ExecuteCommands("Tree tree270 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree270, tree);
DataSetFilter codonfilter271 = CreateFilter(data, 3, "810-812", "", "TAA,TAG,TGA");
assert(data.species == codonfilter271.species, "species number mismatch");
assert(1 == codonfilter271.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter271");
UseModel(model271);
ExecuteCommands("Tree tree271 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree271, tree);
DataSetFilter codonfilter272 = CreateFilter(data, 3, "813-815", "", "TAA,TAG,TGA");
assert(data.species == codonfilter272.species, "species number mismatch");
assert(1 == codonfilter272.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter272");
UseModel(model272);
ExecuteCommands("Tree tree272 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree272, tree);
DataSetFilter codonfilter273 = CreateFilter(data, 3, "816-818", "", "TAA,TAG,TGA");
assert(data.species == codonfilter273.species, "species number mismatch");
assert(1 == codonfilter273.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter273");
UseModel(model273);
ExecuteCommands("Tree tree273 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree273, tree);
DataSetFilter codonfilter274 = CreateFilter(data, 3, "819-821", "", "TAA,TAG,TGA");
assert(data.species == codonfilter274.species, "species number mismatch");
assert(1 == codonfilter274.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter274");
UseModel(model274);
ExecuteCommands("Tree tree274 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree274, tree);
DataSetFilter codonfilter275 = CreateFilter(data, 3, "822-824", "", "TAA,TAG,TGA");
assert(data.species == codonfilter275.species, "species number mismatch");
assert(1 == codonfilter275.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter275");
UseModel(model275);
ExecuteCommands("Tree tree275 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree275, tree);
DataSetFilter codonfilter276 = CreateFilter(data, 3, "825-827", "", "TAA,TAG,TGA");
assert(data.species == codonfilter276.species, "species number mismatch");
assert(1 == codonfilter276.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter276");
UseModel(model276);
ExecuteCommands("Tree tree276 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree276, tree);
DataSetFilter codonfilter277 = CreateFilter(data, 3, "828-830", "", "TAA,TAG,TGA");
assert(data.species == codonfilter277.species, "species number mismatch");
assert(1 == codonfilter277.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter277");
UseModel(model277);
ExecuteCommands("Tree tree277 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree277, tree);
DataSetFilter codonfilter278 = CreateFilter(data, 3, "831-833", "", "TAA,TAG,TGA");
assert(data.species == codonfilter278.species, "species number mismatch");
assert(1 == codonfilter278.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter278");
UseModel(model278);
ExecuteCommands("Tree tree278 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree278, tree);
DataSetFilter codonfilter279 = CreateFilter(data, 3, "834-836", "", "TAA,TAG,TGA");
assert(data.species == codonfilter279.species, "species number mismatch");
assert(1 == codonfilter279.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter279");
UseModel(model279);
ExecuteCommands("Tree tree279 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree279, tree);
DataSetFilter codonfilter280 = CreateFilter(data, 3, "837-839", "", "TAA,TAG,TGA");
assert(data.species == codonfilter280.species, "species number mismatch");
assert(1 == codonfilter280.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter280");
UseModel(model280);
ExecuteCommands("Tree tree280 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree280, tree);
DataSetFilter codonfilter281 = CreateFilter(data, 3, "840-842", "", "TAA,TAG,TGA");
assert(data.species == codonfilter281.species, "species number mismatch");
assert(1 == codonfilter281.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter281");
UseModel(model281);
ExecuteCommands("Tree tree281 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree281, tree);
DataSetFilter codonfilter282 = CreateFilter(data, 3, "843-845", "", "TAA,TAG,TGA");
assert(data.species == codonfilter282.species, "species number mismatch");
assert(1 == codonfilter282.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter282");
UseModel(model282);
ExecuteCommands("Tree tree282 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree282, tree);
DataSetFilter codonfilter283 = CreateFilter(data, 3, "846-848", "", "TAA,TAG,TGA");
assert(data.species == codonfilter283.species, "species number mismatch");
assert(1 == codonfilter283.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter283");
UseModel(model283);
ExecuteCommands("Tree tree283 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree283, tree);
DataSetFilter codonfilter284 = CreateFilter(data, 3, "849-851", "", "TAA,TAG,TGA");
assert(data.species == codonfilter284.species, "species number mismatch");
assert(1 == codonfilter284.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter284");
UseModel(model284);
ExecuteCommands("Tree tree284 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree284, tree);
DataSetFilter codonfilter285 = CreateFilter(data, 3, "852-854", "", "TAA,TAG,TGA");
assert(data.species == codonfilter285.species, "species number mismatch");
assert(1 == codonfilter285.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter285");
UseModel(model285);
ExecuteCommands("Tree tree285 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree285, tree);
DataSetFilter codonfilter286 = CreateFilter(data, 3, "855-857", "", "TAA,TAG,TGA");
assert(data.species == codonfilter286.species, "species number mismatch");
assert(1 == codonfilter286.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter286");
UseModel(model286);
ExecuteCommands("Tree tree286 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree286, tree);
DataSetFilter codonfilter287 = CreateFilter(data, 3, "858-860", "", "TAA,TAG,TGA");
assert(data.species == codonfilter287.species, "species number mismatch");
assert(1 == codonfilter287.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter287");
UseModel(model287);
ExecuteCommands("Tree tree287 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree287, tree);
DataSetFilter codonfilter288 = CreateFilter(data, 3, "861-863", "", "TAA,TAG,TGA");
assert(data.species == codonfilter288.species, "species number mismatch");
assert(1 == codonfilter288.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter288");
UseModel(model288);
ExecuteCommands("Tree tree288 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree288, tree);
DataSetFilter codonfilter289 = CreateFilter(data, 3, "864-866", "", "TAA,TAG,TGA");
assert(data.species == codonfilter289.species, "species number mismatch");
assert(1 == codonfilter289.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter289");
UseModel(model289);
ExecuteCommands("Tree tree289 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree289, tree);
DataSetFilter codonfilter290 = CreateFilter(data, 3, "867-869", "", "TAA,TAG,TGA");
assert(data.species == codonfilter290.species, "species number mismatch");
assert(1 == codonfilter290.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter290");
UseModel(model290);
ExecuteCommands("Tree tree290 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree290, tree);
DataSetFilter codonfilter291 = CreateFilter(data, 3, "870-872", "", "TAA,TAG,TGA");
assert(data.species == codonfilter291.species, "species number mismatch");
assert(1 == codonfilter291.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter291");
UseModel(model291);
ExecuteCommands("Tree tree291 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree291, tree);
DataSetFilter codonfilter292 = CreateFilter(data, 3, "873-875", "", "TAA,TAG,TGA");
assert(data.species == codonfilter292.species, "species number mismatch");
assert(1 == codonfilter292.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter292");
UseModel(model292);
ExecuteCommands("Tree tree292 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree292, tree);
DataSetFilter codonfilter293 = CreateFilter(data, 3, "876-878", "", "TAA,TAG,TGA");
assert(data.species == codonfilter293.species, "species number mismatch");
assert(1 == codonfilter293.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter293");
UseModel(model293);
ExecuteCommands("Tree tree293 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree293, tree);
DataSetFilter codonfilter294 = CreateFilter(data, 3, "879-881", "", "TAA,TAG,TGA");
assert(data.species == codonfilter294.species, "species number mismatch");
assert(1 == codonfilter294.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter294");
UseModel(model294);
ExecuteCommands("Tree tree294 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree294, tree);
DataSetFilter codonfilter295 = CreateFilter(data, 3, "882-884", "", "TAA,TAG,TGA");
assert(data.species == codonfilter295.species, "species number mismatch");
assert(1 == codonfilter295.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter295");
UseModel(model295);
ExecuteCommands("Tree tree295 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree295, tree);
DataSetFilter codonfilter296 = CreateFilter(data, 3, "885-887", "", "TAA,TAG,TGA");
assert(data.species == codonfilter296.species, "species number mismatch");
assert(1 == codonfilter296.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter296");
UseModel(model296);
ExecuteCommands("Tree tree296 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree296, tree);
DataSetFilter codonfilter297 = CreateFilter(data, 3, "888-890", "", "TAA,TAG,TGA");
assert(data.species == codonfilter297.species, "species number mismatch");
assert(1 == codonfilter297.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter297");
UseModel(model297);
ExecuteCommands("Tree tree297 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree297, tree);
DataSetFilter codonfilter298 = CreateFilter(data, 3, "891-893", "", "TAA,TAG,TGA");
assert(data.species == codonfilter298.species, "species number mismatch");
assert(1 == codonfilter298.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter298");
UseModel(model298);
ExecuteCommands("Tree tree298 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree298, tree);
DataSetFilter codonfilter299 = CreateFilter(data, 3, "894-896", "", "TAA,TAG,TGA");
assert(data.species == codonfilter299.species, "species number mismatch");
assert(1 == codonfilter299.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter299");
UseModel(model299);
ExecuteCommands("Tree tree299 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree299, tree);
DataSetFilter codonfilter300 = CreateFilter(data, 3, "897-899", "", "TAA,TAG,TGA");
assert(data.species == codonfilter300.species, "species number mismatch");
assert(1 == codonfilter300.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter300");
UseModel(model300);
ExecuteCommands("Tree tree300 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree300, tree);
DataSetFilter codonfilter301 = CreateFilter(data, 3, "900-902", "", "TAA,TAG,TGA");
assert(data.species == codonfilter301.species, "species number mismatch");
assert(1 == codonfilter301.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter301");
UseModel(model301);
ExecuteCommands("Tree tree301 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree301, tree);
DataSetFilter codonfilter302 = CreateFilter(data, 3, "903-905", "", "TAA,TAG,TGA");
assert(data.species == codonfilter302.species, "species number mismatch");
assert(1 == codonfilter302.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter302");
UseModel(model302);
ExecuteCommands("Tree tree302 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree302, tree);
DataSetFilter codonfilter303 = CreateFilter(data, 3, "906-908", "", "TAA,TAG,TGA");
assert(data.species == codonfilter303.species, "species number mismatch");
assert(1 == codonfilter303.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter303");
UseModel(model303);
ExecuteCommands("Tree tree303 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree303, tree);
DataSetFilter codonfilter304 = CreateFilter(data, 3, "909-911", "", "TAA,TAG,TGA");
assert(data.species == codonfilter304.species, "species number mismatch");
assert(1 == codonfilter304.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter304");
UseModel(model304);
ExecuteCommands("Tree tree304 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree304, tree);
DataSetFilter codonfilter305 = CreateFilter(data, 3, "912-914", "", "TAA,TAG,TGA");
assert(data.species == codonfilter305.species, "species number mismatch");
assert(1 == codonfilter305.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter305");
UseModel(model305);
ExecuteCommands("Tree tree305 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree305, tree);
DataSetFilter codonfilter306 = CreateFilter(data, 3, "915-917", "", "TAA,TAG,TGA");
assert(data.species == codonfilter306.species, "species number mismatch");
assert(1 == codonfilter306.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter306");
UseModel(model306);
ExecuteCommands("Tree tree306 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree306, tree);
DataSetFilter codonfilter307 = CreateFilter(data, 3, "918-920", "", "TAA,TAG,TGA");
assert(data.species == codonfilter307.species, "species number mismatch");
assert(1 == codonfilter307.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter307");
UseModel(model307);
ExecuteCommands("Tree tree307 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree307, tree);
DataSetFilter codonfilter308 = CreateFilter(data, 3, "921-923", "", "TAA,TAG,TGA");
assert(data.species == codonfilter308.species, "species number mismatch");
assert(1 == codonfilter308.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter308");
UseModel(model308);
ExecuteCommands("Tree tree308 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree308, tree);
DataSetFilter codonfilter309 = CreateFilter(data, 3, "924-926", "", "TAA,TAG,TGA");
assert(data.species == codonfilter309.species, "species number mismatch");
assert(1 == codonfilter309.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter309");
UseModel(model309);
ExecuteCommands("Tree tree309 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree309, tree);
DataSetFilter codonfilter310 = CreateFilter(data, 3, "927-929", "", "TAA,TAG,TGA");
assert(data.species == codonfilter310.species, "species number mismatch");
assert(1 == codonfilter310.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter310");
UseModel(model310);
ExecuteCommands("Tree tree310 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree310, tree);
DataSetFilter codonfilter311 = CreateFilter(data, 3, "930-932", "", "TAA,TAG,TGA");
assert(data.species == codonfilter311.species, "species number mismatch");
assert(1 == codonfilter311.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter311");
UseModel(model311);
ExecuteCommands("Tree tree311 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree311, tree);
DataSetFilter codonfilter312 = CreateFilter(data, 3, "933-935", "", "TAA,TAG,TGA");
assert(data.species == codonfilter312.species, "species number mismatch");
assert(1 == codonfilter312.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter312");
UseModel(model312);
ExecuteCommands("Tree tree312 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree312, tree);
DataSetFilter codonfilter313 = CreateFilter(data, 3, "936-938", "", "TAA,TAG,TGA");
assert(data.species == codonfilter313.species, "species number mismatch");
assert(1 == codonfilter313.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter313");
UseModel(model313);
ExecuteCommands("Tree tree313 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree313, tree);
DataSetFilter codonfilter314 = CreateFilter(data, 3, "939-941", "", "TAA,TAG,TGA");
assert(data.species == codonfilter314.species, "species number mismatch");
assert(1 == codonfilter314.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter314");
UseModel(model314);
ExecuteCommands("Tree tree314 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree314, tree);
DataSetFilter codonfilter315 = CreateFilter(data, 3, "942-944", "", "TAA,TAG,TGA");
assert(data.species == codonfilter315.species, "species number mismatch");
assert(1 == codonfilter315.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter315");
UseModel(model315);
ExecuteCommands("Tree tree315 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree315, tree);
DataSetFilter codonfilter316 = CreateFilter(data, 3, "945-947", "", "TAA,TAG,TGA");
assert(data.species == codonfilter316.species, "species number mismatch");
assert(1 == codonfilter316.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter316");
UseModel(model316);
ExecuteCommands("Tree tree316 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree316, tree);
DataSetFilter codonfilter317 = CreateFilter(data, 3, "948-950", "", "TAA,TAG,TGA");
assert(data.species == codonfilter317.species, "species number mismatch");
assert(1 == codonfilter317.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter317");
UseModel(model317);
ExecuteCommands("Tree tree317 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree317, tree);
DataSetFilter codonfilter318 = CreateFilter(data, 3, "951-953", "", "TAA,TAG,TGA");
assert(data.species == codonfilter318.species, "species number mismatch");
assert(1 == codonfilter318.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter318");
UseModel(model318);
ExecuteCommands("Tree tree318 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree318, tree);
DataSetFilter codonfilter319 = CreateFilter(data, 3, "954-956", "", "TAA,TAG,TGA");
assert(data.species == codonfilter319.species, "species number mismatch");
assert(1 == codonfilter319.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter319");
UseModel(model319);
ExecuteCommands("Tree tree319 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree319, tree);
DataSetFilter codonfilter320 = CreateFilter(data, 3, "957-959", "", "TAA,TAG,TGA");
assert(data.species == codonfilter320.species, "species number mismatch");
assert(1 == codonfilter320.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter320");
UseModel(model320);
ExecuteCommands("Tree tree320 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree320, tree);
DataSetFilter codonfilter321 = CreateFilter(data, 3, "960-962", "", "TAA,TAG,TGA");
assert(data.species == codonfilter321.species, "species number mismatch");
assert(1 == codonfilter321.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter321");
UseModel(model321);
ExecuteCommands("Tree tree321 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree321, tree);
DataSetFilter codonfilter322 = CreateFilter(data, 3, "963-965", "", "TAA,TAG,TGA");
assert(data.species == codonfilter322.species, "species number mismatch");
assert(1 == codonfilter322.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter322");
UseModel(model322);
ExecuteCommands("Tree tree322 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree322, tree);
DataSetFilter codonfilter323 = CreateFilter(data, 3, "966-968", "", "TAA,TAG,TGA");
assert(data.species == codonfilter323.species, "species number mismatch");
assert(1 == codonfilter323.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter323");
UseModel(model323);
ExecuteCommands("Tree tree323 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree323, tree);
DataSetFilter codonfilter324 = CreateFilter(data, 3, "969-971", "", "TAA,TAG,TGA");
assert(data.species == codonfilter324.species, "species number mismatch");
assert(1 == codonfilter324.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter324");
UseModel(model324);
ExecuteCommands("Tree tree324 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree324, tree);
DataSetFilter codonfilter325 = CreateFilter(data, 3, "972-974", "", "TAA,TAG,TGA");
assert(data.species == codonfilter325.species, "species number mismatch");
assert(1 == codonfilter325.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter325");
UseModel(model325);
ExecuteCommands("Tree tree325 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree325, tree);
DataSetFilter codonfilter326 = CreateFilter(data, 3, "975-977", "", "TAA,TAG,TGA");
assert(data.species == codonfilter326.species, "species number mismatch");
assert(1 == codonfilter326.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter326");
UseModel(model326);
ExecuteCommands("Tree tree326 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree326, tree);
DataSetFilter codonfilter327 = CreateFilter(data, 3, "978-980", "", "TAA,TAG,TGA");
assert(data.species == codonfilter327.species, "species number mismatch");
assert(1 == codonfilter327.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter327");
UseModel(model327);
ExecuteCommands("Tree tree327 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree327, tree);
DataSetFilter codonfilter328 = CreateFilter(data, 3, "981-983", "", "TAA,TAG,TGA");
assert(data.species == codonfilter328.species, "species number mismatch");
assert(1 == codonfilter328.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter328");
UseModel(model328);
ExecuteCommands("Tree tree328 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree328, tree);
DataSetFilter codonfilter329 = CreateFilter(data, 3, "984-986", "", "TAA,TAG,TGA");
assert(data.species == codonfilter329.species, "species number mismatch");
assert(1 == codonfilter329.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter329");
UseModel(model329);
ExecuteCommands("Tree tree329 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree329, tree);
DataSetFilter codonfilter330 = CreateFilter(data, 3, "987-989", "", "TAA,TAG,TGA");
assert(data.species == codonfilter330.species, "species number mismatch");
assert(1 == codonfilter330.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter330");
UseModel(model330);
ExecuteCommands("Tree tree330 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree330, tree);
DataSetFilter codonfilter331 = CreateFilter(data, 3, "990-992", "", "TAA,TAG,TGA");
assert(data.species == codonfilter331.species, "species number mismatch");
assert(1 == codonfilter331.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter331");
UseModel(model331);
ExecuteCommands("Tree tree331 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree331, tree);
DataSetFilter codonfilter332 = CreateFilter(data, 3, "993-995", "", "TAA,TAG,TGA");
assert(data.species == codonfilter332.species, "species number mismatch");
assert(1 == codonfilter332.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter332");
UseModel(model332);
ExecuteCommands("Tree tree332 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree332, tree);
DataSetFilter codonfilter333 = CreateFilter(data, 3, "996-998", "", "TAA,TAG,TGA");
assert(data.species == codonfilter333.species, "species number mismatch");
assert(1 == codonfilter333.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter333");
UseModel(model333);
ExecuteCommands("Tree tree333 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree333, tree);
DataSetFilter codonfilter334 = CreateFilter(data, 3, "999-1001", "", "TAA,TAG,TGA");
assert(data.species == codonfilter334.species, "species number mismatch");
assert(1 == codonfilter334.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter334");
UseModel(model334);
ExecuteCommands("Tree tree334 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree334, tree);
DataSetFilter codonfilter335 = CreateFilter(data, 3, "1002-1004", "", "TAA,TAG,TGA");
assert(data.species == codonfilter335.species, "species number mismatch");
assert(1 == codonfilter335.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter335");
UseModel(model335);
ExecuteCommands("Tree tree335 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree335, tree);
DataSetFilter codonfilter336 = CreateFilter(data, 3, "1005-1007", "", "TAA,TAG,TGA");
assert(data.species == codonfilter336.species, "species number mismatch");
assert(1 == codonfilter336.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter336");
UseModel(model336);
ExecuteCommands("Tree tree336 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree336, tree);
DataSetFilter codonfilter337 = CreateFilter(data, 3, "1008-1010", "", "TAA,TAG,TGA");
assert(data.species == codonfilter337.species, "species number mismatch");
assert(1 == codonfilter337.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter337");
UseModel(model337);
ExecuteCommands("Tree tree337 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree337, tree);
DataSetFilter codonfilter338 = CreateFilter(data, 3, "1011-1013", "", "TAA,TAG,TGA");
assert(data.species == codonfilter338.species, "species number mismatch");
assert(1 == codonfilter338.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter338");
UseModel(model338);
ExecuteCommands("Tree tree338 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree338, tree);
DataSetFilter codonfilter339 = CreateFilter(data, 3, "1014-1016", "", "TAA,TAG,TGA");
assert(data.species == codonfilter339.species, "species number mismatch");
assert(1 == codonfilter339.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter339");
UseModel(model339);
ExecuteCommands("Tree tree339 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree339, tree);
DataSetFilter codonfilter340 = CreateFilter(data, 3, "1017-1019", "", "TAA,TAG,TGA");
assert(data.species == codonfilter340.species, "species number mismatch");
assert(1 == codonfilter340.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter340");
UseModel(model340);
ExecuteCommands("Tree tree340 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree340, tree);
DataSetFilter codonfilter341 = CreateFilter(data, 3, "1020-1022", "", "TAA,TAG,TGA");
assert(data.species == codonfilter341.species, "species number mismatch");
assert(1 == codonfilter341.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter341");
UseModel(model341);
ExecuteCommands("Tree tree341 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree341, tree);
DataSetFilter codonfilter342 = CreateFilter(data, 3, "1023-1025", "", "TAA,TAG,TGA");
assert(data.species == codonfilter342.species, "species number mismatch");
assert(1 == codonfilter342.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter342");
UseModel(model342);
ExecuteCommands("Tree tree342 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree342, tree);
DataSetFilter codonfilter343 = CreateFilter(data, 3, "1026-1028", "", "TAA,TAG,TGA");
assert(data.species == codonfilter343.species, "species number mismatch");
assert(1 == codonfilter343.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter343");
UseModel(model343);
ExecuteCommands("Tree tree343 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree343, tree);
DataSetFilter codonfilter344 = CreateFilter(data, 3, "1029-1031", "", "TAA,TAG,TGA");
assert(data.species == codonfilter344.species, "species number mismatch");
assert(1 == codonfilter344.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter344");
UseModel(model344);
ExecuteCommands("Tree tree344 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree344, tree);
DataSetFilter codonfilter345 = CreateFilter(data, 3, "1032-1034", "", "TAA,TAG,TGA");
assert(data.species == codonfilter345.species, "species number mismatch");
assert(1 == codonfilter345.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter345");
UseModel(model345);
ExecuteCommands("Tree tree345 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree345, tree);
DataSetFilter codonfilter346 = CreateFilter(data, 3, "1035-1037", "", "TAA,TAG,TGA");
assert(data.species == codonfilter346.species, "species number mismatch");
assert(1 == codonfilter346.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter346");
UseModel(model346);
ExecuteCommands("Tree tree346 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree346, tree);
DataSetFilter codonfilter347 = CreateFilter(data, 3, "1038-1040", "", "TAA,TAG,TGA");
assert(data.species == codonfilter347.species, "species number mismatch");
assert(1 == codonfilter347.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter347");
UseModel(model347);
ExecuteCommands("Tree tree347 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree347, tree);
DataSetFilter codonfilter348 = CreateFilter(data, 3, "1041-1043", "", "TAA,TAG,TGA");
assert(data.species == codonfilter348.species, "species number mismatch");
assert(1 == codonfilter348.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter348");
UseModel(model348);
ExecuteCommands("Tree tree348 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree348, tree);
DataSetFilter codonfilter349 = CreateFilter(data, 3, "1044-1046", "", "TAA,TAG,TGA");
assert(data.species == codonfilter349.species, "species number mismatch");
assert(1 == codonfilter349.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter349");
UseModel(model349);
ExecuteCommands("Tree tree349 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree349, tree);
DataSetFilter codonfilter350 = CreateFilter(data, 3, "1047-1049", "", "TAA,TAG,TGA");
assert(data.species == codonfilter350.species, "species number mismatch");
assert(1 == codonfilter350.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter350");
UseModel(model350);
ExecuteCommands("Tree tree350 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree350, tree);
DataSetFilter codonfilter351 = CreateFilter(data, 3, "1050-1052", "", "TAA,TAG,TGA");
assert(data.species == codonfilter351.species, "species number mismatch");
assert(1 == codonfilter351.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter351");
UseModel(model351);
ExecuteCommands("Tree tree351 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree351, tree);
DataSetFilter codonfilter352 = CreateFilter(data, 3, "1053-1055", "", "TAA,TAG,TGA");
assert(data.species == codonfilter352.species, "species number mismatch");
assert(1 == codonfilter352.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter352");
UseModel(model352);
ExecuteCommands("Tree tree352 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree352, tree);
DataSetFilter codonfilter353 = CreateFilter(data, 3, "1056-1058", "", "TAA,TAG,TGA");
assert(data.species == codonfilter353.species, "species number mismatch");
assert(1 == codonfilter353.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter353");
UseModel(model353);
ExecuteCommands("Tree tree353 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree353, tree);
DataSetFilter codonfilter354 = CreateFilter(data, 3, "1059-1061", "", "TAA,TAG,TGA");
assert(data.species == codonfilter354.species, "species number mismatch");
assert(1 == codonfilter354.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter354");
UseModel(model354);
ExecuteCommands("Tree tree354 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree354, tree);
DataSetFilter codonfilter355 = CreateFilter(data, 3, "1062-1064", "", "TAA,TAG,TGA");
assert(data.species == codonfilter355.species, "species number mismatch");
assert(1 == codonfilter355.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter355");
UseModel(model355);
ExecuteCommands("Tree tree355 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree355, tree);
DataSetFilter codonfilter356 = CreateFilter(data, 3, "1065-1067", "", "TAA,TAG,TGA");
assert(data.species == codonfilter356.species, "species number mismatch");
assert(1 == codonfilter356.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter356");
UseModel(model356);
ExecuteCommands("Tree tree356 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree356, tree);
DataSetFilter codonfilter357 = CreateFilter(data, 3, "1068-1070", "", "TAA,TAG,TGA");
assert(data.species == codonfilter357.species, "species number mismatch");
assert(1 == codonfilter357.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter357");
UseModel(model357);
ExecuteCommands("Tree tree357 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree357, tree);
DataSetFilter codonfilter358 = CreateFilter(data, 3, "1071-1073", "", "TAA,TAG,TGA");
assert(data.species == codonfilter358.species, "species number mismatch");
assert(1 == codonfilter358.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter358");
UseModel(model358);
ExecuteCommands("Tree tree358 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree358, tree);
DataSetFilter codonfilter359 = CreateFilter(data, 3, "1074-1076", "", "TAA,TAG,TGA");
assert(data.species == codonfilter359.species, "species number mismatch");
assert(1 == codonfilter359.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter359");
UseModel(model359);
ExecuteCommands("Tree tree359 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree359, tree);
DataSetFilter codonfilter360 = CreateFilter(data, 3, "1077-1079", "", "TAA,TAG,TGA");
assert(data.species == codonfilter360.species, "species number mismatch");
assert(1 == codonfilter360.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter360");
UseModel(model360);
ExecuteCommands("Tree tree360 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree360, tree);
DataSetFilter codonfilter361 = CreateFilter(data, 3, "1080-1082", "", "TAA,TAG,TGA");
assert(data.species == codonfilter361.species, "species number mismatch");
assert(1 == codonfilter361.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter361");
UseModel(model361);
ExecuteCommands("Tree tree361 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree361, tree);
DataSetFilter codonfilter362 = CreateFilter(data, 3, "1083-1085", "", "TAA,TAG,TGA");
assert(data.species == codonfilter362.species, "species number mismatch");
assert(1 == codonfilter362.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter362");
UseModel(model362);
ExecuteCommands("Tree tree362 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree362, tree);
DataSetFilter codonfilter363 = CreateFilter(data, 3, "1086-1088", "", "TAA,TAG,TGA");
assert(data.species == codonfilter363.species, "species number mismatch");
assert(1 == codonfilter363.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter363");
UseModel(model363);
ExecuteCommands("Tree tree363 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree363, tree);
DataSetFilter codonfilter364 = CreateFilter(data, 3, "1089-1091", "", "TAA,TAG,TGA");
assert(data.species == codonfilter364.species, "species number mismatch");
assert(1 == codonfilter364.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter364");
UseModel(model364);
ExecuteCommands("Tree tree364 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree364, tree);
DataSetFilter codonfilter365 = CreateFilter(data, 3, "1092-1094", "", "TAA,TAG,TGA");
assert(data.species == codonfilter365.species, "species number mismatch");
assert(1 == codonfilter365.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter365");
UseModel(model365);
ExecuteCommands("Tree tree365 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree365, tree);
DataSetFilter codonfilter366 = CreateFilter(data, 3, "1095-1097", "", "TAA,TAG,TGA");
assert(data.species == codonfilter366.species, "species number mismatch");
assert(1 == codonfilter366.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter366");
UseModel(model366);
ExecuteCommands("Tree tree366 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree366, tree);
DataSetFilter codonfilter367 = CreateFilter(data, 3, "1098-1100", "", "TAA,TAG,TGA");
assert(data.species == codonfilter367.species, "species number mismatch");
assert(1 == codonfilter367.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter367");
UseModel(model367);
ExecuteCommands("Tree tree367 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree367, tree);
DataSetFilter codonfilter368 = CreateFilter(data, 3, "1101-1103", "", "TAA,TAG,TGA");
assert(data.species == codonfilter368.species, "species number mismatch");
assert(1 == codonfilter368.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter368");
UseModel(model368);
ExecuteCommands("Tree tree368 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree368, tree);
DataSetFilter codonfilter369 = CreateFilter(data, 3, "1104-1106", "", "TAA,TAG,TGA");
assert(data.species == codonfilter369.species, "species number mismatch");
assert(1 == codonfilter369.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter369");
UseModel(model369);
ExecuteCommands("Tree tree369 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree369, tree);
DataSetFilter codonfilter370 = CreateFilter(data, 3, "1107-1109", "", "TAA,TAG,TGA");
assert(data.species == codonfilter370.species, "species number mismatch");
assert(1 == codonfilter370.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter370");
UseModel(model370);
ExecuteCommands("Tree tree370 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree370, tree);
DataSetFilter codonfilter371 = CreateFilter(data, 3, "1110-1112", "", "TAA,TAG,TGA");
assert(data.species == codonfilter371.species, "species number mismatch");
assert(1 == codonfilter371.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter371");
UseModel(model371);
ExecuteCommands("Tree tree371 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree371, tree);
DataSetFilter codonfilter372 = CreateFilter(data, 3, "1113-1115", "", "TAA,TAG,TGA");
assert(data.species == codonfilter372.species, "species number mismatch");
assert(1 == codonfilter372.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter372");
UseModel(model372);
ExecuteCommands("Tree tree372 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree372, tree);
DataSetFilter codonfilter373 = CreateFilter(data, 3, "1116-1118", "", "TAA,TAG,TGA");
assert(data.species == codonfilter373.species, "species number mismatch");
assert(1 == codonfilter373.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter373");
UseModel(model373);
ExecuteCommands("Tree tree373 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree373, tree);
DataSetFilter codonfilter374 = CreateFilter(data, 3, "1119-1121", "", "TAA,TAG,TGA");
assert(data.species == codonfilter374.species, "species number mismatch");
assert(1 == codonfilter374.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter374");
UseModel(model374);
ExecuteCommands("Tree tree374 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree374, tree);
DataSetFilter codonfilter375 = CreateFilter(data, 3, "1122-1124", "", "TAA,TAG,TGA");
assert(data.species == codonfilter375.species, "species number mismatch");
assert(1 == codonfilter375.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter375");
UseModel(model375);
ExecuteCommands("Tree tree375 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree375, tree);
DataSetFilter codonfilter376 = CreateFilter(data, 3, "1125-1127", "", "TAA,TAG,TGA");
assert(data.species == codonfilter376.species, "species number mismatch");
assert(1 == codonfilter376.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter376");
UseModel(model376);
ExecuteCommands("Tree tree376 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree376, tree);
DataSetFilter codonfilter377 = CreateFilter(data, 3, "1128-1130", "", "TAA,TAG,TGA");
assert(data.species == codonfilter377.species, "species number mismatch");
assert(1 == codonfilter377.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter377");
UseModel(model377);
ExecuteCommands("Tree tree377 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree377, tree);
DataSetFilter codonfilter378 = CreateFilter(data, 3, "1131-1133", "", "TAA,TAG,TGA");
assert(data.species == codonfilter378.species, "species number mismatch");
assert(1 == codonfilter378.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter378");
UseModel(model378);
ExecuteCommands("Tree tree378 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree378, tree);
DataSetFilter codonfilter379 = CreateFilter(data, 3, "1134-1136", "", "TAA,TAG,TGA");
assert(data.species == codonfilter379.species, "species number mismatch");
assert(1 == codonfilter379.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter379");
UseModel(model379);
ExecuteCommands("Tree tree379 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree379, tree);
DataSetFilter codonfilter380 = CreateFilter(data, 3, "1137-1139", "", "TAA,TAG,TGA");
assert(data.species == codonfilter380.species, "species number mismatch");
assert(1 == codonfilter380.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter380");
UseModel(model380);
ExecuteCommands("Tree tree380 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree380, tree);
DataSetFilter codonfilter381 = CreateFilter(data, 3, "1140-1142", "", "TAA,TAG,TGA");
assert(data.species == codonfilter381.species, "species number mismatch");
assert(1 == codonfilter381.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter381");
UseModel(model381);
ExecuteCommands("Tree tree381 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree381, tree);
DataSetFilter codonfilter382 = CreateFilter(data, 3, "1143-1145", "", "TAA,TAG,TGA");
assert(data.species == codonfilter382.species, "species number mismatch");
assert(1 == codonfilter382.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter382");
UseModel(model382);
ExecuteCommands("Tree tree382 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree382, tree);
DataSetFilter codonfilter383 = CreateFilter(data, 3, "1146-1148", "", "TAA,TAG,TGA");
assert(data.species == codonfilter383.species, "species number mismatch");
assert(1 == codonfilter383.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter383");
UseModel(model383);
ExecuteCommands("Tree tree383 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree383, tree);
DataSetFilter codonfilter384 = CreateFilter(data, 3, "1149-1151", "", "TAA,TAG,TGA");
assert(data.species == codonfilter384.species, "species number mismatch");
assert(1 == codonfilter384.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter384");
UseModel(model384);
ExecuteCommands("Tree tree384 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree384, tree);
DataSetFilter codonfilter385 = CreateFilter(data, 3, "1152-1154", "", "TAA,TAG,TGA");
assert(data.species == codonfilter385.species, "species number mismatch");
assert(1 == codonfilter385.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter385");
UseModel(model385);
ExecuteCommands("Tree tree385 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree385, tree);
DataSetFilter codonfilter386 = CreateFilter(data, 3, "1155-1157", "", "TAA,TAG,TGA");
assert(data.species == codonfilter386.species, "species number mismatch");
assert(1 == codonfilter386.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter386");
UseModel(model386);
ExecuteCommands("Tree tree386 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree386, tree);
DataSetFilter codonfilter387 = CreateFilter(data, 3, "1158-1160", "", "TAA,TAG,TGA");
assert(data.species == codonfilter387.species, "species number mismatch");
assert(1 == codonfilter387.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter387");
UseModel(model387);
ExecuteCommands("Tree tree387 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree387, tree);
DataSetFilter codonfilter388 = CreateFilter(data, 3, "1161-1163", "", "TAA,TAG,TGA");
assert(data.species == codonfilter388.species, "species number mismatch");
assert(1 == codonfilter388.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter388");
UseModel(model388);
ExecuteCommands("Tree tree388 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree388, tree);
DataSetFilter codonfilter389 = CreateFilter(data, 3, "1164-1166", "", "TAA,TAG,TGA");
assert(data.species == codonfilter389.species, "species number mismatch");
assert(1 == codonfilter389.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter389");
UseModel(model389);
ExecuteCommands("Tree tree389 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree389, tree);
DataSetFilter codonfilter390 = CreateFilter(data, 3, "1167-1169", "", "TAA,TAG,TGA");
assert(data.species == codonfilter390.species, "species number mismatch");
assert(1 == codonfilter390.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter390");
UseModel(model390);
ExecuteCommands("Tree tree390 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree390, tree);
DataSetFilter codonfilter391 = CreateFilter(data, 3, "1170-1172", "", "TAA,TAG,TGA");
assert(data.species == codonfilter391.species, "species number mismatch");
assert(1 == codonfilter391.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter391");
UseModel(model391);
ExecuteCommands("Tree tree391 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree391, tree);
DataSetFilter codonfilter392 = CreateFilter(data, 3, "1173-1175", "", "TAA,TAG,TGA");
assert(data.species == codonfilter392.species, "species number mismatch");
assert(1 == codonfilter392.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter392");
UseModel(model392);
ExecuteCommands("Tree tree392 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree392, tree);
DataSetFilter codonfilter393 = CreateFilter(data, 3, "1176-1178", "", "TAA,TAG,TGA");
assert(data.species == codonfilter393.species, "species number mismatch");
assert(1 == codonfilter393.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter393");
UseModel(model393);
ExecuteCommands("Tree tree393 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree393, tree);
DataSetFilter codonfilter394 = CreateFilter(data, 3, "1179-1181", "", "TAA,TAG,TGA");
assert(data.species == codonfilter394.species, "species number mismatch");
assert(1 == codonfilter394.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter394");
UseModel(model394);
ExecuteCommands("Tree tree394 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree394, tree);
DataSetFilter codonfilter395 = CreateFilter(data, 3, "1182-1184", "", "TAA,TAG,TGA");
assert(data.species == codonfilter395.species, "species number mismatch");
assert(1 == codonfilter395.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter395");
UseModel(model395);
ExecuteCommands("Tree tree395 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree395, tree);
DataSetFilter codonfilter396 = CreateFilter(data, 3, "1185-1187", "", "TAA,TAG,TGA");
assert(data.species == codonfilter396.species, "species number mismatch");
assert(1 == codonfilter396.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter396");
UseModel(model396);
ExecuteCommands("Tree tree396 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree396, tree);
DataSetFilter codonfilter397 = CreateFilter(data, 3, "1188-1190", "", "TAA,TAG,TGA");
assert(data.species == codonfilter397.species, "species number mismatch");
assert(1 == codonfilter397.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter397");
UseModel(model397);
ExecuteCommands("Tree tree397 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree397, tree);
DataSetFilter codonfilter398 = CreateFilter(data, 3, "1191-1193", "", "TAA,TAG,TGA");
assert(data.species == codonfilter398.species, "species number mismatch");
assert(1 == codonfilter398.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter398");
UseModel(model398);
ExecuteCommands("Tree tree398 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree398, tree);
DataSetFilter codonfilter399 = CreateFilter(data, 3, "1194-1196", "", "TAA,TAG,TGA");
assert(data.species == codonfilter399.species, "species number mismatch");
assert(1 == codonfilter399.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter399");
UseModel(model399);
ExecuteCommands("Tree tree399 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree399, tree);
DataSetFilter codonfilter400 = CreateFilter(data, 3, "1197-1199", "", "TAA,TAG,TGA");
assert(data.species == codonfilter400.species, "species number mismatch");
assert(1 == codonfilter400.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter400");
UseModel(model400);
ExecuteCommands("Tree tree400 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree400, tree);
DataSetFilter codonfilter401 = CreateFilter(data, 3, "1200-1202", "", "TAA,TAG,TGA");
assert(data.species == codonfilter401.species, "species number mismatch");
assert(1 == codonfilter401.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter401");
UseModel(model401);
ExecuteCommands("Tree tree401 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree401, tree);
DataSetFilter codonfilter402 = CreateFilter(data, 3, "1203-1205", "", "TAA,TAG,TGA");
assert(data.species == codonfilter402.species, "species number mismatch");
assert(1 == codonfilter402.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter402");
UseModel(model402);
ExecuteCommands("Tree tree402 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree402, tree);
DataSetFilter codonfilter403 = CreateFilter(data, 3, "1206-1208", "", "TAA,TAG,TGA");
assert(data.species == codonfilter403.species, "species number mismatch");
assert(1 == codonfilter403.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter403");
UseModel(model403);
ExecuteCommands("Tree tree403 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree403, tree);
DataSetFilter codonfilter404 = CreateFilter(data, 3, "1209-1211", "", "TAA,TAG,TGA");
assert(data.species == codonfilter404.species, "species number mismatch");
assert(1 == codonfilter404.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter404");
UseModel(model404);
ExecuteCommands("Tree tree404 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree404, tree);
DataSetFilter codonfilter405 = CreateFilter(data, 3, "1212-1214", "", "TAA,TAG,TGA");
assert(data.species == codonfilter405.species, "species number mismatch");
assert(1 == codonfilter405.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter405");
UseModel(model405);
ExecuteCommands("Tree tree405 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree405, tree);
DataSetFilter codonfilter406 = CreateFilter(data, 3, "1215-1217", "", "TAA,TAG,TGA");
assert(data.species == codonfilter406.species, "species number mismatch");
assert(1 == codonfilter406.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter406");
UseModel(model406);
ExecuteCommands("Tree tree406 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree406, tree);
DataSetFilter codonfilter407 = CreateFilter(data, 3, "1218-1220", "", "TAA,TAG,TGA");
assert(data.species == codonfilter407.species, "species number mismatch");
assert(1 == codonfilter407.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter407");
UseModel(model407);
ExecuteCommands("Tree tree407 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree407, tree);
DataSetFilter codonfilter408 = CreateFilter(data, 3, "1221-1223", "", "TAA,TAG,TGA");
assert(data.species == codonfilter408.species, "species number mismatch");
assert(1 == codonfilter408.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter408");
UseModel(model408);
ExecuteCommands("Tree tree408 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree408, tree);
DataSetFilter codonfilter409 = CreateFilter(data, 3, "1224-1226", "", "TAA,TAG,TGA");
assert(data.species == codonfilter409.species, "species number mismatch");
assert(1 == codonfilter409.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter409");
UseModel(model409);
ExecuteCommands("Tree tree409 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree409, tree);
DataSetFilter codonfilter410 = CreateFilter(data, 3, "1227-1229", "", "TAA,TAG,TGA");
assert(data.species == codonfilter410.species, "species number mismatch");
assert(1 == codonfilter410.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter410");
UseModel(model410);
ExecuteCommands("Tree tree410 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree410, tree);
DataSetFilter codonfilter411 = CreateFilter(data, 3, "1230-1232", "", "TAA,TAG,TGA");
assert(data.species == codonfilter411.species, "species number mismatch");
assert(1 == codonfilter411.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter411");
UseModel(model411);
ExecuteCommands("Tree tree411 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree411, tree);
DataSetFilter codonfilter412 = CreateFilter(data, 3, "1233-1235", "", "TAA,TAG,TGA");
assert(data.species == codonfilter412.species, "species number mismatch");
assert(1 == codonfilter412.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter412");
UseModel(model412);
ExecuteCommands("Tree tree412 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree412, tree);
DataSetFilter codonfilter413 = CreateFilter(data, 3, "1236-1238", "", "TAA,TAG,TGA");
assert(data.species == codonfilter413.species, "species number mismatch");
assert(1 == codonfilter413.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter413");
UseModel(model413);
ExecuteCommands("Tree tree413 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree413, tree);
DataSetFilter codonfilter414 = CreateFilter(data, 3, "1239-1241", "", "TAA,TAG,TGA");
assert(data.species == codonfilter414.species, "species number mismatch");
assert(1 == codonfilter414.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter414");
UseModel(model414);
ExecuteCommands("Tree tree414 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree414, tree);
DataSetFilter codonfilter415 = CreateFilter(data, 3, "1242-1244", "", "TAA,TAG,TGA");
assert(data.species == codonfilter415.species, "species number mismatch");
assert(1 == codonfilter415.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter415");
UseModel(model415);
ExecuteCommands("Tree tree415 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree415, tree);
DataSetFilter codonfilter416 = CreateFilter(data, 3, "1245-1247", "", "TAA,TAG,TGA");
assert(data.species == codonfilter416.species, "species number mismatch");
assert(1 == codonfilter416.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter416");
UseModel(model416);
ExecuteCommands("Tree tree416 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree416, tree);
DataSetFilter codonfilter417 = CreateFilter(data, 3, "1248-1250", "", "TAA,TAG,TGA");
assert(data.species == codonfilter417.species, "species number mismatch");
assert(1 == codonfilter417.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter417");
UseModel(model417);
ExecuteCommands("Tree tree417 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree417, tree);
DataSetFilter codonfilter418 = CreateFilter(data, 3, "1251-1253", "", "TAA,TAG,TGA");
assert(data.species == codonfilter418.species, "species number mismatch");
assert(1 == codonfilter418.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter418");
UseModel(model418);
ExecuteCommands("Tree tree418 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree418, tree);
DataSetFilter codonfilter419 = CreateFilter(data, 3, "1254-1256", "", "TAA,TAG,TGA");
assert(data.species == codonfilter419.species, "species number mismatch");
assert(1 == codonfilter419.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter419");
UseModel(model419);
ExecuteCommands("Tree tree419 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree419, tree);
DataSetFilter codonfilter420 = CreateFilter(data, 3, "1257-1259", "", "TAA,TAG,TGA");
assert(data.species == codonfilter420.species, "species number mismatch");
assert(1 == codonfilter420.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter420");
UseModel(model420);
ExecuteCommands("Tree tree420 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree420, tree);
DataSetFilter codonfilter421 = CreateFilter(data, 3, "1260-1262", "", "TAA,TAG,TGA");
assert(data.species == codonfilter421.species, "species number mismatch");
assert(1 == codonfilter421.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter421");
UseModel(model421);
ExecuteCommands("Tree tree421 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree421, tree);
DataSetFilter codonfilter422 = CreateFilter(data, 3, "1263-1265", "", "TAA,TAG,TGA");
assert(data.species == codonfilter422.species, "species number mismatch");
assert(1 == codonfilter422.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter422");
UseModel(model422);
ExecuteCommands("Tree tree422 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree422, tree);
DataSetFilter codonfilter423 = CreateFilter(data, 3, "1266-1268", "", "TAA,TAG,TGA");
assert(data.species == codonfilter423.species, "species number mismatch");
assert(1 == codonfilter423.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter423");
UseModel(model423);
ExecuteCommands("Tree tree423 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree423, tree);
DataSetFilter codonfilter424 = CreateFilter(data, 3, "1269-1271", "", "TAA,TAG,TGA");
assert(data.species == codonfilter424.species, "species number mismatch");
assert(1 == codonfilter424.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter424");
UseModel(model424);
ExecuteCommands("Tree tree424 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree424, tree);
DataSetFilter codonfilter425 = CreateFilter(data, 3, "1272-1274", "", "TAA,TAG,TGA");
assert(data.species == codonfilter425.species, "species number mismatch");
assert(1 == codonfilter425.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter425");
UseModel(model425);
ExecuteCommands("Tree tree425 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree425, tree);
DataSetFilter codonfilter426 = CreateFilter(data, 3, "1275-1277", "", "TAA,TAG,TGA");
assert(data.species == codonfilter426.species, "species number mismatch");
assert(1 == codonfilter426.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter426");
UseModel(model426);
ExecuteCommands("Tree tree426 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree426, tree);
DataSetFilter codonfilter427 = CreateFilter(data, 3, "1278-1280", "", "TAA,TAG,TGA");
assert(data.species == codonfilter427.species, "species number mismatch");
assert(1 == codonfilter427.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter427");
UseModel(model427);
ExecuteCommands("Tree tree427 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree427, tree);
DataSetFilter codonfilter428 = CreateFilter(data, 3, "1281-1283", "", "TAA,TAG,TGA");
assert(data.species == codonfilter428.species, "species number mismatch");
assert(1 == codonfilter428.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter428");
UseModel(model428);
ExecuteCommands("Tree tree428 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree428, tree);
DataSetFilter codonfilter429 = CreateFilter(data, 3, "1284-1286", "", "TAA,TAG,TGA");
assert(data.species == codonfilter429.species, "species number mismatch");
assert(1 == codonfilter429.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter429");
UseModel(model429);
ExecuteCommands("Tree tree429 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree429, tree);
DataSetFilter codonfilter430 = CreateFilter(data, 3, "1287-1289", "", "TAA,TAG,TGA");
assert(data.species == codonfilter430.species, "species number mismatch");
assert(1 == codonfilter430.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter430");
UseModel(model430);
ExecuteCommands("Tree tree430 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree430, tree);
DataSetFilter codonfilter431 = CreateFilter(data, 3, "1290-1292", "", "TAA,TAG,TGA");
assert(data.species == codonfilter431.species, "species number mismatch");
assert(1 == codonfilter431.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter431");
UseModel(model431);
ExecuteCommands("Tree tree431 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree431, tree);
DataSetFilter codonfilter432 = CreateFilter(data, 3, "1293-1295", "", "TAA,TAG,TGA");
assert(data.species == codonfilter432.species, "species number mismatch");
assert(1 == codonfilter432.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter432");
UseModel(model432);
ExecuteCommands("Tree tree432 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree432, tree);
DataSetFilter codonfilter433 = CreateFilter(data, 3, "1296-1298", "", "TAA,TAG,TGA");
assert(data.species == codonfilter433.species, "species number mismatch");
assert(1 == codonfilter433.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter433");
UseModel(model433);
ExecuteCommands("Tree tree433 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree433, tree);
DataSetFilter codonfilter434 = CreateFilter(data, 3, "1299-1301", "", "TAA,TAG,TGA");
assert(data.species == codonfilter434.species, "species number mismatch");
assert(1 == codonfilter434.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter434");
UseModel(model434);
ExecuteCommands("Tree tree434 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree434, tree);
DataSetFilter codonfilter435 = CreateFilter(data, 3, "1302-1304", "", "TAA,TAG,TGA");
assert(data.species == codonfilter435.species, "species number mismatch");
assert(1 == codonfilter435.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter435");
UseModel(model435);
ExecuteCommands("Tree tree435 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree435, tree);
DataSetFilter codonfilter436 = CreateFilter(data, 3, "1305-1307", "", "TAA,TAG,TGA");
assert(data.species == codonfilter436.species, "species number mismatch");
assert(1 == codonfilter436.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter436");
UseModel(model436);
ExecuteCommands("Tree tree436 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree436, tree);
DataSetFilter codonfilter437 = CreateFilter(data, 3, "1308-1310", "", "TAA,TAG,TGA");
assert(data.species == codonfilter437.species, "species number mismatch");
assert(1 == codonfilter437.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter437");
UseModel(model437);
ExecuteCommands("Tree tree437 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree437, tree);
DataSetFilter codonfilter438 = CreateFilter(data, 3, "1311-1313", "", "TAA,TAG,TGA");
assert(data.species == codonfilter438.species, "species number mismatch");
assert(1 == codonfilter438.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter438");
UseModel(model438);
ExecuteCommands("Tree tree438 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree438, tree);
DataSetFilter codonfilter439 = CreateFilter(data, 3, "1314-1316", "", "TAA,TAG,TGA");
assert(data.species == codonfilter439.species, "species number mismatch");
assert(1 == codonfilter439.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter439");
UseModel(model439);
ExecuteCommands("Tree tree439 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree439, tree);
DataSetFilter codonfilter440 = CreateFilter(data, 3, "1317-1319", "", "TAA,TAG,TGA");
assert(data.species == codonfilter440.species, "species number mismatch");
assert(1 == codonfilter440.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter440");
UseModel(model440);
ExecuteCommands("Tree tree440 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree440, tree);
DataSetFilter codonfilter441 = CreateFilter(data, 3, "1320-1322", "", "TAA,TAG,TGA");
assert(data.species == codonfilter441.species, "species number mismatch");
assert(1 == codonfilter441.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter441");
UseModel(model441);
ExecuteCommands("Tree tree441 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree441, tree);
DataSetFilter codonfilter442 = CreateFilter(data, 3, "1323-1325", "", "TAA,TAG,TGA");
assert(data.species == codonfilter442.species, "species number mismatch");
assert(1 == codonfilter442.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter442");
UseModel(model442);
ExecuteCommands("Tree tree442 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree442, tree);
DataSetFilter codonfilter443 = CreateFilter(data, 3, "1326-1328", "", "TAA,TAG,TGA");
assert(data.species == codonfilter443.species, "species number mismatch");
assert(1 == codonfilter443.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter443");
UseModel(model443);
ExecuteCommands("Tree tree443 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree443, tree);
DataSetFilter codonfilter444 = CreateFilter(data, 3, "1329-1331", "", "TAA,TAG,TGA");
assert(data.species == codonfilter444.species, "species number mismatch");
assert(1 == codonfilter444.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter444");
UseModel(model444);
ExecuteCommands("Tree tree444 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree444, tree);
DataSetFilter codonfilter445 = CreateFilter(data, 3, "1332-1334", "", "TAA,TAG,TGA");
assert(data.species == codonfilter445.species, "species number mismatch");
assert(1 == codonfilter445.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter445");
UseModel(model445);
ExecuteCommands("Tree tree445 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree445, tree);
DataSetFilter codonfilter446 = CreateFilter(data, 3, "1335-1337", "", "TAA,TAG,TGA");
assert(data.species == codonfilter446.species, "species number mismatch");
assert(1 == codonfilter446.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter446");
UseModel(model446);
ExecuteCommands("Tree tree446 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree446, tree);
DataSetFilter codonfilter447 = CreateFilter(data, 3, "1338-1340", "", "TAA,TAG,TGA");
assert(data.species == codonfilter447.species, "species number mismatch");
assert(1 == codonfilter447.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter447");
UseModel(model447);
ExecuteCommands("Tree tree447 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree447, tree);
DataSetFilter codonfilter448 = CreateFilter(data, 3, "1341-1343", "", "TAA,TAG,TGA");
assert(data.species == codonfilter448.species, "species number mismatch");
assert(1 == codonfilter448.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter448");
UseModel(model448);
ExecuteCommands("Tree tree448 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree448, tree);
DataSetFilter codonfilter449 = CreateFilter(data, 3, "1344-1346", "", "TAA,TAG,TGA");
assert(data.species == codonfilter449.species, "species number mismatch");
assert(1 == codonfilter449.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter449");
UseModel(model449);
ExecuteCommands("Tree tree449 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree449, tree);
DataSetFilter codonfilter450 = CreateFilter(data, 3, "1347-1349", "", "TAA,TAG,TGA");
assert(data.species == codonfilter450.species, "species number mismatch");
assert(1 == codonfilter450.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter450");
UseModel(model450);
ExecuteCommands("Tree tree450 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree450, tree);
DataSetFilter codonfilter451 = CreateFilter(data, 3, "1350-1352", "", "TAA,TAG,TGA");
assert(data.species == codonfilter451.species, "species number mismatch");
assert(1 == codonfilter451.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter451");
UseModel(model451);
ExecuteCommands("Tree tree451 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree451, tree);
DataSetFilter codonfilter452 = CreateFilter(data, 3, "1353-1355", "", "TAA,TAG,TGA");
assert(data.species == codonfilter452.species, "species number mismatch");
assert(1 == codonfilter452.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter452");
UseModel(model452);
ExecuteCommands("Tree tree452 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree452, tree);
DataSetFilter codonfilter453 = CreateFilter(data, 3, "1356-1358", "", "TAA,TAG,TGA");
assert(data.species == codonfilter453.species, "species number mismatch");
assert(1 == codonfilter453.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter453");
UseModel(model453);
ExecuteCommands("Tree tree453 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree453, tree);
DataSetFilter codonfilter454 = CreateFilter(data, 3, "1359-1361", "", "TAA,TAG,TGA");
assert(data.species == codonfilter454.species, "species number mismatch");
assert(1 == codonfilter454.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter454");
UseModel(model454);
ExecuteCommands("Tree tree454 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree454, tree);
DataSetFilter codonfilter455 = CreateFilter(data, 3, "1362-1364", "", "TAA,TAG,TGA");
assert(data.species == codonfilter455.species, "species number mismatch");
assert(1 == codonfilter455.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter455");
UseModel(model455);
ExecuteCommands("Tree tree455 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree455, tree);
DataSetFilter codonfilter456 = CreateFilter(data, 3, "1365-1367", "", "TAA,TAG,TGA");
assert(data.species == codonfilter456.species, "species number mismatch");
assert(1 == codonfilter456.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter456");
UseModel(model456);
ExecuteCommands("Tree tree456 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree456, tree);
DataSetFilter codonfilter457 = CreateFilter(data, 3, "1368-1370", "", "TAA,TAG,TGA");
assert(data.species == codonfilter457.species, "species number mismatch");
assert(1 == codonfilter457.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter457");
UseModel(model457);
ExecuteCommands("Tree tree457 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree457, tree);
DataSetFilter codonfilter458 = CreateFilter(data, 3, "1371-1373", "", "TAA,TAG,TGA");
assert(data.species == codonfilter458.species, "species number mismatch");
assert(1 == codonfilter458.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter458");
UseModel(model458);
ExecuteCommands("Tree tree458 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree458, tree);
DataSetFilter codonfilter459 = CreateFilter(data, 3, "1374-1376", "", "TAA,TAG,TGA");
assert(data.species == codonfilter459.species, "species number mismatch");
assert(1 == codonfilter459.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter459");
UseModel(model459);
ExecuteCommands("Tree tree459 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree459, tree);
DataSetFilter codonfilter460 = CreateFilter(data, 3, "1377-1379", "", "TAA,TAG,TGA");
assert(data.species == codonfilter460.species, "species number mismatch");
assert(1 == codonfilter460.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter460");
UseModel(model460);
ExecuteCommands("Tree tree460 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree460, tree);
DataSetFilter codonfilter461 = CreateFilter(data, 3, "1380-1382", "", "TAA,TAG,TGA");
assert(data.species == codonfilter461.species, "species number mismatch");
assert(1 == codonfilter461.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter461");
UseModel(model461);
ExecuteCommands("Tree tree461 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree461, tree);
DataSetFilter codonfilter462 = CreateFilter(data, 3, "1383-1385", "", "TAA,TAG,TGA");
assert(data.species == codonfilter462.species, "species number mismatch");
assert(1 == codonfilter462.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter462");
UseModel(model462);
ExecuteCommands("Tree tree462 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree462, tree);
DataSetFilter codonfilter463 = CreateFilter(data, 3, "1386-1388", "", "TAA,TAG,TGA");
assert(data.species == codonfilter463.species, "species number mismatch");
assert(1 == codonfilter463.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter463");
UseModel(model463);
ExecuteCommands("Tree tree463 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree463, tree);
DataSetFilter codonfilter464 = CreateFilter(data, 3, "1389-1391", "", "TAA,TAG,TGA");
assert(data.species == codonfilter464.species, "species number mismatch");
assert(1 == codonfilter464.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter464");
UseModel(model464);
ExecuteCommands("Tree tree464 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree464, tree);
DataSetFilter codonfilter465 = CreateFilter(data, 3, "1392-1394", "", "TAA,TAG,TGA");
assert(data.species == codonfilter465.species, "species number mismatch");
assert(1 == codonfilter465.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter465");
UseModel(model465);
ExecuteCommands("Tree tree465 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree465, tree);
DataSetFilter codonfilter466 = CreateFilter(data, 3, "1395-1397", "", "TAA,TAG,TGA");
assert(data.species == codonfilter466.species, "species number mismatch");
assert(1 == codonfilter466.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter466");
UseModel(model466);
ExecuteCommands("Tree tree466 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree466, tree);
DataSetFilter codonfilter467 = CreateFilter(data, 3, "1398-1400", "", "TAA,TAG,TGA");
assert(data.species == codonfilter467.species, "species number mismatch");
assert(1 == codonfilter467.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter467");
UseModel(model467);
ExecuteCommands("Tree tree467 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree467, tree);
DataSetFilter codonfilter468 = CreateFilter(data, 3, "1401-1403", "", "TAA,TAG,TGA");
assert(data.species == codonfilter468.species, "species number mismatch");
assert(1 == codonfilter468.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter468");
UseModel(model468);
ExecuteCommands("Tree tree468 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree468, tree);
DataSetFilter codonfilter469 = CreateFilter(data, 3, "1404-1406", "", "TAA,TAG,TGA");
assert(data.species == codonfilter469.species, "species number mismatch");
assert(1 == codonfilter469.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter469");
UseModel(model469);
ExecuteCommands("Tree tree469 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree469, tree);
DataSetFilter codonfilter470 = CreateFilter(data, 3, "1407-1409", "", "TAA,TAG,TGA");
assert(data.species == codonfilter470.species, "species number mismatch");
assert(1 == codonfilter470.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter470");
UseModel(model470);
ExecuteCommands("Tree tree470 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree470, tree);
DataSetFilter codonfilter471 = CreateFilter(data, 3, "1410-1412", "", "TAA,TAG,TGA");
assert(data.species == codonfilter471.species, "species number mismatch");
assert(1 == codonfilter471.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter471");
UseModel(model471);
ExecuteCommands("Tree tree471 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree471, tree);
DataSetFilter codonfilter472 = CreateFilter(data, 3, "1413-1415", "", "TAA,TAG,TGA");
assert(data.species == codonfilter472.species, "species number mismatch");
assert(1 == codonfilter472.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter472");
UseModel(model472);
ExecuteCommands("Tree tree472 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree472, tree);
DataSetFilter codonfilter473 = CreateFilter(data, 3, "1416-1418", "", "TAA,TAG,TGA");
assert(data.species == codonfilter473.species, "species number mismatch");
assert(1 == codonfilter473.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter473");
UseModel(model473);
ExecuteCommands("Tree tree473 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree473, tree);
DataSetFilter codonfilter474 = CreateFilter(data, 3, "1419-1421", "", "TAA,TAG,TGA");
assert(data.species == codonfilter474.species, "species number mismatch");
assert(1 == codonfilter474.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter474");
UseModel(model474);
ExecuteCommands("Tree tree474 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree474, tree);
DataSetFilter codonfilter475 = CreateFilter(data, 3, "1422-1424", "", "TAA,TAG,TGA");
assert(data.species == codonfilter475.species, "species number mismatch");
assert(1 == codonfilter475.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter475");
UseModel(model475);
ExecuteCommands("Tree tree475 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree475, tree);
DataSetFilter codonfilter476 = CreateFilter(data, 3, "1425-1427", "", "TAA,TAG,TGA");
assert(data.species == codonfilter476.species, "species number mismatch");
assert(1 == codonfilter476.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter476");
UseModel(model476);
ExecuteCommands("Tree tree476 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree476, tree);
DataSetFilter codonfilter477 = CreateFilter(data, 3, "1428-1430", "", "TAA,TAG,TGA");
assert(data.species == codonfilter477.species, "species number mismatch");
assert(1 == codonfilter477.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter477");
UseModel(model477);
ExecuteCommands("Tree tree477 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree477, tree);
DataSetFilter codonfilter478 = CreateFilter(data, 3, "1431-1433", "", "TAA,TAG,TGA");
assert(data.species == codonfilter478.species, "species number mismatch");
assert(1 == codonfilter478.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter478");
UseModel(model478);
ExecuteCommands("Tree tree478 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree478, tree);
DataSetFilter codonfilter479 = CreateFilter(data, 3, "1434-1436", "", "TAA,TAG,TGA");
assert(data.species == codonfilter479.species, "species number mismatch");
assert(1 == codonfilter479.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter479");
UseModel(model479);
ExecuteCommands("Tree tree479 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree479, tree);
DataSetFilter codonfilter480 = CreateFilter(data, 3, "1437-1439", "", "TAA,TAG,TGA");
assert(data.species == codonfilter480.species, "species number mismatch");
assert(1 == codonfilter480.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter480");
UseModel(model480);
ExecuteCommands("Tree tree480 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree480, tree);
DataSetFilter codonfilter481 = CreateFilter(data, 3, "1440-1442", "", "TAA,TAG,TGA");
assert(data.species == codonfilter481.species, "species number mismatch");
assert(1 == codonfilter481.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter481");
UseModel(model481);
ExecuteCommands("Tree tree481 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree481, tree);
DataSetFilter codonfilter482 = CreateFilter(data, 3, "1443-1445", "", "TAA,TAG,TGA");
assert(data.species == codonfilter482.species, "species number mismatch");
assert(1 == codonfilter482.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter482");
UseModel(model482);
ExecuteCommands("Tree tree482 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree482, tree);
DataSetFilter codonfilter483 = CreateFilter(data, 3, "1446-1448", "", "TAA,TAG,TGA");
assert(data.species == codonfilter483.species, "species number mismatch");
assert(1 == codonfilter483.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter483");
UseModel(model483);
ExecuteCommands("Tree tree483 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree483, tree);
DataSetFilter codonfilter484 = CreateFilter(data, 3, "1449-1451", "", "TAA,TAG,TGA");
assert(data.species == codonfilter484.species, "species number mismatch");
assert(1 == codonfilter484.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter484");
UseModel(model484);
ExecuteCommands("Tree tree484 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree484, tree);
DataSetFilter codonfilter485 = CreateFilter(data, 3, "1452-1454", "", "TAA,TAG,TGA");
assert(data.species == codonfilter485.species, "species number mismatch");
assert(1 == codonfilter485.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter485");
UseModel(model485);
ExecuteCommands("Tree tree485 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree485, tree);
DataSetFilter codonfilter486 = CreateFilter(data, 3, "1455-1457", "", "TAA,TAG,TGA");
assert(data.species == codonfilter486.species, "species number mismatch");
assert(1 == codonfilter486.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter486");
UseModel(model486);
ExecuteCommands("Tree tree486 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree486, tree);
DataSetFilter codonfilter487 = CreateFilter(data, 3, "1458-1460", "", "TAA,TAG,TGA");
assert(data.species == codonfilter487.species, "species number mismatch");
assert(1 == codonfilter487.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter487");
UseModel(model487);
ExecuteCommands("Tree tree487 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree487, tree);
DataSetFilter codonfilter488 = CreateFilter(data, 3, "1461-1463", "", "TAA,TAG,TGA");
assert(data.species == codonfilter488.species, "species number mismatch");
assert(1 == codonfilter488.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter488");
UseModel(model488);
ExecuteCommands("Tree tree488 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree488, tree);
DataSetFilter codonfilter489 = CreateFilter(data, 3, "1464-1466", "", "TAA,TAG,TGA");
assert(data.species == codonfilter489.species, "species number mismatch");
assert(1 == codonfilter489.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter489");
UseModel(model489);
ExecuteCommands("Tree tree489 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree489, tree);
DataSetFilter codonfilter490 = CreateFilter(data, 3, "1467-1469", "", "TAA,TAG,TGA");
assert(data.species == codonfilter490.species, "species number mismatch");
assert(1 == codonfilter490.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter490");
UseModel(model490);
ExecuteCommands("Tree tree490 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree490, tree);
DataSetFilter codonfilter491 = CreateFilter(data, 3, "1470-1472", "", "TAA,TAG,TGA");
assert(data.species == codonfilter491.species, "species number mismatch");
assert(1 == codonfilter491.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter491");
UseModel(model491);
ExecuteCommands("Tree tree491 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree491, tree);
DataSetFilter codonfilter492 = CreateFilter(data, 3, "1473-1475", "", "TAA,TAG,TGA");
assert(data.species == codonfilter492.species, "species number mismatch");
assert(1 == codonfilter492.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter492");
UseModel(model492);
ExecuteCommands("Tree tree492 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree492, tree);
DataSetFilter codonfilter493 = CreateFilter(data, 3, "1476-1478", "", "TAA,TAG,TGA");
assert(data.species == codonfilter493.species, "species number mismatch");
assert(1 == codonfilter493.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter493");
UseModel(model493);
ExecuteCommands("Tree tree493 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree493, tree);
DataSetFilter codonfilter494 = CreateFilter(data, 3, "1479-1481", "", "TAA,TAG,TGA");
assert(data.species == codonfilter494.species, "species number mismatch");
assert(1 == codonfilter494.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter494");
UseModel(model494);
ExecuteCommands("Tree tree494 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree494, tree);
DataSetFilter codonfilter495 = CreateFilter(data, 3, "1482-1484", "", "TAA,TAG,TGA");
assert(data.species == codonfilter495.species, "species number mismatch");
assert(1 == codonfilter495.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter495");
UseModel(model495);
ExecuteCommands("Tree tree495 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree495, tree);
DataSetFilter codonfilter496 = CreateFilter(data, 3, "1485-1487", "", "TAA,TAG,TGA");
assert(data.species == codonfilter496.species, "species number mismatch");
assert(1 == codonfilter496.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter496");
UseModel(model496);
ExecuteCommands("Tree tree496 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree496, tree);
DataSetFilter codonfilter497 = CreateFilter(data, 3, "1488-1490", "", "TAA,TAG,TGA");
assert(data.species == codonfilter497.species, "species number mismatch");
assert(1 == codonfilter497.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter497");
UseModel(model497);
ExecuteCommands("Tree tree497 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree497, tree);
DataSetFilter codonfilter498 = CreateFilter(data, 3, "1491-1493", "", "TAA,TAG,TGA");
assert(data.species == codonfilter498.species, "species number mismatch");
assert(1 == codonfilter498.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter498");
UseModel(model498);
ExecuteCommands("Tree tree498 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree498, tree);
LikelihoodFunction likelihood = (codonfilter2, tree, codonfilter3, tree3, codonfilter4, tree4, codonfilter5, tree5, codonfilter6, tree6, codonfilter7, tree7, codonfilter8, tree8, codonfilter9, tree9, codonfilter10, tree10, codonfilter11, tree11, codonfilter12, tree12, codonfilter13, tree13, codonfilter14, tree14, codonfilter15, tree15, codonfilter16, tree16, codonfilter17, tree17, codonfilter18, tree18, codonfilter19, tree19, codonfilter20, tree20, codonfilter21, tree21, codonfilter22, tree22, codonfilter23, tree23, codonfilter24, tree24, codonfilter25, tree25, codonfilter26, tree26, codonfilter27, tree27, codonfilter28, tree28, codonfilter29, tree29, codonfilter30, tree30, codonfilter31, tree31, codonfilter32, tree32, codonfilter33, tree33, codonfilter34, tree34, codonfilter35, tree35, codonfilter36, tree36, codonfilter37, tree37, codonfilter38, tree38, codonfilter39, tree39, codonfilter40, tree40, codonfilter41, tree41, codonfilter42, tree42, codonfilter43, tree43, codonfilter44, tree44, codonfilter45, tree45, codonfilter46, tree46, codonfilter47, tree47, codonfilter48, tree48, codonfilter49, tree49, codonfilter50, tree50, codonfilter51, tree51, codonfilter52, tree52, codonfilter53, tree53, codonfilter54, tree54, codonfilter55, tree55, codonfilter56, tree56, codonfilter57, tree57, codonfilter58, tree58, codonfilter59, tree59, codonfilter60, tree60, codonfilter61, tree61, codonfilter62, tree62, codonfilter63, tree63, codonfilter64, tree64, codonfilter65, tree65, codonfilter66, tree66, codonfilter67, tree67, codonfilter68, tree68, codonfilter69, tree69, codonfilter70, tree70, codonfilter71, tree71, codonfilter72, tree72, codonfilter73, tree73, codonfilter74, tree74, codonfilter75, tree75, codonfilter76, tree76, codonfilter77, tree77, codonfilter78, tree78, codonfilter79, tree79, codonfilter80, tree80, codonfilter81, tree81, codonfilter82, tree82, codonfilter83, tree83, codonfilter84, tree84, codonfilter85, tree85, codonfilter86, tree86, codonfilter87, tree87, codonfilter88, tree88, codonfilter89, tree89, codonfilter90, tree90, codonfilter91, tree91, codonfilter92, tree92, codonfilter93, tree93, codonfilter94, tree94, codonfilter95, tree95, codonfilter96, tree96, codonfilter97, tree97, codonfilter98, tree98, codonfilter99, tree99, codonfilter100, tree100, codonfilter101, tree101, codonfilter102, tree102, codonfilter103, tree103, codonfilter104, tree104, codonfilter105, tree105, codonfilter106, tree106, codonfilter107, tree107, codonfilter108, tree108, codonfilter109, tree109, codonfilter110, tree110, codonfilter111, tree111, codonfilter112, tree112, codonfilter113, tree113, codonfilter114, tree114, codonfilter115, tree115, codonfilter116, tree116, codonfilter117, tree117, codonfilter118, tree118, codonfilter119, tree119, codonfilter120, tree120, codonfilter121, tree121, codonfilter122, tree122, codonfilter123, tree123, codonfilter124, tree124, codonfilter125, tree125, codonfilter126, tree126, codonfilter127, tree127, codonfilter128, tree128, codonfilter129, tree129, codonfilter130, tree130, codonfilter131, tree131, codonfilter132, tree132, codonfilter133, tree133, codonfilter134, tree134, codonfilter135, tree135, codonfilter136, tree136, codonfilter137, tree137, codonfilter138, tree138, codonfilter139, tree139, codonfilter140, tree140, codonfilter141, tree141, codonfilter142, tree142, codonfilter143, tree143, codonfilter144, tree144, codonfilter145, tree145, codonfilter146, tree146, codonfilter147, tree147, codonfilter148, tree148, codonfilter149, tree149, codonfilter150, tree150, codonfilter151, tree151, codonfilter152, tree152, codonfilter153, tree153, codonfilter154, tree154, codonfilter155, tree155, codonfilter156, tree156, codonfilter157, tree157, codonfilter158, tree158, codonfilter159, tree159, codonfilter160, tree160, codonfilter161, tree161, codonfilter162, tree162, codonfilter163, tree163, codonfilter164, tree164, codonfilter165, tree165, codonfilter166, tree166, codonfilter167, tree167, codonfilter168, tree168, codonfilter169, tree169, codonfilter170, tree170, codonfilter171, tree171, codonfilter172, tree172, codonfilter173, tree173, codonfilter174, tree174, codonfilter175, tree175, codonfilter176, tree176, codonfilter177, tree177, codonfilter178, tree178, codonfilter179, tree179, codonfilter180, tree180, codonfilter181, tree181, codonfilter182, tree182, codonfilter183, tree183, codonfilter184, tree184, codonfilter185, tree185, codonfilter186, tree186, codonfilter187, tree187, codonfilter188, tree188, codonfilter189, tree189, codonfilter190, tree190, codonfilter191, tree191, codonfilter192, tree192, codonfilter193, tree193, codonfilter194, tree194, codonfilter195, tree195, codonfilter196, tree196, codonfilter197, tree197, codonfilter198, tree198, codonfilter199, tree199, codonfilter200, tree200, codonfilter201, tree201, codonfilter202, tree202, codonfilter203, tree203, codonfilter204, tree204, codonfilter205, tree205, codonfilter206, tree206, codonfilter207, tree207, codonfilter208, tree208, codonfilter209, tree209, codonfilter210, tree210, codonfilter211, tree211, codonfilter212, tree212, codonfilter213, tree213, codonfilter214, tree214, codonfilter215, tree215, codonfilter216, tree216, codonfilter217, tree217, codonfilter218, tree218, codonfilter219, tree219, codonfilter220, tree220, codonfilter221, tree221, codonfilter222, tree222, codonfilter223, tree223, codonfilter224, tree224, codonfilter225, tree225, codonfilter226, tree226, codonfilter227, tree227, codonfilter228, tree228, codonfilter229, tree229, codonfilter230, tree230, codonfilter231, tree231, codonfilter232, tree232, codonfilter233, tree233, codonfilter234, tree234, codonfilter235, tree235, codonfilter236, tree236, codonfilter237, tree237, codonfilter238, tree238, codonfilter239, tree239, codonfilter240, tree240, codonfilter241, tree241, codonfilter242, tree242, codonfilter243, tree243, codonfilter244, tree244, codonfilter245, tree245, codonfilter246, tree246, codonfilter247, tree247, codonfilter248, tree248, codonfilter249, tree249, codonfilter250, tree250, codonfilter251, tree251, codonfilter252, tree252, codonfilter253, tree253, codonfilter254, tree254, codonfilter255, tree255, codonfilter256, tree256, codonfilter257, tree257, codonfilter258, tree258, codonfilter259, tree259, codonfilter260, tree260, codonfilter261, tree261, codonfilter262, tree262, codonfilter263, tree263, codonfilter264, tree264, codonfilter265, tree265, codonfilter266, tree266, codonfilter267, tree267, codonfilter268, tree268, codonfilter269, tree269, codonfilter270, tree270, codonfilter271, tree271, codonfilter272, tree272, codonfilter273, tree273, codonfilter274, tree274, codonfilter275, tree275, codonfilter276, tree276, codonfilter277, tree277, codonfilter278, tree278, codonfilter279, tree279, codonfilter280, tree280, codonfilter281, tree281, codonfilter282, tree282, codonfilter283, tree283, codonfilter284, tree284, codonfilter285, tree285, codonfilter286, tree286, codonfilter287, tree287, codonfilter288, tree288, codonfilter289, tree289, codonfilter290, tree290, codonfilter291, tree291, codonfilter292, tree292, codonfilter293, tree293, codonfilter294, tree294, codonfilter295, tree295, codonfilter296, tree296, codonfilter297, tree297, codonfilter298, tree298, codonfilter299, tree299, codonfilter300, tree300, codonfilter301, tree301, codonfilter302, tree302, codonfilter303, tree303, codonfilter304, tree304, codonfilter305, tree305, codonfilter306, tree306, codonfilter307, tree307, codonfilter308, tree308, codonfilter309, tree309, codonfilter310, tree310, codonfilter311, tree311, codonfilter312, tree312, codonfilter313, tree313, codonfilter314, tree314, codonfilter315, tree315, codonfilter316, tree316, codonfilter317, tree317, codonfilter318, tree318, codonfilter319, tree319, codonfilter320, tree320, codonfilter321, tree321, codonfilter322, tree322, codonfilter323, tree323, codonfilter324, tree324, codonfilter325, tree325, codonfilter326, tree326, codonfilter327, tree327, codonfilter328, tree328, codonfilter329, tree329, codonfilter330, tree330, codonfilter331, tree331, codonfilter332, tree332, codonfilter333, tree333, codonfilter334, tree334, codonfilter335, tree335, codonfilter336, tree336, codonfilter337, tree337, codonfilter338, tree338, codonfilter339, tree339, codonfilter340, tree340, codonfilter341, tree341, codonfilter342, tree342, codonfilter343, tree343, codonfilter344, tree344, codonfilter345, tree345, codonfilter346, tree346, codonfilter347, tree347, codonfilter348, tree348, codonfilter349, tree349, codonfilter350, tree350, codonfilter351, tree351, codonfilter352, tree352, codonfilter353, tree353, codonfilter354, tree354, codonfilter355, tree355, codonfilter356, tree356, codonfilter357, tree357, codonfilter358, tree358, codonfilter359, tree359, codonfilter360, tree360, codonfilter361, tree361, codonfilter362, tree362, codonfilter363, tree363, codonfilter364, tree364, codonfilter365, tree365, codonfilter366, tree366, codonfilter367, tree367, codonfilter368, tree368, codonfilter369, tree369, codonfilter370, tree370, codonfilter371, tree371, codonfilter372, tree372, codonfilter373, tree373, codonfilter374, tree374, codonfilter375, tree375, codonfilter376, tree376, codonfilter377, tree377, codonfilter378, tree378, codonfilter379, tree379, codonfilter380, tree380, codonfilter381, tree381, codonfilter382, tree382, codonfilter383, tree383, codonfilter384, tree384, codonfilter385, tree385, codonfilter386, tree386, codonfilter387, tree387, codonfilter388, tree388, codonfilter389, tree389, codonfilter390, tree390, codonfilter391, tree391, codonfilter392, tree392, codonfilter393, tree393, codonfilter394, tree394, codonfilter395, tree395, codonfilter396, tree396, codonfilter397, tree397, codonfilter398, tree398, codonfilter399, tree399, codonfilter400, tree400, codonfilter401, tree401, codonfilter402, tree402, codonfilter403, tree403, codonfilter404, tree404, codonfilter405, tree405, codonfilter406, tree406, codonfilter407, tree407, codonfilter408, tree408, codonfilter409, tree409, codonfilter410, tree410, codonfilter411, tree411, codonfilter412, tree412, codonfilter413, tree413, codonfilter414, tree414, codonfilter415, tree415, codonfilter416, tree416, codonfilter417, tree417, codonfilter418, tree418, codonfilter419, tree419, codonfilter420, tree420, codonfilter421, tree421, codonfilter422, tree422, codonfilter423, tree423, codonfilter424, tree424, codonfilter425, tree425, codonfilter426, tree426, codonfilter427, tree427, codonfilter428, tree428, codonfilter429, tree429, codonfilter430, tree430, codonfilter431, tree431, codonfilter432, tree432, codonfilter433, tree433, codonfilter434, tree434, codonfilter435, tree435, codonfilter436, tree436, codonfilter437, tree437, codonfilter438, tree438, codonfilter439, tree439, codonfilter440, tree440, codonfilter441, tree441, codonfilter442, tree442, codonfilter443, tree443, codonfilter444, tree444, codonfilter445, tree445, codonfilter446, tree446, codonfilter447, tree447, codonfilter448, tree448, codonfilter449, tree449, codonfilter450, tree450, codonfilter451, tree451, codonfilter452, tree452, codonfilter453, tree453, codonfilter454, tree454, codonfilter455, tree455, codonfilter456, tree456, codonfilter457, tree457, codonfilter458, tree458, codonfilter459, tree459, codonfilter460, tree460, codonfilter461, tree461, codonfilter462, tree462, codonfilter463, tree463, codonfilter464, tree464, codonfilter465, tree465, codonfilter466, tree466, codonfilter467, tree467, codonfilter468, tree468, codonfilter469, tree469, codonfilter470, tree470, codonfilter471, tree471, codonfilter472, tree472, codonfilter473, tree473, codonfilter474, tree474, codonfilter475, tree475, codonfilter476, tree476, codonfilter477, tree477, codonfilter478, tree478, codonfilter479, tree479, codonfilter480, tree480, codonfilter481, tree481, codonfilter482, tree482, codonfilter483, tree483, codonfilter484, tree484, codonfilter485, tree485, codonfilter486, tree486, codonfilter487, tree487, codonfilter488, tree488, codonfilter489, tree489, codonfilter490, tree490, codonfilter491, tree491, codonfilter492, tree492, codonfilter493, tree493, codonfilter494, tree494, codonfilter495, tree495, codonfilter496, tree496, codonfilter497, tree497, codonfilter498, tree498);
fprintf(stdout, "\nNow optimizing the likelihood function...\n");
Optimize(mlestimates, likelihood)
fprintf(stdout, "Completed likelihood optimization. Optimized ", mlestimates[1][1], " indpendent parameters and ", mlestimates[1][2], " shared parameters to obtain a log likelihood of ", mlestimates[1][0], ".\n");
fprintf(stdout, "Writing the results to hyphy_output.txt.\n");
fprintf("hyphy_output.txt", "Log likelihood: ", mlestimates[1][0], "\nindependent parameters (includes branch lengths): ", mlestimates[1][1], "\nshared parameters: ", mlestimates[1][2], "\nnumber of branch lengths: ", TipCount(tree) + BranchCount(tree), "\nnumber of tip nodes: ", TipCount(tree), "\nnumber of internal branches: ", BranchCount(tree), "\n",likelihood);
fprintf(stdout, "Completed HYPHY script hyphy_cmds.bf.\n");