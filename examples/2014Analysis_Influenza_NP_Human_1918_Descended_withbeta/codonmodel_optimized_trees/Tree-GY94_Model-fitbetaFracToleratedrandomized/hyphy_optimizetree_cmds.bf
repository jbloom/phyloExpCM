INTEGRATION_PRECISION_FACTOR = 5.0e-6;
END_OF_FILE = 0;
LIKELIHOOD_FUNCTION_OUTPUT = 5;
ACCEPT_BRANCH_LENGTHS = 1;
global mu1 := 1.0;
global mu2 := 1.0;
global mu3 := 1.0;
global mu4 := 1.0;
global mu5 := 1.0;
global mu6 := 1.0;
global mu7 := 1.0;
global mu8 := 1.0;
global mu9 := 1.0;
global mu10 := 1.0;
global mu11 := 1.0;
global mu12 := 1.0;
global mu13 := 1.0;
global mu14 := 1.0;
global mu15 := 1.0;
global mu16 := 1.0;
global mu17 := 1.0;
global mu18 := 1.0;
global mu19 := 1.0;
global mu20 := 1.0;
global mu21 := 1.0;
global mu22 := 1.0;
global mu23 := 1.0;
global mu24 := 1.0;
global mu25 := 1.0;
global mu26 := 1.0;
global mu27 := 1.0;
global mu28 := 1.0;
global mu29 := 1.0;
global mu30 := 1.0;
global mu31 := 1.0;
global mu32 := 1.0;
global mu33 := 1.0;
global mu34 := 1.0;
global mu35 := 1.0;
global mu36 := 1.0;
global mu37 := 1.0;
global mu38 := 1.0;
global mu39 := 1.0;
global mu40 := 1.0;
global mu41 := 1.0;
global mu42 := 1.0;
global mu43 := 1.0;
global mu44 := 1.0;
global mu45 := 1.0;
global mu46 := 1.0;
global mu47 := 1.0;
global mu48 := 1.0;
global mu49 := 1.0;
global mu50 := 1.0;
global mu51 := 1.0;
global mu52 := 1.0;
global mu53 := 1.0;
global mu54 := 1.0;
global mu55 := 1.0;
global mu56 := 1.0;
global mu57 := 1.0;
global mu58 := 1.0;
global mu59 := 1.0;
global mu60 := 1.0;
global mu61 := 1.0;
global mu62 := 1.0;
global mu63 := 1.0;
global mu64 := 1.0;
global mu65 := 1.0;
global mu66 := 1.0;
global mu67 := 1.0;
global mu68 := 1.0;
global mu69 := 1.0;
global mu70 := 1.0;
global mu71 := 1.0;
global mu72 := 1.0;
global mu73 := 1.0;
global mu74 := 1.0;
global mu75 := 1.0;
global mu76 := 1.0;
global mu77 := 1.0;
global mu78 := 1.0;
global mu79 := 1.0;
global mu80 := 1.0;
global mu81 := 1.0;
global mu82 := 1.0;
global mu83 := 1.0;
global mu84 := 1.0;
global mu85 := 1.0;
global mu86 := 1.0;
global mu87 := 1.0;
global mu88 := 1.0;
global mu89 := 1.0;
global mu90 := 1.0;
global mu91 := 1.0;
global mu92 := 1.0;
global mu93 := 1.0;
global mu94 := 1.0;
global mu95 := 1.0;
global mu96 := 1.0;
global mu97 := 1.0;
global mu98 := 1.0;
global mu99 := 1.0;
global mu100 := 1.0;
global mu101 := 1.0;
global mu102 := 1.0;
global mu103 := 1.0;
global mu104 := 1.0;
global mu105 := 1.0;
global mu106 := 1.0;
global mu107 := 1.0;
global mu108 := 1.0;
global mu109 := 1.0;
global mu110 := 1.0;
global mu111 := 1.0;
global mu112 := 1.0;
global mu113 := 1.0;
global mu114 := 1.0;
global mu115 := 1.0;
global mu116 := 1.0;
global mu117 := 1.0;
global mu118 := 1.0;
global mu119 := 1.0;
global mu120 := 1.0;
global mu121 := 1.0;
global mu122 := 1.0;
global mu123 := 1.0;
global mu124 := 1.0;
global mu125 := 1.0;
global mu126 := 1.0;
global mu127 := 1.0;
global mu128 := 1.0;
global mu129 := 1.0;
global mu130 := 1.0;
global mu131 := 1.0;
global mu132 := 1.0;
global mu133 := 1.0;
global mu134 := 1.0;
global mu135 := 1.0;
global mu136 := 1.0;
global mu137 := 1.0;
global mu138 := 1.0;
global mu139 := 1.0;
global mu140 := 1.0;
global mu141 := 1.0;
global mu142 := 1.0;
global mu143 := 1.0;
global mu144 := 1.0;
global mu145 := 1.0;
global mu146 := 1.0;
global mu147 := 1.0;
global mu148 := 1.0;
global mu149 := 1.0;
global mu150 := 1.0;
global mu151 := 1.0;
global mu152 := 1.0;
global mu153 := 1.0;
global mu154 := 1.0;
global mu155 := 1.0;
global mu156 := 1.0;
global mu157 := 1.0;
global mu158 := 1.0;
global mu159 := 1.0;
global mu160 := 1.0;
global mu161 := 1.0;
global mu162 := 1.0;
global mu163 := 1.0;
global mu164 := 1.0;
global mu165 := 1.0;
global mu166 := 1.0;
global mu167 := 1.0;
global mu168 := 1.0;
global mu169 := 1.0;
global mu170 := 1.0;
global mu171 := 1.0;
global mu172 := 1.0;
global mu173 := 1.0;
global mu174 := 1.0;
global mu175 := 1.0;
global mu176 := 1.0;
global mu177 := 1.0;
global mu178 := 1.0;
global mu179 := 1.0;
global mu180 := 1.0;
global mu181 := 1.0;
global mu182 := 1.0;
global mu183 := 1.0;
global mu184 := 1.0;
global mu185 := 1.0;
global mu186 := 1.0;
global mu187 := 1.0;
global mu188 := 1.0;
global mu189 := 1.0;
global mu190 := 1.0;
global mu191 := 1.0;
global mu192 := 1.0;
global mu193 := 1.0;
global mu194 := 1.0;
global mu195 := 1.0;
global mu196 := 1.0;
global mu197 := 1.0;
global mu198 := 1.0;
global mu199 := 1.0;
global mu200 := 1.0;
global mu201 := 1.0;
global mu202 := 1.0;
global mu203 := 1.0;
global mu204 := 1.0;
global mu205 := 1.0;
global mu206 := 1.0;
global mu207 := 1.0;
global mu208 := 1.0;
global mu209 := 1.0;
global mu210 := 1.0;
global mu211 := 1.0;
global mu212 := 1.0;
global mu213 := 1.0;
global mu214 := 1.0;
global mu215 := 1.0;
global mu216 := 1.0;
global mu217 := 1.0;
global mu218 := 1.0;
global mu219 := 1.0;
global mu220 := 1.0;
global mu221 := 1.0;
global mu222 := 1.0;
global mu223 := 1.0;
global mu224 := 1.0;
global mu225 := 1.0;
global mu226 := 1.0;
global mu227 := 1.0;
global mu228 := 1.0;
global mu229 := 1.0;
global mu230 := 1.0;
global mu231 := 1.0;
global mu232 := 1.0;
global mu233 := 1.0;
global mu234 := 1.0;
global mu235 := 1.0;
global mu236 := 1.0;
global mu237 := 1.0;
global mu238 := 1.0;
global mu239 := 1.0;
global mu240 := 1.0;
global mu241 := 1.0;
global mu242 := 1.0;
global mu243 := 1.0;
global mu244 := 1.0;
global mu245 := 1.0;
global mu246 := 1.0;
global mu247 := 1.0;
global mu248 := 1.0;
global mu249 := 1.0;
global mu250 := 1.0;
global mu251 := 1.0;
global mu252 := 1.0;
global mu253 := 1.0;
global mu254 := 1.0;
global mu255 := 1.0;
global mu256 := 1.0;
global mu257 := 1.0;
global mu258 := 1.0;
global mu259 := 1.0;
global mu260 := 1.0;
global mu261 := 1.0;
global mu262 := 1.0;
global mu263 := 1.0;
global mu264 := 1.0;
global mu265 := 1.0;
global mu266 := 1.0;
global mu267 := 1.0;
global mu268 := 1.0;
global mu269 := 1.0;
global mu270 := 1.0;
global mu271 := 1.0;
global mu272 := 1.0;
global mu273 := 1.0;
global mu274 := 1.0;
global mu275 := 1.0;
global mu276 := 1.0;
global mu277 := 1.0;
global mu278 := 1.0;
global mu279 := 1.0;
global mu280 := 1.0;
global mu281 := 1.0;
global mu282 := 1.0;
global mu283 := 1.0;
global mu284 := 1.0;
global mu285 := 1.0;
global mu286 := 1.0;
global mu287 := 1.0;
global mu288 := 1.0;
global mu289 := 1.0;
global mu290 := 1.0;
global mu291 := 1.0;
global mu292 := 1.0;
global mu293 := 1.0;
global mu294 := 1.0;
global mu295 := 1.0;
global mu296 := 1.0;
global mu297 := 1.0;
global mu298 := 1.0;
global mu299 := 1.0;
global mu300 := 1.0;
global mu301 := 1.0;
global mu302 := 1.0;
global mu303 := 1.0;
global mu304 := 1.0;
global mu305 := 1.0;
global mu306 := 1.0;
global mu307 := 1.0;
global mu308 := 1.0;
global mu309 := 1.0;
global mu310 := 1.0;
global mu311 := 1.0;
global mu312 := 1.0;
global mu313 := 1.0;
global mu314 := 1.0;
global mu315 := 1.0;
global mu316 := 1.0;
global mu317 := 1.0;
global mu318 := 1.0;
global mu319 := 1.0;
global mu320 := 1.0;
global mu321 := 1.0;
global mu322 := 1.0;
global mu323 := 1.0;
global mu324 := 1.0;
global mu325 := 1.0;
global mu326 := 1.0;
global mu327 := 1.0;
global mu328 := 1.0;
global mu329 := 1.0;
global mu330 := 1.0;
global mu331 := 1.0;
global mu332 := 1.0;
global mu333 := 1.0;
global mu334 := 1.0;
global mu335 := 1.0;
global mu336 := 1.0;
global mu337 := 1.0;
global mu338 := 1.0;
global mu339 := 1.0;
global mu340 := 1.0;
global mu341 := 1.0;
global mu342 := 1.0;
global mu343 := 1.0;
global mu344 := 1.0;
global mu345 := 1.0;
global mu346 := 1.0;
global mu347 := 1.0;
global mu348 := 1.0;
global mu349 := 1.0;
global mu350 := 1.0;
global mu351 := 1.0;
global mu352 := 1.0;
global mu353 := 1.0;
global mu354 := 1.0;
global mu355 := 1.0;
global mu356 := 1.0;
global mu357 := 1.0;
global mu358 := 1.0;
global mu359 := 1.0;
global mu360 := 1.0;
global mu361 := 1.0;
global mu362 := 1.0;
global mu363 := 1.0;
global mu364 := 1.0;
global mu365 := 1.0;
global mu366 := 1.0;
global mu367 := 1.0;
global mu368 := 1.0;
global mu369 := 1.0;
global mu370 := 1.0;
global mu371 := 1.0;
global mu372 := 1.0;
global mu373 := 1.0;
global mu374 := 1.0;
global mu375 := 1.0;
global mu376 := 1.0;
global mu377 := 1.0;
global mu378 := 1.0;
global mu379 := 1.0;
global mu380 := 1.0;
global mu381 := 1.0;
global mu382 := 1.0;
global mu383 := 1.0;
global mu384 := 1.0;
global mu385 := 1.0;
global mu386 := 1.0;
global mu387 := 1.0;
global mu388 := 1.0;
global mu389 := 1.0;
global mu390 := 1.0;
global mu391 := 1.0;
global mu392 := 1.0;
global mu393 := 1.0;
global mu394 := 1.0;
global mu395 := 1.0;
global mu396 := 1.0;
global mu397 := 1.0;
global mu398 := 1.0;
global mu399 := 1.0;
global mu400 := 1.0;
global mu401 := 1.0;
global mu402 := 1.0;
global mu403 := 1.0;
global mu404 := 1.0;
global mu405 := 1.0;
global mu406 := 1.0;
global mu407 := 1.0;
global mu408 := 1.0;
global mu409 := 1.0;
global mu410 := 1.0;
global mu411 := 1.0;
global mu412 := 1.0;
global mu413 := 1.0;
global mu414 := 1.0;
global mu415 := 1.0;
global mu416 := 1.0;
global mu417 := 1.0;
global mu418 := 1.0;
global mu419 := 1.0;
global mu420 := 1.0;
global mu421 := 1.0;
global mu422 := 1.0;
global mu423 := 1.0;
global mu424 := 1.0;
global mu425 := 1.0;
global mu426 := 1.0;
global mu427 := 1.0;
global mu428 := 1.0;
global mu429 := 1.0;
global mu430 := 1.0;
global mu431 := 1.0;
global mu432 := 1.0;
global mu433 := 1.0;
global mu434 := 1.0;
global mu435 := 1.0;
global mu436 := 1.0;
global mu437 := 1.0;
global mu438 := 1.0;
global mu439 := 1.0;
global mu440 := 1.0;
global mu441 := 1.0;
global mu442 := 1.0;
global mu443 := 1.0;
global mu444 := 1.0;
global mu445 := 1.0;
global mu446 := 1.0;
global mu447 := 1.0;
global mu448 := 1.0;
global mu449 := 1.0;
global mu450 := 1.0;
global mu451 := 1.0;
global mu452 := 1.0;
global mu453 := 1.0;
global mu454 := 1.0;
global mu455 := 1.0;
global mu456 := 1.0;
global mu457 := 1.0;
global mu458 := 1.0;
global mu459 := 1.0;
global mu460 := 1.0;
global mu461 := 1.0;
global mu462 := 1.0;
global mu463 := 1.0;
global mu464 := 1.0;
global mu465 := 1.0;
global mu466 := 1.0;
global mu467 := 1.0;
global mu468 := 1.0;
global mu469 := 1.0;
global mu470 := 1.0;
global mu471 := 1.0;
global mu472 := 1.0;
global mu473 := 1.0;
global mu474 := 1.0;
global mu475 := 1.0;
global mu476 := 1.0;
global mu477 := 1.0;
global mu478 := 1.0;
global mu479 := 1.0;
global mu480 := 1.0;
global mu481 := 1.0;
global mu482 := 1.0;
global mu483 := 1.0;
global mu484 := 1.0;
global mu485 := 1.0;
global mu486 := 1.0;
global mu487 := 1.0;
global mu488 := 1.0;
global mu489 := 1.0;
global mu490 := 1.0;
global mu491 := 1.0;
global mu492 := 1.0;
global mu493 := 1.0;
global mu494 := 1.0;
global mu495 := 1.0;
global mu496 := 1.0;
global mu497 := 1.0;
global mu498 := 1.0;
global RCG := 0.019;
global RAC := 0.092;
global RCA := 0.092;
global RAT := 0.03;
global RAG := 0.235;
global beta = 1.0;
beta :> 0.001;
beta :< 1000.0;
#include "/home/jbloom/.local/lib/python2.7/site-packages/phyloExpCM/data//NTsCodonsAAs.ibf";
#include "/home/jbloom/phyloExpCM/examples/2014Analysis_Influenza_NP_Human_1918_Descended_withbeta/codonmodel_optimized_trees/Tree-GY94_Model-fitbetaFracToleratedrandomized/Prxy.ibf";
fprintf(stdout, "Running HYPHY script hyphy_optimizetree_cmds.bf...\n");
DataSet data = ReadDataFile("coded_fastafile.fasta");
assert(data.sites % 3 == 0, "Sequence lengths not multiples of 3");
totalcodons = data.sites $ 3;
fprintf(stdout, "Read from coded_fastafile.fasta a set of ", data.species, " sequences consisting of ", data.sites, " nucleotides corresponding to ", totalcodons, " codons each.\n");
fprintf(stdout, "The analysis will include the following 498 codon positions (sequential numbering starting with 1):\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498\n");
assert(totalcodons >= 498, "Largest included site exceeds sequence length");
fprintf(stdout, "Reading tree string from coded_treefile.newick.\n");
fscanf("coded_treefile.newick", String, treestring);
fprintf(stdout, "Using the substitution model defined in Prxy.ibf...\n");
fprintf(stdout, "Now constructing the likelihood function...\n");
DataSetFilter codonfilter1 = CreateFilter(data, 3, "0-2", "", "TAA,TAG,TGA");
assert(data.species == codonfilter1.species, "species number mismatch");
assert(1 == codonfilter1.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter1");
UseModel(P1xy);
ExecuteCommands("Tree tree = treestring;");
assert(data.species == TipCount(tree), "Number of species and number of tips differ");
DataSetFilter codonfilter2 = CreateFilter(data, 3, "3-5", "", "TAA,TAG,TGA");
assert(data.species == codonfilter2.species, "species number mismatch");
assert(1 == codonfilter2.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter2");
UseModel(P2xy);
ExecuteCommands("Tree tree2 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree2, tree);
assert(data.species == TipCount(tree2), "Number of species and number of tips differ");
DataSetFilter codonfilter3 = CreateFilter(data, 3, "6-8", "", "TAA,TAG,TGA");
assert(data.species == codonfilter3.species, "species number mismatch");
assert(1 == codonfilter3.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter3");
UseModel(P3xy);
ExecuteCommands("Tree tree3 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree3, tree);
assert(data.species == TipCount(tree3), "Number of species and number of tips differ");
DataSetFilter codonfilter4 = CreateFilter(data, 3, "9-11", "", "TAA,TAG,TGA");
assert(data.species == codonfilter4.species, "species number mismatch");
assert(1 == codonfilter4.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter4");
UseModel(P4xy);
ExecuteCommands("Tree tree4 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree4, tree);
assert(data.species == TipCount(tree4), "Number of species and number of tips differ");
DataSetFilter codonfilter5 = CreateFilter(data, 3, "12-14", "", "TAA,TAG,TGA");
assert(data.species == codonfilter5.species, "species number mismatch");
assert(1 == codonfilter5.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter5");
UseModel(P5xy);
ExecuteCommands("Tree tree5 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree5, tree);
assert(data.species == TipCount(tree5), "Number of species and number of tips differ");
DataSetFilter codonfilter6 = CreateFilter(data, 3, "15-17", "", "TAA,TAG,TGA");
assert(data.species == codonfilter6.species, "species number mismatch");
assert(1 == codonfilter6.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter6");
UseModel(P6xy);
ExecuteCommands("Tree tree6 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree6, tree);
assert(data.species == TipCount(tree6), "Number of species and number of tips differ");
DataSetFilter codonfilter7 = CreateFilter(data, 3, "18-20", "", "TAA,TAG,TGA");
assert(data.species == codonfilter7.species, "species number mismatch");
assert(1 == codonfilter7.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter7");
UseModel(P7xy);
ExecuteCommands("Tree tree7 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree7, tree);
assert(data.species == TipCount(tree7), "Number of species and number of tips differ");
DataSetFilter codonfilter8 = CreateFilter(data, 3, "21-23", "", "TAA,TAG,TGA");
assert(data.species == codonfilter8.species, "species number mismatch");
assert(1 == codonfilter8.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter8");
UseModel(P8xy);
ExecuteCommands("Tree tree8 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree8, tree);
assert(data.species == TipCount(tree8), "Number of species and number of tips differ");
DataSetFilter codonfilter9 = CreateFilter(data, 3, "24-26", "", "TAA,TAG,TGA");
assert(data.species == codonfilter9.species, "species number mismatch");
assert(1 == codonfilter9.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter9");
UseModel(P9xy);
ExecuteCommands("Tree tree9 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree9, tree);
assert(data.species == TipCount(tree9), "Number of species and number of tips differ");
DataSetFilter codonfilter10 = CreateFilter(data, 3, "27-29", "", "TAA,TAG,TGA");
assert(data.species == codonfilter10.species, "species number mismatch");
assert(1 == codonfilter10.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter10");
UseModel(P10xy);
ExecuteCommands("Tree tree10 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree10, tree);
assert(data.species == TipCount(tree10), "Number of species and number of tips differ");
DataSetFilter codonfilter11 = CreateFilter(data, 3, "30-32", "", "TAA,TAG,TGA");
assert(data.species == codonfilter11.species, "species number mismatch");
assert(1 == codonfilter11.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter11");
UseModel(P11xy);
ExecuteCommands("Tree tree11 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree11, tree);
assert(data.species == TipCount(tree11), "Number of species and number of tips differ");
DataSetFilter codonfilter12 = CreateFilter(data, 3, "33-35", "", "TAA,TAG,TGA");
assert(data.species == codonfilter12.species, "species number mismatch");
assert(1 == codonfilter12.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter12");
UseModel(P12xy);
ExecuteCommands("Tree tree12 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree12, tree);
assert(data.species == TipCount(tree12), "Number of species and number of tips differ");
DataSetFilter codonfilter13 = CreateFilter(data, 3, "36-38", "", "TAA,TAG,TGA");
assert(data.species == codonfilter13.species, "species number mismatch");
assert(1 == codonfilter13.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter13");
UseModel(P13xy);
ExecuteCommands("Tree tree13 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree13, tree);
assert(data.species == TipCount(tree13), "Number of species and number of tips differ");
DataSetFilter codonfilter14 = CreateFilter(data, 3, "39-41", "", "TAA,TAG,TGA");
assert(data.species == codonfilter14.species, "species number mismatch");
assert(1 == codonfilter14.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter14");
UseModel(P14xy);
ExecuteCommands("Tree tree14 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree14, tree);
assert(data.species == TipCount(tree14), "Number of species and number of tips differ");
DataSetFilter codonfilter15 = CreateFilter(data, 3, "42-44", "", "TAA,TAG,TGA");
assert(data.species == codonfilter15.species, "species number mismatch");
assert(1 == codonfilter15.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter15");
UseModel(P15xy);
ExecuteCommands("Tree tree15 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree15, tree);
assert(data.species == TipCount(tree15), "Number of species and number of tips differ");
DataSetFilter codonfilter16 = CreateFilter(data, 3, "45-47", "", "TAA,TAG,TGA");
assert(data.species == codonfilter16.species, "species number mismatch");
assert(1 == codonfilter16.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter16");
UseModel(P16xy);
ExecuteCommands("Tree tree16 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree16, tree);
assert(data.species == TipCount(tree16), "Number of species and number of tips differ");
DataSetFilter codonfilter17 = CreateFilter(data, 3, "48-50", "", "TAA,TAG,TGA");
assert(data.species == codonfilter17.species, "species number mismatch");
assert(1 == codonfilter17.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter17");
UseModel(P17xy);
ExecuteCommands("Tree tree17 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree17, tree);
assert(data.species == TipCount(tree17), "Number of species and number of tips differ");
DataSetFilter codonfilter18 = CreateFilter(data, 3, "51-53", "", "TAA,TAG,TGA");
assert(data.species == codonfilter18.species, "species number mismatch");
assert(1 == codonfilter18.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter18");
UseModel(P18xy);
ExecuteCommands("Tree tree18 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree18, tree);
assert(data.species == TipCount(tree18), "Number of species and number of tips differ");
DataSetFilter codonfilter19 = CreateFilter(data, 3, "54-56", "", "TAA,TAG,TGA");
assert(data.species == codonfilter19.species, "species number mismatch");
assert(1 == codonfilter19.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter19");
UseModel(P19xy);
ExecuteCommands("Tree tree19 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree19, tree);
assert(data.species == TipCount(tree19), "Number of species and number of tips differ");
DataSetFilter codonfilter20 = CreateFilter(data, 3, "57-59", "", "TAA,TAG,TGA");
assert(data.species == codonfilter20.species, "species number mismatch");
assert(1 == codonfilter20.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter20");
UseModel(P20xy);
ExecuteCommands("Tree tree20 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree20, tree);
assert(data.species == TipCount(tree20), "Number of species and number of tips differ");
DataSetFilter codonfilter21 = CreateFilter(data, 3, "60-62", "", "TAA,TAG,TGA");
assert(data.species == codonfilter21.species, "species number mismatch");
assert(1 == codonfilter21.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter21");
UseModel(P21xy);
ExecuteCommands("Tree tree21 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree21, tree);
assert(data.species == TipCount(tree21), "Number of species and number of tips differ");
DataSetFilter codonfilter22 = CreateFilter(data, 3, "63-65", "", "TAA,TAG,TGA");
assert(data.species == codonfilter22.species, "species number mismatch");
assert(1 == codonfilter22.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter22");
UseModel(P22xy);
ExecuteCommands("Tree tree22 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree22, tree);
assert(data.species == TipCount(tree22), "Number of species and number of tips differ");
DataSetFilter codonfilter23 = CreateFilter(data, 3, "66-68", "", "TAA,TAG,TGA");
assert(data.species == codonfilter23.species, "species number mismatch");
assert(1 == codonfilter23.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter23");
UseModel(P23xy);
ExecuteCommands("Tree tree23 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree23, tree);
assert(data.species == TipCount(tree23), "Number of species and number of tips differ");
DataSetFilter codonfilter24 = CreateFilter(data, 3, "69-71", "", "TAA,TAG,TGA");
assert(data.species == codonfilter24.species, "species number mismatch");
assert(1 == codonfilter24.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter24");
UseModel(P24xy);
ExecuteCommands("Tree tree24 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree24, tree);
assert(data.species == TipCount(tree24), "Number of species and number of tips differ");
DataSetFilter codonfilter25 = CreateFilter(data, 3, "72-74", "", "TAA,TAG,TGA");
assert(data.species == codonfilter25.species, "species number mismatch");
assert(1 == codonfilter25.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter25");
UseModel(P25xy);
ExecuteCommands("Tree tree25 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree25, tree);
assert(data.species == TipCount(tree25), "Number of species and number of tips differ");
DataSetFilter codonfilter26 = CreateFilter(data, 3, "75-77", "", "TAA,TAG,TGA");
assert(data.species == codonfilter26.species, "species number mismatch");
assert(1 == codonfilter26.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter26");
UseModel(P26xy);
ExecuteCommands("Tree tree26 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree26, tree);
assert(data.species == TipCount(tree26), "Number of species and number of tips differ");
DataSetFilter codonfilter27 = CreateFilter(data, 3, "78-80", "", "TAA,TAG,TGA");
assert(data.species == codonfilter27.species, "species number mismatch");
assert(1 == codonfilter27.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter27");
UseModel(P27xy);
ExecuteCommands("Tree tree27 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree27, tree);
assert(data.species == TipCount(tree27), "Number of species and number of tips differ");
DataSetFilter codonfilter28 = CreateFilter(data, 3, "81-83", "", "TAA,TAG,TGA");
assert(data.species == codonfilter28.species, "species number mismatch");
assert(1 == codonfilter28.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter28");
UseModel(P28xy);
ExecuteCommands("Tree tree28 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree28, tree);
assert(data.species == TipCount(tree28), "Number of species and number of tips differ");
DataSetFilter codonfilter29 = CreateFilter(data, 3, "84-86", "", "TAA,TAG,TGA");
assert(data.species == codonfilter29.species, "species number mismatch");
assert(1 == codonfilter29.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter29");
UseModel(P29xy);
ExecuteCommands("Tree tree29 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree29, tree);
assert(data.species == TipCount(tree29), "Number of species and number of tips differ");
DataSetFilter codonfilter30 = CreateFilter(data, 3, "87-89", "", "TAA,TAG,TGA");
assert(data.species == codonfilter30.species, "species number mismatch");
assert(1 == codonfilter30.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter30");
UseModel(P30xy);
ExecuteCommands("Tree tree30 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree30, tree);
assert(data.species == TipCount(tree30), "Number of species and number of tips differ");
DataSetFilter codonfilter31 = CreateFilter(data, 3, "90-92", "", "TAA,TAG,TGA");
assert(data.species == codonfilter31.species, "species number mismatch");
assert(1 == codonfilter31.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter31");
UseModel(P31xy);
ExecuteCommands("Tree tree31 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree31, tree);
assert(data.species == TipCount(tree31), "Number of species and number of tips differ");
DataSetFilter codonfilter32 = CreateFilter(data, 3, "93-95", "", "TAA,TAG,TGA");
assert(data.species == codonfilter32.species, "species number mismatch");
assert(1 == codonfilter32.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter32");
UseModel(P32xy);
ExecuteCommands("Tree tree32 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree32, tree);
assert(data.species == TipCount(tree32), "Number of species and number of tips differ");
DataSetFilter codonfilter33 = CreateFilter(data, 3, "96-98", "", "TAA,TAG,TGA");
assert(data.species == codonfilter33.species, "species number mismatch");
assert(1 == codonfilter33.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter33");
UseModel(P33xy);
ExecuteCommands("Tree tree33 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree33, tree);
assert(data.species == TipCount(tree33), "Number of species and number of tips differ");
DataSetFilter codonfilter34 = CreateFilter(data, 3, "99-101", "", "TAA,TAG,TGA");
assert(data.species == codonfilter34.species, "species number mismatch");
assert(1 == codonfilter34.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter34");
UseModel(P34xy);
ExecuteCommands("Tree tree34 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree34, tree);
assert(data.species == TipCount(tree34), "Number of species and number of tips differ");
DataSetFilter codonfilter35 = CreateFilter(data, 3, "102-104", "", "TAA,TAG,TGA");
assert(data.species == codonfilter35.species, "species number mismatch");
assert(1 == codonfilter35.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter35");
UseModel(P35xy);
ExecuteCommands("Tree tree35 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree35, tree);
assert(data.species == TipCount(tree35), "Number of species and number of tips differ");
DataSetFilter codonfilter36 = CreateFilter(data, 3, "105-107", "", "TAA,TAG,TGA");
assert(data.species == codonfilter36.species, "species number mismatch");
assert(1 == codonfilter36.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter36");
UseModel(P36xy);
ExecuteCommands("Tree tree36 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree36, tree);
assert(data.species == TipCount(tree36), "Number of species and number of tips differ");
DataSetFilter codonfilter37 = CreateFilter(data, 3, "108-110", "", "TAA,TAG,TGA");
assert(data.species == codonfilter37.species, "species number mismatch");
assert(1 == codonfilter37.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter37");
UseModel(P37xy);
ExecuteCommands("Tree tree37 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree37, tree);
assert(data.species == TipCount(tree37), "Number of species and number of tips differ");
DataSetFilter codonfilter38 = CreateFilter(data, 3, "111-113", "", "TAA,TAG,TGA");
assert(data.species == codonfilter38.species, "species number mismatch");
assert(1 == codonfilter38.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter38");
UseModel(P38xy);
ExecuteCommands("Tree tree38 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree38, tree);
assert(data.species == TipCount(tree38), "Number of species and number of tips differ");
DataSetFilter codonfilter39 = CreateFilter(data, 3, "114-116", "", "TAA,TAG,TGA");
assert(data.species == codonfilter39.species, "species number mismatch");
assert(1 == codonfilter39.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter39");
UseModel(P39xy);
ExecuteCommands("Tree tree39 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree39, tree);
assert(data.species == TipCount(tree39), "Number of species and number of tips differ");
DataSetFilter codonfilter40 = CreateFilter(data, 3, "117-119", "", "TAA,TAG,TGA");
assert(data.species == codonfilter40.species, "species number mismatch");
assert(1 == codonfilter40.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter40");
UseModel(P40xy);
ExecuteCommands("Tree tree40 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree40, tree);
assert(data.species == TipCount(tree40), "Number of species and number of tips differ");
DataSetFilter codonfilter41 = CreateFilter(data, 3, "120-122", "", "TAA,TAG,TGA");
assert(data.species == codonfilter41.species, "species number mismatch");
assert(1 == codonfilter41.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter41");
UseModel(P41xy);
ExecuteCommands("Tree tree41 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree41, tree);
assert(data.species == TipCount(tree41), "Number of species and number of tips differ");
DataSetFilter codonfilter42 = CreateFilter(data, 3, "123-125", "", "TAA,TAG,TGA");
assert(data.species == codonfilter42.species, "species number mismatch");
assert(1 == codonfilter42.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter42");
UseModel(P42xy);
ExecuteCommands("Tree tree42 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree42, tree);
assert(data.species == TipCount(tree42), "Number of species and number of tips differ");
DataSetFilter codonfilter43 = CreateFilter(data, 3, "126-128", "", "TAA,TAG,TGA");
assert(data.species == codonfilter43.species, "species number mismatch");
assert(1 == codonfilter43.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter43");
UseModel(P43xy);
ExecuteCommands("Tree tree43 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree43, tree);
assert(data.species == TipCount(tree43), "Number of species and number of tips differ");
DataSetFilter codonfilter44 = CreateFilter(data, 3, "129-131", "", "TAA,TAG,TGA");
assert(data.species == codonfilter44.species, "species number mismatch");
assert(1 == codonfilter44.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter44");
UseModel(P44xy);
ExecuteCommands("Tree tree44 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree44, tree);
assert(data.species == TipCount(tree44), "Number of species and number of tips differ");
DataSetFilter codonfilter45 = CreateFilter(data, 3, "132-134", "", "TAA,TAG,TGA");
assert(data.species == codonfilter45.species, "species number mismatch");
assert(1 == codonfilter45.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter45");
UseModel(P45xy);
ExecuteCommands("Tree tree45 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree45, tree);
assert(data.species == TipCount(tree45), "Number of species and number of tips differ");
DataSetFilter codonfilter46 = CreateFilter(data, 3, "135-137", "", "TAA,TAG,TGA");
assert(data.species == codonfilter46.species, "species number mismatch");
assert(1 == codonfilter46.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter46");
UseModel(P46xy);
ExecuteCommands("Tree tree46 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree46, tree);
assert(data.species == TipCount(tree46), "Number of species and number of tips differ");
DataSetFilter codonfilter47 = CreateFilter(data, 3, "138-140", "", "TAA,TAG,TGA");
assert(data.species == codonfilter47.species, "species number mismatch");
assert(1 == codonfilter47.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter47");
UseModel(P47xy);
ExecuteCommands("Tree tree47 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree47, tree);
assert(data.species == TipCount(tree47), "Number of species and number of tips differ");
DataSetFilter codonfilter48 = CreateFilter(data, 3, "141-143", "", "TAA,TAG,TGA");
assert(data.species == codonfilter48.species, "species number mismatch");
assert(1 == codonfilter48.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter48");
UseModel(P48xy);
ExecuteCommands("Tree tree48 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree48, tree);
assert(data.species == TipCount(tree48), "Number of species and number of tips differ");
DataSetFilter codonfilter49 = CreateFilter(data, 3, "144-146", "", "TAA,TAG,TGA");
assert(data.species == codonfilter49.species, "species number mismatch");
assert(1 == codonfilter49.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter49");
UseModel(P49xy);
ExecuteCommands("Tree tree49 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree49, tree);
assert(data.species == TipCount(tree49), "Number of species and number of tips differ");
DataSetFilter codonfilter50 = CreateFilter(data, 3, "147-149", "", "TAA,TAG,TGA");
assert(data.species == codonfilter50.species, "species number mismatch");
assert(1 == codonfilter50.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter50");
UseModel(P50xy);
ExecuteCommands("Tree tree50 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree50, tree);
assert(data.species == TipCount(tree50), "Number of species and number of tips differ");
DataSetFilter codonfilter51 = CreateFilter(data, 3, "150-152", "", "TAA,TAG,TGA");
assert(data.species == codonfilter51.species, "species number mismatch");
assert(1 == codonfilter51.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter51");
UseModel(P51xy);
ExecuteCommands("Tree tree51 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree51, tree);
assert(data.species == TipCount(tree51), "Number of species and number of tips differ");
DataSetFilter codonfilter52 = CreateFilter(data, 3, "153-155", "", "TAA,TAG,TGA");
assert(data.species == codonfilter52.species, "species number mismatch");
assert(1 == codonfilter52.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter52");
UseModel(P52xy);
ExecuteCommands("Tree tree52 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree52, tree);
assert(data.species == TipCount(tree52), "Number of species and number of tips differ");
DataSetFilter codonfilter53 = CreateFilter(data, 3, "156-158", "", "TAA,TAG,TGA");
assert(data.species == codonfilter53.species, "species number mismatch");
assert(1 == codonfilter53.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter53");
UseModel(P53xy);
ExecuteCommands("Tree tree53 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree53, tree);
assert(data.species == TipCount(tree53), "Number of species and number of tips differ");
DataSetFilter codonfilter54 = CreateFilter(data, 3, "159-161", "", "TAA,TAG,TGA");
assert(data.species == codonfilter54.species, "species number mismatch");
assert(1 == codonfilter54.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter54");
UseModel(P54xy);
ExecuteCommands("Tree tree54 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree54, tree);
assert(data.species == TipCount(tree54), "Number of species and number of tips differ");
DataSetFilter codonfilter55 = CreateFilter(data, 3, "162-164", "", "TAA,TAG,TGA");
assert(data.species == codonfilter55.species, "species number mismatch");
assert(1 == codonfilter55.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter55");
UseModel(P55xy);
ExecuteCommands("Tree tree55 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree55, tree);
assert(data.species == TipCount(tree55), "Number of species and number of tips differ");
DataSetFilter codonfilter56 = CreateFilter(data, 3, "165-167", "", "TAA,TAG,TGA");
assert(data.species == codonfilter56.species, "species number mismatch");
assert(1 == codonfilter56.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter56");
UseModel(P56xy);
ExecuteCommands("Tree tree56 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree56, tree);
assert(data.species == TipCount(tree56), "Number of species and number of tips differ");
DataSetFilter codonfilter57 = CreateFilter(data, 3, "168-170", "", "TAA,TAG,TGA");
assert(data.species == codonfilter57.species, "species number mismatch");
assert(1 == codonfilter57.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter57");
UseModel(P57xy);
ExecuteCommands("Tree tree57 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree57, tree);
assert(data.species == TipCount(tree57), "Number of species and number of tips differ");
DataSetFilter codonfilter58 = CreateFilter(data, 3, "171-173", "", "TAA,TAG,TGA");
assert(data.species == codonfilter58.species, "species number mismatch");
assert(1 == codonfilter58.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter58");
UseModel(P58xy);
ExecuteCommands("Tree tree58 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree58, tree);
assert(data.species == TipCount(tree58), "Number of species and number of tips differ");
DataSetFilter codonfilter59 = CreateFilter(data, 3, "174-176", "", "TAA,TAG,TGA");
assert(data.species == codonfilter59.species, "species number mismatch");
assert(1 == codonfilter59.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter59");
UseModel(P59xy);
ExecuteCommands("Tree tree59 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree59, tree);
assert(data.species == TipCount(tree59), "Number of species and number of tips differ");
DataSetFilter codonfilter60 = CreateFilter(data, 3, "177-179", "", "TAA,TAG,TGA");
assert(data.species == codonfilter60.species, "species number mismatch");
assert(1 == codonfilter60.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter60");
UseModel(P60xy);
ExecuteCommands("Tree tree60 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree60, tree);
assert(data.species == TipCount(tree60), "Number of species and number of tips differ");
DataSetFilter codonfilter61 = CreateFilter(data, 3, "180-182", "", "TAA,TAG,TGA");
assert(data.species == codonfilter61.species, "species number mismatch");
assert(1 == codonfilter61.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter61");
UseModel(P61xy);
ExecuteCommands("Tree tree61 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree61, tree);
assert(data.species == TipCount(tree61), "Number of species and number of tips differ");
DataSetFilter codonfilter62 = CreateFilter(data, 3, "183-185", "", "TAA,TAG,TGA");
assert(data.species == codonfilter62.species, "species number mismatch");
assert(1 == codonfilter62.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter62");
UseModel(P62xy);
ExecuteCommands("Tree tree62 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree62, tree);
assert(data.species == TipCount(tree62), "Number of species and number of tips differ");
DataSetFilter codonfilter63 = CreateFilter(data, 3, "186-188", "", "TAA,TAG,TGA");
assert(data.species == codonfilter63.species, "species number mismatch");
assert(1 == codonfilter63.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter63");
UseModel(P63xy);
ExecuteCommands("Tree tree63 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree63, tree);
assert(data.species == TipCount(tree63), "Number of species and number of tips differ");
DataSetFilter codonfilter64 = CreateFilter(data, 3, "189-191", "", "TAA,TAG,TGA");
assert(data.species == codonfilter64.species, "species number mismatch");
assert(1 == codonfilter64.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter64");
UseModel(P64xy);
ExecuteCommands("Tree tree64 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree64, tree);
assert(data.species == TipCount(tree64), "Number of species and number of tips differ");
DataSetFilter codonfilter65 = CreateFilter(data, 3, "192-194", "", "TAA,TAG,TGA");
assert(data.species == codonfilter65.species, "species number mismatch");
assert(1 == codonfilter65.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter65");
UseModel(P65xy);
ExecuteCommands("Tree tree65 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree65, tree);
assert(data.species == TipCount(tree65), "Number of species and number of tips differ");
DataSetFilter codonfilter66 = CreateFilter(data, 3, "195-197", "", "TAA,TAG,TGA");
assert(data.species == codonfilter66.species, "species number mismatch");
assert(1 == codonfilter66.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter66");
UseModel(P66xy);
ExecuteCommands("Tree tree66 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree66, tree);
assert(data.species == TipCount(tree66), "Number of species and number of tips differ");
DataSetFilter codonfilter67 = CreateFilter(data, 3, "198-200", "", "TAA,TAG,TGA");
assert(data.species == codonfilter67.species, "species number mismatch");
assert(1 == codonfilter67.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter67");
UseModel(P67xy);
ExecuteCommands("Tree tree67 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree67, tree);
assert(data.species == TipCount(tree67), "Number of species and number of tips differ");
DataSetFilter codonfilter68 = CreateFilter(data, 3, "201-203", "", "TAA,TAG,TGA");
assert(data.species == codonfilter68.species, "species number mismatch");
assert(1 == codonfilter68.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter68");
UseModel(P68xy);
ExecuteCommands("Tree tree68 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree68, tree);
assert(data.species == TipCount(tree68), "Number of species and number of tips differ");
DataSetFilter codonfilter69 = CreateFilter(data, 3, "204-206", "", "TAA,TAG,TGA");
assert(data.species == codonfilter69.species, "species number mismatch");
assert(1 == codonfilter69.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter69");
UseModel(P69xy);
ExecuteCommands("Tree tree69 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree69, tree);
assert(data.species == TipCount(tree69), "Number of species and number of tips differ");
DataSetFilter codonfilter70 = CreateFilter(data, 3, "207-209", "", "TAA,TAG,TGA");
assert(data.species == codonfilter70.species, "species number mismatch");
assert(1 == codonfilter70.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter70");
UseModel(P70xy);
ExecuteCommands("Tree tree70 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree70, tree);
assert(data.species == TipCount(tree70), "Number of species and number of tips differ");
DataSetFilter codonfilter71 = CreateFilter(data, 3, "210-212", "", "TAA,TAG,TGA");
assert(data.species == codonfilter71.species, "species number mismatch");
assert(1 == codonfilter71.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter71");
UseModel(P71xy);
ExecuteCommands("Tree tree71 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree71, tree);
assert(data.species == TipCount(tree71), "Number of species and number of tips differ");
DataSetFilter codonfilter72 = CreateFilter(data, 3, "213-215", "", "TAA,TAG,TGA");
assert(data.species == codonfilter72.species, "species number mismatch");
assert(1 == codonfilter72.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter72");
UseModel(P72xy);
ExecuteCommands("Tree tree72 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree72, tree);
assert(data.species == TipCount(tree72), "Number of species and number of tips differ");
DataSetFilter codonfilter73 = CreateFilter(data, 3, "216-218", "", "TAA,TAG,TGA");
assert(data.species == codonfilter73.species, "species number mismatch");
assert(1 == codonfilter73.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter73");
UseModel(P73xy);
ExecuteCommands("Tree tree73 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree73, tree);
assert(data.species == TipCount(tree73), "Number of species and number of tips differ");
DataSetFilter codonfilter74 = CreateFilter(data, 3, "219-221", "", "TAA,TAG,TGA");
assert(data.species == codonfilter74.species, "species number mismatch");
assert(1 == codonfilter74.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter74");
UseModel(P74xy);
ExecuteCommands("Tree tree74 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree74, tree);
assert(data.species == TipCount(tree74), "Number of species and number of tips differ");
DataSetFilter codonfilter75 = CreateFilter(data, 3, "222-224", "", "TAA,TAG,TGA");
assert(data.species == codonfilter75.species, "species number mismatch");
assert(1 == codonfilter75.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter75");
UseModel(P75xy);
ExecuteCommands("Tree tree75 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree75, tree);
assert(data.species == TipCount(tree75), "Number of species and number of tips differ");
DataSetFilter codonfilter76 = CreateFilter(data, 3, "225-227", "", "TAA,TAG,TGA");
assert(data.species == codonfilter76.species, "species number mismatch");
assert(1 == codonfilter76.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter76");
UseModel(P76xy);
ExecuteCommands("Tree tree76 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree76, tree);
assert(data.species == TipCount(tree76), "Number of species and number of tips differ");
DataSetFilter codonfilter77 = CreateFilter(data, 3, "228-230", "", "TAA,TAG,TGA");
assert(data.species == codonfilter77.species, "species number mismatch");
assert(1 == codonfilter77.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter77");
UseModel(P77xy);
ExecuteCommands("Tree tree77 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree77, tree);
assert(data.species == TipCount(tree77), "Number of species and number of tips differ");
DataSetFilter codonfilter78 = CreateFilter(data, 3, "231-233", "", "TAA,TAG,TGA");
assert(data.species == codonfilter78.species, "species number mismatch");
assert(1 == codonfilter78.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter78");
UseModel(P78xy);
ExecuteCommands("Tree tree78 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree78, tree);
assert(data.species == TipCount(tree78), "Number of species and number of tips differ");
DataSetFilter codonfilter79 = CreateFilter(data, 3, "234-236", "", "TAA,TAG,TGA");
assert(data.species == codonfilter79.species, "species number mismatch");
assert(1 == codonfilter79.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter79");
UseModel(P79xy);
ExecuteCommands("Tree tree79 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree79, tree);
assert(data.species == TipCount(tree79), "Number of species and number of tips differ");
DataSetFilter codonfilter80 = CreateFilter(data, 3, "237-239", "", "TAA,TAG,TGA");
assert(data.species == codonfilter80.species, "species number mismatch");
assert(1 == codonfilter80.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter80");
UseModel(P80xy);
ExecuteCommands("Tree tree80 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree80, tree);
assert(data.species == TipCount(tree80), "Number of species and number of tips differ");
DataSetFilter codonfilter81 = CreateFilter(data, 3, "240-242", "", "TAA,TAG,TGA");
assert(data.species == codonfilter81.species, "species number mismatch");
assert(1 == codonfilter81.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter81");
UseModel(P81xy);
ExecuteCommands("Tree tree81 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree81, tree);
assert(data.species == TipCount(tree81), "Number of species and number of tips differ");
DataSetFilter codonfilter82 = CreateFilter(data, 3, "243-245", "", "TAA,TAG,TGA");
assert(data.species == codonfilter82.species, "species number mismatch");
assert(1 == codonfilter82.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter82");
UseModel(P82xy);
ExecuteCommands("Tree tree82 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree82, tree);
assert(data.species == TipCount(tree82), "Number of species and number of tips differ");
DataSetFilter codonfilter83 = CreateFilter(data, 3, "246-248", "", "TAA,TAG,TGA");
assert(data.species == codonfilter83.species, "species number mismatch");
assert(1 == codonfilter83.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter83");
UseModel(P83xy);
ExecuteCommands("Tree tree83 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree83, tree);
assert(data.species == TipCount(tree83), "Number of species and number of tips differ");
DataSetFilter codonfilter84 = CreateFilter(data, 3, "249-251", "", "TAA,TAG,TGA");
assert(data.species == codonfilter84.species, "species number mismatch");
assert(1 == codonfilter84.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter84");
UseModel(P84xy);
ExecuteCommands("Tree tree84 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree84, tree);
assert(data.species == TipCount(tree84), "Number of species and number of tips differ");
DataSetFilter codonfilter85 = CreateFilter(data, 3, "252-254", "", "TAA,TAG,TGA");
assert(data.species == codonfilter85.species, "species number mismatch");
assert(1 == codonfilter85.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter85");
UseModel(P85xy);
ExecuteCommands("Tree tree85 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree85, tree);
assert(data.species == TipCount(tree85), "Number of species and number of tips differ");
DataSetFilter codonfilter86 = CreateFilter(data, 3, "255-257", "", "TAA,TAG,TGA");
assert(data.species == codonfilter86.species, "species number mismatch");
assert(1 == codonfilter86.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter86");
UseModel(P86xy);
ExecuteCommands("Tree tree86 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree86, tree);
assert(data.species == TipCount(tree86), "Number of species and number of tips differ");
DataSetFilter codonfilter87 = CreateFilter(data, 3, "258-260", "", "TAA,TAG,TGA");
assert(data.species == codonfilter87.species, "species number mismatch");
assert(1 == codonfilter87.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter87");
UseModel(P87xy);
ExecuteCommands("Tree tree87 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree87, tree);
assert(data.species == TipCount(tree87), "Number of species and number of tips differ");
DataSetFilter codonfilter88 = CreateFilter(data, 3, "261-263", "", "TAA,TAG,TGA");
assert(data.species == codonfilter88.species, "species number mismatch");
assert(1 == codonfilter88.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter88");
UseModel(P88xy);
ExecuteCommands("Tree tree88 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree88, tree);
assert(data.species == TipCount(tree88), "Number of species and number of tips differ");
DataSetFilter codonfilter89 = CreateFilter(data, 3, "264-266", "", "TAA,TAG,TGA");
assert(data.species == codonfilter89.species, "species number mismatch");
assert(1 == codonfilter89.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter89");
UseModel(P89xy);
ExecuteCommands("Tree tree89 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree89, tree);
assert(data.species == TipCount(tree89), "Number of species and number of tips differ");
DataSetFilter codonfilter90 = CreateFilter(data, 3, "267-269", "", "TAA,TAG,TGA");
assert(data.species == codonfilter90.species, "species number mismatch");
assert(1 == codonfilter90.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter90");
UseModel(P90xy);
ExecuteCommands("Tree tree90 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree90, tree);
assert(data.species == TipCount(tree90), "Number of species and number of tips differ");
DataSetFilter codonfilter91 = CreateFilter(data, 3, "270-272", "", "TAA,TAG,TGA");
assert(data.species == codonfilter91.species, "species number mismatch");
assert(1 == codonfilter91.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter91");
UseModel(P91xy);
ExecuteCommands("Tree tree91 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree91, tree);
assert(data.species == TipCount(tree91), "Number of species and number of tips differ");
DataSetFilter codonfilter92 = CreateFilter(data, 3, "273-275", "", "TAA,TAG,TGA");
assert(data.species == codonfilter92.species, "species number mismatch");
assert(1 == codonfilter92.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter92");
UseModel(P92xy);
ExecuteCommands("Tree tree92 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree92, tree);
assert(data.species == TipCount(tree92), "Number of species and number of tips differ");
DataSetFilter codonfilter93 = CreateFilter(data, 3, "276-278", "", "TAA,TAG,TGA");
assert(data.species == codonfilter93.species, "species number mismatch");
assert(1 == codonfilter93.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter93");
UseModel(P93xy);
ExecuteCommands("Tree tree93 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree93, tree);
assert(data.species == TipCount(tree93), "Number of species and number of tips differ");
DataSetFilter codonfilter94 = CreateFilter(data, 3, "279-281", "", "TAA,TAG,TGA");
assert(data.species == codonfilter94.species, "species number mismatch");
assert(1 == codonfilter94.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter94");
UseModel(P94xy);
ExecuteCommands("Tree tree94 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree94, tree);
assert(data.species == TipCount(tree94), "Number of species and number of tips differ");
DataSetFilter codonfilter95 = CreateFilter(data, 3, "282-284", "", "TAA,TAG,TGA");
assert(data.species == codonfilter95.species, "species number mismatch");
assert(1 == codonfilter95.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter95");
UseModel(P95xy);
ExecuteCommands("Tree tree95 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree95, tree);
assert(data.species == TipCount(tree95), "Number of species and number of tips differ");
DataSetFilter codonfilter96 = CreateFilter(data, 3, "285-287", "", "TAA,TAG,TGA");
assert(data.species == codonfilter96.species, "species number mismatch");
assert(1 == codonfilter96.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter96");
UseModel(P96xy);
ExecuteCommands("Tree tree96 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree96, tree);
assert(data.species == TipCount(tree96), "Number of species and number of tips differ");
DataSetFilter codonfilter97 = CreateFilter(data, 3, "288-290", "", "TAA,TAG,TGA");
assert(data.species == codonfilter97.species, "species number mismatch");
assert(1 == codonfilter97.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter97");
UseModel(P97xy);
ExecuteCommands("Tree tree97 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree97, tree);
assert(data.species == TipCount(tree97), "Number of species and number of tips differ");
DataSetFilter codonfilter98 = CreateFilter(data, 3, "291-293", "", "TAA,TAG,TGA");
assert(data.species == codonfilter98.species, "species number mismatch");
assert(1 == codonfilter98.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter98");
UseModel(P98xy);
ExecuteCommands("Tree tree98 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree98, tree);
assert(data.species == TipCount(tree98), "Number of species and number of tips differ");
DataSetFilter codonfilter99 = CreateFilter(data, 3, "294-296", "", "TAA,TAG,TGA");
assert(data.species == codonfilter99.species, "species number mismatch");
assert(1 == codonfilter99.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter99");
UseModel(P99xy);
ExecuteCommands("Tree tree99 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree99, tree);
assert(data.species == TipCount(tree99), "Number of species and number of tips differ");
DataSetFilter codonfilter100 = CreateFilter(data, 3, "297-299", "", "TAA,TAG,TGA");
assert(data.species == codonfilter100.species, "species number mismatch");
assert(1 == codonfilter100.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter100");
UseModel(P100xy);
ExecuteCommands("Tree tree100 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree100, tree);
assert(data.species == TipCount(tree100), "Number of species and number of tips differ");
DataSetFilter codonfilter101 = CreateFilter(data, 3, "300-302", "", "TAA,TAG,TGA");
assert(data.species == codonfilter101.species, "species number mismatch");
assert(1 == codonfilter101.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter101");
UseModel(P101xy);
ExecuteCommands("Tree tree101 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree101, tree);
assert(data.species == TipCount(tree101), "Number of species and number of tips differ");
DataSetFilter codonfilter102 = CreateFilter(data, 3, "303-305", "", "TAA,TAG,TGA");
assert(data.species == codonfilter102.species, "species number mismatch");
assert(1 == codonfilter102.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter102");
UseModel(P102xy);
ExecuteCommands("Tree tree102 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree102, tree);
assert(data.species == TipCount(tree102), "Number of species and number of tips differ");
DataSetFilter codonfilter103 = CreateFilter(data, 3, "306-308", "", "TAA,TAG,TGA");
assert(data.species == codonfilter103.species, "species number mismatch");
assert(1 == codonfilter103.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter103");
UseModel(P103xy);
ExecuteCommands("Tree tree103 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree103, tree);
assert(data.species == TipCount(tree103), "Number of species and number of tips differ");
DataSetFilter codonfilter104 = CreateFilter(data, 3, "309-311", "", "TAA,TAG,TGA");
assert(data.species == codonfilter104.species, "species number mismatch");
assert(1 == codonfilter104.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter104");
UseModel(P104xy);
ExecuteCommands("Tree tree104 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree104, tree);
assert(data.species == TipCount(tree104), "Number of species and number of tips differ");
DataSetFilter codonfilter105 = CreateFilter(data, 3, "312-314", "", "TAA,TAG,TGA");
assert(data.species == codonfilter105.species, "species number mismatch");
assert(1 == codonfilter105.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter105");
UseModel(P105xy);
ExecuteCommands("Tree tree105 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree105, tree);
assert(data.species == TipCount(tree105), "Number of species and number of tips differ");
DataSetFilter codonfilter106 = CreateFilter(data, 3, "315-317", "", "TAA,TAG,TGA");
assert(data.species == codonfilter106.species, "species number mismatch");
assert(1 == codonfilter106.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter106");
UseModel(P106xy);
ExecuteCommands("Tree tree106 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree106, tree);
assert(data.species == TipCount(tree106), "Number of species and number of tips differ");
DataSetFilter codonfilter107 = CreateFilter(data, 3, "318-320", "", "TAA,TAG,TGA");
assert(data.species == codonfilter107.species, "species number mismatch");
assert(1 == codonfilter107.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter107");
UseModel(P107xy);
ExecuteCommands("Tree tree107 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree107, tree);
assert(data.species == TipCount(tree107), "Number of species and number of tips differ");
DataSetFilter codonfilter108 = CreateFilter(data, 3, "321-323", "", "TAA,TAG,TGA");
assert(data.species == codonfilter108.species, "species number mismatch");
assert(1 == codonfilter108.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter108");
UseModel(P108xy);
ExecuteCommands("Tree tree108 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree108, tree);
assert(data.species == TipCount(tree108), "Number of species and number of tips differ");
DataSetFilter codonfilter109 = CreateFilter(data, 3, "324-326", "", "TAA,TAG,TGA");
assert(data.species == codonfilter109.species, "species number mismatch");
assert(1 == codonfilter109.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter109");
UseModel(P109xy);
ExecuteCommands("Tree tree109 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree109, tree);
assert(data.species == TipCount(tree109), "Number of species and number of tips differ");
DataSetFilter codonfilter110 = CreateFilter(data, 3, "327-329", "", "TAA,TAG,TGA");
assert(data.species == codonfilter110.species, "species number mismatch");
assert(1 == codonfilter110.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter110");
UseModel(P110xy);
ExecuteCommands("Tree tree110 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree110, tree);
assert(data.species == TipCount(tree110), "Number of species and number of tips differ");
DataSetFilter codonfilter111 = CreateFilter(data, 3, "330-332", "", "TAA,TAG,TGA");
assert(data.species == codonfilter111.species, "species number mismatch");
assert(1 == codonfilter111.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter111");
UseModel(P111xy);
ExecuteCommands("Tree tree111 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree111, tree);
assert(data.species == TipCount(tree111), "Number of species and number of tips differ");
DataSetFilter codonfilter112 = CreateFilter(data, 3, "333-335", "", "TAA,TAG,TGA");
assert(data.species == codonfilter112.species, "species number mismatch");
assert(1 == codonfilter112.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter112");
UseModel(P112xy);
ExecuteCommands("Tree tree112 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree112, tree);
assert(data.species == TipCount(tree112), "Number of species and number of tips differ");
DataSetFilter codonfilter113 = CreateFilter(data, 3, "336-338", "", "TAA,TAG,TGA");
assert(data.species == codonfilter113.species, "species number mismatch");
assert(1 == codonfilter113.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter113");
UseModel(P113xy);
ExecuteCommands("Tree tree113 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree113, tree);
assert(data.species == TipCount(tree113), "Number of species and number of tips differ");
DataSetFilter codonfilter114 = CreateFilter(data, 3, "339-341", "", "TAA,TAG,TGA");
assert(data.species == codonfilter114.species, "species number mismatch");
assert(1 == codonfilter114.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter114");
UseModel(P114xy);
ExecuteCommands("Tree tree114 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree114, tree);
assert(data.species == TipCount(tree114), "Number of species and number of tips differ");
DataSetFilter codonfilter115 = CreateFilter(data, 3, "342-344", "", "TAA,TAG,TGA");
assert(data.species == codonfilter115.species, "species number mismatch");
assert(1 == codonfilter115.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter115");
UseModel(P115xy);
ExecuteCommands("Tree tree115 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree115, tree);
assert(data.species == TipCount(tree115), "Number of species and number of tips differ");
DataSetFilter codonfilter116 = CreateFilter(data, 3, "345-347", "", "TAA,TAG,TGA");
assert(data.species == codonfilter116.species, "species number mismatch");
assert(1 == codonfilter116.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter116");
UseModel(P116xy);
ExecuteCommands("Tree tree116 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree116, tree);
assert(data.species == TipCount(tree116), "Number of species and number of tips differ");
DataSetFilter codonfilter117 = CreateFilter(data, 3, "348-350", "", "TAA,TAG,TGA");
assert(data.species == codonfilter117.species, "species number mismatch");
assert(1 == codonfilter117.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter117");
UseModel(P117xy);
ExecuteCommands("Tree tree117 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree117, tree);
assert(data.species == TipCount(tree117), "Number of species and number of tips differ");
DataSetFilter codonfilter118 = CreateFilter(data, 3, "351-353", "", "TAA,TAG,TGA");
assert(data.species == codonfilter118.species, "species number mismatch");
assert(1 == codonfilter118.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter118");
UseModel(P118xy);
ExecuteCommands("Tree tree118 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree118, tree);
assert(data.species == TipCount(tree118), "Number of species and number of tips differ");
DataSetFilter codonfilter119 = CreateFilter(data, 3, "354-356", "", "TAA,TAG,TGA");
assert(data.species == codonfilter119.species, "species number mismatch");
assert(1 == codonfilter119.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter119");
UseModel(P119xy);
ExecuteCommands("Tree tree119 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree119, tree);
assert(data.species == TipCount(tree119), "Number of species and number of tips differ");
DataSetFilter codonfilter120 = CreateFilter(data, 3, "357-359", "", "TAA,TAG,TGA");
assert(data.species == codonfilter120.species, "species number mismatch");
assert(1 == codonfilter120.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter120");
UseModel(P120xy);
ExecuteCommands("Tree tree120 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree120, tree);
assert(data.species == TipCount(tree120), "Number of species and number of tips differ");
DataSetFilter codonfilter121 = CreateFilter(data, 3, "360-362", "", "TAA,TAG,TGA");
assert(data.species == codonfilter121.species, "species number mismatch");
assert(1 == codonfilter121.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter121");
UseModel(P121xy);
ExecuteCommands("Tree tree121 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree121, tree);
assert(data.species == TipCount(tree121), "Number of species and number of tips differ");
DataSetFilter codonfilter122 = CreateFilter(data, 3, "363-365", "", "TAA,TAG,TGA");
assert(data.species == codonfilter122.species, "species number mismatch");
assert(1 == codonfilter122.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter122");
UseModel(P122xy);
ExecuteCommands("Tree tree122 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree122, tree);
assert(data.species == TipCount(tree122), "Number of species and number of tips differ");
DataSetFilter codonfilter123 = CreateFilter(data, 3, "366-368", "", "TAA,TAG,TGA");
assert(data.species == codonfilter123.species, "species number mismatch");
assert(1 == codonfilter123.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter123");
UseModel(P123xy);
ExecuteCommands("Tree tree123 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree123, tree);
assert(data.species == TipCount(tree123), "Number of species and number of tips differ");
DataSetFilter codonfilter124 = CreateFilter(data, 3, "369-371", "", "TAA,TAG,TGA");
assert(data.species == codonfilter124.species, "species number mismatch");
assert(1 == codonfilter124.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter124");
UseModel(P124xy);
ExecuteCommands("Tree tree124 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree124, tree);
assert(data.species == TipCount(tree124), "Number of species and number of tips differ");
DataSetFilter codonfilter125 = CreateFilter(data, 3, "372-374", "", "TAA,TAG,TGA");
assert(data.species == codonfilter125.species, "species number mismatch");
assert(1 == codonfilter125.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter125");
UseModel(P125xy);
ExecuteCommands("Tree tree125 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree125, tree);
assert(data.species == TipCount(tree125), "Number of species and number of tips differ");
DataSetFilter codonfilter126 = CreateFilter(data, 3, "375-377", "", "TAA,TAG,TGA");
assert(data.species == codonfilter126.species, "species number mismatch");
assert(1 == codonfilter126.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter126");
UseModel(P126xy);
ExecuteCommands("Tree tree126 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree126, tree);
assert(data.species == TipCount(tree126), "Number of species and number of tips differ");
DataSetFilter codonfilter127 = CreateFilter(data, 3, "378-380", "", "TAA,TAG,TGA");
assert(data.species == codonfilter127.species, "species number mismatch");
assert(1 == codonfilter127.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter127");
UseModel(P127xy);
ExecuteCommands("Tree tree127 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree127, tree);
assert(data.species == TipCount(tree127), "Number of species and number of tips differ");
DataSetFilter codonfilter128 = CreateFilter(data, 3, "381-383", "", "TAA,TAG,TGA");
assert(data.species == codonfilter128.species, "species number mismatch");
assert(1 == codonfilter128.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter128");
UseModel(P128xy);
ExecuteCommands("Tree tree128 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree128, tree);
assert(data.species == TipCount(tree128), "Number of species and number of tips differ");
DataSetFilter codonfilter129 = CreateFilter(data, 3, "384-386", "", "TAA,TAG,TGA");
assert(data.species == codonfilter129.species, "species number mismatch");
assert(1 == codonfilter129.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter129");
UseModel(P129xy);
ExecuteCommands("Tree tree129 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree129, tree);
assert(data.species == TipCount(tree129), "Number of species and number of tips differ");
DataSetFilter codonfilter130 = CreateFilter(data, 3, "387-389", "", "TAA,TAG,TGA");
assert(data.species == codonfilter130.species, "species number mismatch");
assert(1 == codonfilter130.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter130");
UseModel(P130xy);
ExecuteCommands("Tree tree130 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree130, tree);
assert(data.species == TipCount(tree130), "Number of species and number of tips differ");
DataSetFilter codonfilter131 = CreateFilter(data, 3, "390-392", "", "TAA,TAG,TGA");
assert(data.species == codonfilter131.species, "species number mismatch");
assert(1 == codonfilter131.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter131");
UseModel(P131xy);
ExecuteCommands("Tree tree131 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree131, tree);
assert(data.species == TipCount(tree131), "Number of species and number of tips differ");
DataSetFilter codonfilter132 = CreateFilter(data, 3, "393-395", "", "TAA,TAG,TGA");
assert(data.species == codonfilter132.species, "species number mismatch");
assert(1 == codonfilter132.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter132");
UseModel(P132xy);
ExecuteCommands("Tree tree132 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree132, tree);
assert(data.species == TipCount(tree132), "Number of species and number of tips differ");
DataSetFilter codonfilter133 = CreateFilter(data, 3, "396-398", "", "TAA,TAG,TGA");
assert(data.species == codonfilter133.species, "species number mismatch");
assert(1 == codonfilter133.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter133");
UseModel(P133xy);
ExecuteCommands("Tree tree133 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree133, tree);
assert(data.species == TipCount(tree133), "Number of species and number of tips differ");
DataSetFilter codonfilter134 = CreateFilter(data, 3, "399-401", "", "TAA,TAG,TGA");
assert(data.species == codonfilter134.species, "species number mismatch");
assert(1 == codonfilter134.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter134");
UseModel(P134xy);
ExecuteCommands("Tree tree134 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree134, tree);
assert(data.species == TipCount(tree134), "Number of species and number of tips differ");
DataSetFilter codonfilter135 = CreateFilter(data, 3, "402-404", "", "TAA,TAG,TGA");
assert(data.species == codonfilter135.species, "species number mismatch");
assert(1 == codonfilter135.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter135");
UseModel(P135xy);
ExecuteCommands("Tree tree135 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree135, tree);
assert(data.species == TipCount(tree135), "Number of species and number of tips differ");
DataSetFilter codonfilter136 = CreateFilter(data, 3, "405-407", "", "TAA,TAG,TGA");
assert(data.species == codonfilter136.species, "species number mismatch");
assert(1 == codonfilter136.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter136");
UseModel(P136xy);
ExecuteCommands("Tree tree136 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree136, tree);
assert(data.species == TipCount(tree136), "Number of species and number of tips differ");
DataSetFilter codonfilter137 = CreateFilter(data, 3, "408-410", "", "TAA,TAG,TGA");
assert(data.species == codonfilter137.species, "species number mismatch");
assert(1 == codonfilter137.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter137");
UseModel(P137xy);
ExecuteCommands("Tree tree137 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree137, tree);
assert(data.species == TipCount(tree137), "Number of species and number of tips differ");
DataSetFilter codonfilter138 = CreateFilter(data, 3, "411-413", "", "TAA,TAG,TGA");
assert(data.species == codonfilter138.species, "species number mismatch");
assert(1 == codonfilter138.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter138");
UseModel(P138xy);
ExecuteCommands("Tree tree138 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree138, tree);
assert(data.species == TipCount(tree138), "Number of species and number of tips differ");
DataSetFilter codonfilter139 = CreateFilter(data, 3, "414-416", "", "TAA,TAG,TGA");
assert(data.species == codonfilter139.species, "species number mismatch");
assert(1 == codonfilter139.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter139");
UseModel(P139xy);
ExecuteCommands("Tree tree139 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree139, tree);
assert(data.species == TipCount(tree139), "Number of species and number of tips differ");
DataSetFilter codonfilter140 = CreateFilter(data, 3, "417-419", "", "TAA,TAG,TGA");
assert(data.species == codonfilter140.species, "species number mismatch");
assert(1 == codonfilter140.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter140");
UseModel(P140xy);
ExecuteCommands("Tree tree140 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree140, tree);
assert(data.species == TipCount(tree140), "Number of species and number of tips differ");
DataSetFilter codonfilter141 = CreateFilter(data, 3, "420-422", "", "TAA,TAG,TGA");
assert(data.species == codonfilter141.species, "species number mismatch");
assert(1 == codonfilter141.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter141");
UseModel(P141xy);
ExecuteCommands("Tree tree141 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree141, tree);
assert(data.species == TipCount(tree141), "Number of species and number of tips differ");
DataSetFilter codonfilter142 = CreateFilter(data, 3, "423-425", "", "TAA,TAG,TGA");
assert(data.species == codonfilter142.species, "species number mismatch");
assert(1 == codonfilter142.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter142");
UseModel(P142xy);
ExecuteCommands("Tree tree142 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree142, tree);
assert(data.species == TipCount(tree142), "Number of species and number of tips differ");
DataSetFilter codonfilter143 = CreateFilter(data, 3, "426-428", "", "TAA,TAG,TGA");
assert(data.species == codonfilter143.species, "species number mismatch");
assert(1 == codonfilter143.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter143");
UseModel(P143xy);
ExecuteCommands("Tree tree143 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree143, tree);
assert(data.species == TipCount(tree143), "Number of species and number of tips differ");
DataSetFilter codonfilter144 = CreateFilter(data, 3, "429-431", "", "TAA,TAG,TGA");
assert(data.species == codonfilter144.species, "species number mismatch");
assert(1 == codonfilter144.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter144");
UseModel(P144xy);
ExecuteCommands("Tree tree144 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree144, tree);
assert(data.species == TipCount(tree144), "Number of species and number of tips differ");
DataSetFilter codonfilter145 = CreateFilter(data, 3, "432-434", "", "TAA,TAG,TGA");
assert(data.species == codonfilter145.species, "species number mismatch");
assert(1 == codonfilter145.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter145");
UseModel(P145xy);
ExecuteCommands("Tree tree145 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree145, tree);
assert(data.species == TipCount(tree145), "Number of species and number of tips differ");
DataSetFilter codonfilter146 = CreateFilter(data, 3, "435-437", "", "TAA,TAG,TGA");
assert(data.species == codonfilter146.species, "species number mismatch");
assert(1 == codonfilter146.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter146");
UseModel(P146xy);
ExecuteCommands("Tree tree146 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree146, tree);
assert(data.species == TipCount(tree146), "Number of species and number of tips differ");
DataSetFilter codonfilter147 = CreateFilter(data, 3, "438-440", "", "TAA,TAG,TGA");
assert(data.species == codonfilter147.species, "species number mismatch");
assert(1 == codonfilter147.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter147");
UseModel(P147xy);
ExecuteCommands("Tree tree147 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree147, tree);
assert(data.species == TipCount(tree147), "Number of species and number of tips differ");
DataSetFilter codonfilter148 = CreateFilter(data, 3, "441-443", "", "TAA,TAG,TGA");
assert(data.species == codonfilter148.species, "species number mismatch");
assert(1 == codonfilter148.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter148");
UseModel(P148xy);
ExecuteCommands("Tree tree148 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree148, tree);
assert(data.species == TipCount(tree148), "Number of species and number of tips differ");
DataSetFilter codonfilter149 = CreateFilter(data, 3, "444-446", "", "TAA,TAG,TGA");
assert(data.species == codonfilter149.species, "species number mismatch");
assert(1 == codonfilter149.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter149");
UseModel(P149xy);
ExecuteCommands("Tree tree149 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree149, tree);
assert(data.species == TipCount(tree149), "Number of species and number of tips differ");
DataSetFilter codonfilter150 = CreateFilter(data, 3, "447-449", "", "TAA,TAG,TGA");
assert(data.species == codonfilter150.species, "species number mismatch");
assert(1 == codonfilter150.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter150");
UseModel(P150xy);
ExecuteCommands("Tree tree150 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree150, tree);
assert(data.species == TipCount(tree150), "Number of species and number of tips differ");
DataSetFilter codonfilter151 = CreateFilter(data, 3, "450-452", "", "TAA,TAG,TGA");
assert(data.species == codonfilter151.species, "species number mismatch");
assert(1 == codonfilter151.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter151");
UseModel(P151xy);
ExecuteCommands("Tree tree151 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree151, tree);
assert(data.species == TipCount(tree151), "Number of species and number of tips differ");
DataSetFilter codonfilter152 = CreateFilter(data, 3, "453-455", "", "TAA,TAG,TGA");
assert(data.species == codonfilter152.species, "species number mismatch");
assert(1 == codonfilter152.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter152");
UseModel(P152xy);
ExecuteCommands("Tree tree152 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree152, tree);
assert(data.species == TipCount(tree152), "Number of species and number of tips differ");
DataSetFilter codonfilter153 = CreateFilter(data, 3, "456-458", "", "TAA,TAG,TGA");
assert(data.species == codonfilter153.species, "species number mismatch");
assert(1 == codonfilter153.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter153");
UseModel(P153xy);
ExecuteCommands("Tree tree153 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree153, tree);
assert(data.species == TipCount(tree153), "Number of species and number of tips differ");
DataSetFilter codonfilter154 = CreateFilter(data, 3, "459-461", "", "TAA,TAG,TGA");
assert(data.species == codonfilter154.species, "species number mismatch");
assert(1 == codonfilter154.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter154");
UseModel(P154xy);
ExecuteCommands("Tree tree154 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree154, tree);
assert(data.species == TipCount(tree154), "Number of species and number of tips differ");
DataSetFilter codonfilter155 = CreateFilter(data, 3, "462-464", "", "TAA,TAG,TGA");
assert(data.species == codonfilter155.species, "species number mismatch");
assert(1 == codonfilter155.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter155");
UseModel(P155xy);
ExecuteCommands("Tree tree155 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree155, tree);
assert(data.species == TipCount(tree155), "Number of species and number of tips differ");
DataSetFilter codonfilter156 = CreateFilter(data, 3, "465-467", "", "TAA,TAG,TGA");
assert(data.species == codonfilter156.species, "species number mismatch");
assert(1 == codonfilter156.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter156");
UseModel(P156xy);
ExecuteCommands("Tree tree156 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree156, tree);
assert(data.species == TipCount(tree156), "Number of species and number of tips differ");
DataSetFilter codonfilter157 = CreateFilter(data, 3, "468-470", "", "TAA,TAG,TGA");
assert(data.species == codonfilter157.species, "species number mismatch");
assert(1 == codonfilter157.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter157");
UseModel(P157xy);
ExecuteCommands("Tree tree157 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree157, tree);
assert(data.species == TipCount(tree157), "Number of species and number of tips differ");
DataSetFilter codonfilter158 = CreateFilter(data, 3, "471-473", "", "TAA,TAG,TGA");
assert(data.species == codonfilter158.species, "species number mismatch");
assert(1 == codonfilter158.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter158");
UseModel(P158xy);
ExecuteCommands("Tree tree158 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree158, tree);
assert(data.species == TipCount(tree158), "Number of species and number of tips differ");
DataSetFilter codonfilter159 = CreateFilter(data, 3, "474-476", "", "TAA,TAG,TGA");
assert(data.species == codonfilter159.species, "species number mismatch");
assert(1 == codonfilter159.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter159");
UseModel(P159xy);
ExecuteCommands("Tree tree159 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree159, tree);
assert(data.species == TipCount(tree159), "Number of species and number of tips differ");
DataSetFilter codonfilter160 = CreateFilter(data, 3, "477-479", "", "TAA,TAG,TGA");
assert(data.species == codonfilter160.species, "species number mismatch");
assert(1 == codonfilter160.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter160");
UseModel(P160xy);
ExecuteCommands("Tree tree160 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree160, tree);
assert(data.species == TipCount(tree160), "Number of species and number of tips differ");
DataSetFilter codonfilter161 = CreateFilter(data, 3, "480-482", "", "TAA,TAG,TGA");
assert(data.species == codonfilter161.species, "species number mismatch");
assert(1 == codonfilter161.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter161");
UseModel(P161xy);
ExecuteCommands("Tree tree161 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree161, tree);
assert(data.species == TipCount(tree161), "Number of species and number of tips differ");
DataSetFilter codonfilter162 = CreateFilter(data, 3, "483-485", "", "TAA,TAG,TGA");
assert(data.species == codonfilter162.species, "species number mismatch");
assert(1 == codonfilter162.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter162");
UseModel(P162xy);
ExecuteCommands("Tree tree162 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree162, tree);
assert(data.species == TipCount(tree162), "Number of species and number of tips differ");
DataSetFilter codonfilter163 = CreateFilter(data, 3, "486-488", "", "TAA,TAG,TGA");
assert(data.species == codonfilter163.species, "species number mismatch");
assert(1 == codonfilter163.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter163");
UseModel(P163xy);
ExecuteCommands("Tree tree163 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree163, tree);
assert(data.species == TipCount(tree163), "Number of species and number of tips differ");
DataSetFilter codonfilter164 = CreateFilter(data, 3, "489-491", "", "TAA,TAG,TGA");
assert(data.species == codonfilter164.species, "species number mismatch");
assert(1 == codonfilter164.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter164");
UseModel(P164xy);
ExecuteCommands("Tree tree164 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree164, tree);
assert(data.species == TipCount(tree164), "Number of species and number of tips differ");
DataSetFilter codonfilter165 = CreateFilter(data, 3, "492-494", "", "TAA,TAG,TGA");
assert(data.species == codonfilter165.species, "species number mismatch");
assert(1 == codonfilter165.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter165");
UseModel(P165xy);
ExecuteCommands("Tree tree165 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree165, tree);
assert(data.species == TipCount(tree165), "Number of species and number of tips differ");
DataSetFilter codonfilter166 = CreateFilter(data, 3, "495-497", "", "TAA,TAG,TGA");
assert(data.species == codonfilter166.species, "species number mismatch");
assert(1 == codonfilter166.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter166");
UseModel(P166xy);
ExecuteCommands("Tree tree166 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree166, tree);
assert(data.species == TipCount(tree166), "Number of species and number of tips differ");
DataSetFilter codonfilter167 = CreateFilter(data, 3, "498-500", "", "TAA,TAG,TGA");
assert(data.species == codonfilter167.species, "species number mismatch");
assert(1 == codonfilter167.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter167");
UseModel(P167xy);
ExecuteCommands("Tree tree167 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree167, tree);
assert(data.species == TipCount(tree167), "Number of species and number of tips differ");
DataSetFilter codonfilter168 = CreateFilter(data, 3, "501-503", "", "TAA,TAG,TGA");
assert(data.species == codonfilter168.species, "species number mismatch");
assert(1 == codonfilter168.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter168");
UseModel(P168xy);
ExecuteCommands("Tree tree168 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree168, tree);
assert(data.species == TipCount(tree168), "Number of species and number of tips differ");
DataSetFilter codonfilter169 = CreateFilter(data, 3, "504-506", "", "TAA,TAG,TGA");
assert(data.species == codonfilter169.species, "species number mismatch");
assert(1 == codonfilter169.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter169");
UseModel(P169xy);
ExecuteCommands("Tree tree169 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree169, tree);
assert(data.species == TipCount(tree169), "Number of species and number of tips differ");
DataSetFilter codonfilter170 = CreateFilter(data, 3, "507-509", "", "TAA,TAG,TGA");
assert(data.species == codonfilter170.species, "species number mismatch");
assert(1 == codonfilter170.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter170");
UseModel(P170xy);
ExecuteCommands("Tree tree170 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree170, tree);
assert(data.species == TipCount(tree170), "Number of species and number of tips differ");
DataSetFilter codonfilter171 = CreateFilter(data, 3, "510-512", "", "TAA,TAG,TGA");
assert(data.species == codonfilter171.species, "species number mismatch");
assert(1 == codonfilter171.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter171");
UseModel(P171xy);
ExecuteCommands("Tree tree171 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree171, tree);
assert(data.species == TipCount(tree171), "Number of species and number of tips differ");
DataSetFilter codonfilter172 = CreateFilter(data, 3, "513-515", "", "TAA,TAG,TGA");
assert(data.species == codonfilter172.species, "species number mismatch");
assert(1 == codonfilter172.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter172");
UseModel(P172xy);
ExecuteCommands("Tree tree172 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree172, tree);
assert(data.species == TipCount(tree172), "Number of species and number of tips differ");
DataSetFilter codonfilter173 = CreateFilter(data, 3, "516-518", "", "TAA,TAG,TGA");
assert(data.species == codonfilter173.species, "species number mismatch");
assert(1 == codonfilter173.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter173");
UseModel(P173xy);
ExecuteCommands("Tree tree173 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree173, tree);
assert(data.species == TipCount(tree173), "Number of species and number of tips differ");
DataSetFilter codonfilter174 = CreateFilter(data, 3, "519-521", "", "TAA,TAG,TGA");
assert(data.species == codonfilter174.species, "species number mismatch");
assert(1 == codonfilter174.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter174");
UseModel(P174xy);
ExecuteCommands("Tree tree174 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree174, tree);
assert(data.species == TipCount(tree174), "Number of species and number of tips differ");
DataSetFilter codonfilter175 = CreateFilter(data, 3, "522-524", "", "TAA,TAG,TGA");
assert(data.species == codonfilter175.species, "species number mismatch");
assert(1 == codonfilter175.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter175");
UseModel(P175xy);
ExecuteCommands("Tree tree175 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree175, tree);
assert(data.species == TipCount(tree175), "Number of species and number of tips differ");
DataSetFilter codonfilter176 = CreateFilter(data, 3, "525-527", "", "TAA,TAG,TGA");
assert(data.species == codonfilter176.species, "species number mismatch");
assert(1 == codonfilter176.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter176");
UseModel(P176xy);
ExecuteCommands("Tree tree176 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree176, tree);
assert(data.species == TipCount(tree176), "Number of species and number of tips differ");
DataSetFilter codonfilter177 = CreateFilter(data, 3, "528-530", "", "TAA,TAG,TGA");
assert(data.species == codonfilter177.species, "species number mismatch");
assert(1 == codonfilter177.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter177");
UseModel(P177xy);
ExecuteCommands("Tree tree177 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree177, tree);
assert(data.species == TipCount(tree177), "Number of species and number of tips differ");
DataSetFilter codonfilter178 = CreateFilter(data, 3, "531-533", "", "TAA,TAG,TGA");
assert(data.species == codonfilter178.species, "species number mismatch");
assert(1 == codonfilter178.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter178");
UseModel(P178xy);
ExecuteCommands("Tree tree178 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree178, tree);
assert(data.species == TipCount(tree178), "Number of species and number of tips differ");
DataSetFilter codonfilter179 = CreateFilter(data, 3, "534-536", "", "TAA,TAG,TGA");
assert(data.species == codonfilter179.species, "species number mismatch");
assert(1 == codonfilter179.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter179");
UseModel(P179xy);
ExecuteCommands("Tree tree179 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree179, tree);
assert(data.species == TipCount(tree179), "Number of species and number of tips differ");
DataSetFilter codonfilter180 = CreateFilter(data, 3, "537-539", "", "TAA,TAG,TGA");
assert(data.species == codonfilter180.species, "species number mismatch");
assert(1 == codonfilter180.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter180");
UseModel(P180xy);
ExecuteCommands("Tree tree180 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree180, tree);
assert(data.species == TipCount(tree180), "Number of species and number of tips differ");
DataSetFilter codonfilter181 = CreateFilter(data, 3, "540-542", "", "TAA,TAG,TGA");
assert(data.species == codonfilter181.species, "species number mismatch");
assert(1 == codonfilter181.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter181");
UseModel(P181xy);
ExecuteCommands("Tree tree181 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree181, tree);
assert(data.species == TipCount(tree181), "Number of species and number of tips differ");
DataSetFilter codonfilter182 = CreateFilter(data, 3, "543-545", "", "TAA,TAG,TGA");
assert(data.species == codonfilter182.species, "species number mismatch");
assert(1 == codonfilter182.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter182");
UseModel(P182xy);
ExecuteCommands("Tree tree182 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree182, tree);
assert(data.species == TipCount(tree182), "Number of species and number of tips differ");
DataSetFilter codonfilter183 = CreateFilter(data, 3, "546-548", "", "TAA,TAG,TGA");
assert(data.species == codonfilter183.species, "species number mismatch");
assert(1 == codonfilter183.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter183");
UseModel(P183xy);
ExecuteCommands("Tree tree183 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree183, tree);
assert(data.species == TipCount(tree183), "Number of species and number of tips differ");
DataSetFilter codonfilter184 = CreateFilter(data, 3, "549-551", "", "TAA,TAG,TGA");
assert(data.species == codonfilter184.species, "species number mismatch");
assert(1 == codonfilter184.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter184");
UseModel(P184xy);
ExecuteCommands("Tree tree184 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree184, tree);
assert(data.species == TipCount(tree184), "Number of species and number of tips differ");
DataSetFilter codonfilter185 = CreateFilter(data, 3, "552-554", "", "TAA,TAG,TGA");
assert(data.species == codonfilter185.species, "species number mismatch");
assert(1 == codonfilter185.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter185");
UseModel(P185xy);
ExecuteCommands("Tree tree185 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree185, tree);
assert(data.species == TipCount(tree185), "Number of species and number of tips differ");
DataSetFilter codonfilter186 = CreateFilter(data, 3, "555-557", "", "TAA,TAG,TGA");
assert(data.species == codonfilter186.species, "species number mismatch");
assert(1 == codonfilter186.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter186");
UseModel(P186xy);
ExecuteCommands("Tree tree186 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree186, tree);
assert(data.species == TipCount(tree186), "Number of species and number of tips differ");
DataSetFilter codonfilter187 = CreateFilter(data, 3, "558-560", "", "TAA,TAG,TGA");
assert(data.species == codonfilter187.species, "species number mismatch");
assert(1 == codonfilter187.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter187");
UseModel(P187xy);
ExecuteCommands("Tree tree187 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree187, tree);
assert(data.species == TipCount(tree187), "Number of species and number of tips differ");
DataSetFilter codonfilter188 = CreateFilter(data, 3, "561-563", "", "TAA,TAG,TGA");
assert(data.species == codonfilter188.species, "species number mismatch");
assert(1 == codonfilter188.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter188");
UseModel(P188xy);
ExecuteCommands("Tree tree188 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree188, tree);
assert(data.species == TipCount(tree188), "Number of species and number of tips differ");
DataSetFilter codonfilter189 = CreateFilter(data, 3, "564-566", "", "TAA,TAG,TGA");
assert(data.species == codonfilter189.species, "species number mismatch");
assert(1 == codonfilter189.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter189");
UseModel(P189xy);
ExecuteCommands("Tree tree189 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree189, tree);
assert(data.species == TipCount(tree189), "Number of species and number of tips differ");
DataSetFilter codonfilter190 = CreateFilter(data, 3, "567-569", "", "TAA,TAG,TGA");
assert(data.species == codonfilter190.species, "species number mismatch");
assert(1 == codonfilter190.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter190");
UseModel(P190xy);
ExecuteCommands("Tree tree190 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree190, tree);
assert(data.species == TipCount(tree190), "Number of species and number of tips differ");
DataSetFilter codonfilter191 = CreateFilter(data, 3, "570-572", "", "TAA,TAG,TGA");
assert(data.species == codonfilter191.species, "species number mismatch");
assert(1 == codonfilter191.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter191");
UseModel(P191xy);
ExecuteCommands("Tree tree191 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree191, tree);
assert(data.species == TipCount(tree191), "Number of species and number of tips differ");
DataSetFilter codonfilter192 = CreateFilter(data, 3, "573-575", "", "TAA,TAG,TGA");
assert(data.species == codonfilter192.species, "species number mismatch");
assert(1 == codonfilter192.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter192");
UseModel(P192xy);
ExecuteCommands("Tree tree192 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree192, tree);
assert(data.species == TipCount(tree192), "Number of species and number of tips differ");
DataSetFilter codonfilter193 = CreateFilter(data, 3, "576-578", "", "TAA,TAG,TGA");
assert(data.species == codonfilter193.species, "species number mismatch");
assert(1 == codonfilter193.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter193");
UseModel(P193xy);
ExecuteCommands("Tree tree193 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree193, tree);
assert(data.species == TipCount(tree193), "Number of species and number of tips differ");
DataSetFilter codonfilter194 = CreateFilter(data, 3, "579-581", "", "TAA,TAG,TGA");
assert(data.species == codonfilter194.species, "species number mismatch");
assert(1 == codonfilter194.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter194");
UseModel(P194xy);
ExecuteCommands("Tree tree194 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree194, tree);
assert(data.species == TipCount(tree194), "Number of species and number of tips differ");
DataSetFilter codonfilter195 = CreateFilter(data, 3, "582-584", "", "TAA,TAG,TGA");
assert(data.species == codonfilter195.species, "species number mismatch");
assert(1 == codonfilter195.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter195");
UseModel(P195xy);
ExecuteCommands("Tree tree195 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree195, tree);
assert(data.species == TipCount(tree195), "Number of species and number of tips differ");
DataSetFilter codonfilter196 = CreateFilter(data, 3, "585-587", "", "TAA,TAG,TGA");
assert(data.species == codonfilter196.species, "species number mismatch");
assert(1 == codonfilter196.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter196");
UseModel(P196xy);
ExecuteCommands("Tree tree196 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree196, tree);
assert(data.species == TipCount(tree196), "Number of species and number of tips differ");
DataSetFilter codonfilter197 = CreateFilter(data, 3, "588-590", "", "TAA,TAG,TGA");
assert(data.species == codonfilter197.species, "species number mismatch");
assert(1 == codonfilter197.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter197");
UseModel(P197xy);
ExecuteCommands("Tree tree197 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree197, tree);
assert(data.species == TipCount(tree197), "Number of species and number of tips differ");
DataSetFilter codonfilter198 = CreateFilter(data, 3, "591-593", "", "TAA,TAG,TGA");
assert(data.species == codonfilter198.species, "species number mismatch");
assert(1 == codonfilter198.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter198");
UseModel(P198xy);
ExecuteCommands("Tree tree198 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree198, tree);
assert(data.species == TipCount(tree198), "Number of species and number of tips differ");
DataSetFilter codonfilter199 = CreateFilter(data, 3, "594-596", "", "TAA,TAG,TGA");
assert(data.species == codonfilter199.species, "species number mismatch");
assert(1 == codonfilter199.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter199");
UseModel(P199xy);
ExecuteCommands("Tree tree199 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree199, tree);
assert(data.species == TipCount(tree199), "Number of species and number of tips differ");
DataSetFilter codonfilter200 = CreateFilter(data, 3, "597-599", "", "TAA,TAG,TGA");
assert(data.species == codonfilter200.species, "species number mismatch");
assert(1 == codonfilter200.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter200");
UseModel(P200xy);
ExecuteCommands("Tree tree200 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree200, tree);
assert(data.species == TipCount(tree200), "Number of species and number of tips differ");
DataSetFilter codonfilter201 = CreateFilter(data, 3, "600-602", "", "TAA,TAG,TGA");
assert(data.species == codonfilter201.species, "species number mismatch");
assert(1 == codonfilter201.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter201");
UseModel(P201xy);
ExecuteCommands("Tree tree201 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree201, tree);
assert(data.species == TipCount(tree201), "Number of species and number of tips differ");
DataSetFilter codonfilter202 = CreateFilter(data, 3, "603-605", "", "TAA,TAG,TGA");
assert(data.species == codonfilter202.species, "species number mismatch");
assert(1 == codonfilter202.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter202");
UseModel(P202xy);
ExecuteCommands("Tree tree202 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree202, tree);
assert(data.species == TipCount(tree202), "Number of species and number of tips differ");
DataSetFilter codonfilter203 = CreateFilter(data, 3, "606-608", "", "TAA,TAG,TGA");
assert(data.species == codonfilter203.species, "species number mismatch");
assert(1 == codonfilter203.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter203");
UseModel(P203xy);
ExecuteCommands("Tree tree203 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree203, tree);
assert(data.species == TipCount(tree203), "Number of species and number of tips differ");
DataSetFilter codonfilter204 = CreateFilter(data, 3, "609-611", "", "TAA,TAG,TGA");
assert(data.species == codonfilter204.species, "species number mismatch");
assert(1 == codonfilter204.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter204");
UseModel(P204xy);
ExecuteCommands("Tree tree204 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree204, tree);
assert(data.species == TipCount(tree204), "Number of species and number of tips differ");
DataSetFilter codonfilter205 = CreateFilter(data, 3, "612-614", "", "TAA,TAG,TGA");
assert(data.species == codonfilter205.species, "species number mismatch");
assert(1 == codonfilter205.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter205");
UseModel(P205xy);
ExecuteCommands("Tree tree205 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree205, tree);
assert(data.species == TipCount(tree205), "Number of species and number of tips differ");
DataSetFilter codonfilter206 = CreateFilter(data, 3, "615-617", "", "TAA,TAG,TGA");
assert(data.species == codonfilter206.species, "species number mismatch");
assert(1 == codonfilter206.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter206");
UseModel(P206xy);
ExecuteCommands("Tree tree206 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree206, tree);
assert(data.species == TipCount(tree206), "Number of species and number of tips differ");
DataSetFilter codonfilter207 = CreateFilter(data, 3, "618-620", "", "TAA,TAG,TGA");
assert(data.species == codonfilter207.species, "species number mismatch");
assert(1 == codonfilter207.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter207");
UseModel(P207xy);
ExecuteCommands("Tree tree207 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree207, tree);
assert(data.species == TipCount(tree207), "Number of species and number of tips differ");
DataSetFilter codonfilter208 = CreateFilter(data, 3, "621-623", "", "TAA,TAG,TGA");
assert(data.species == codonfilter208.species, "species number mismatch");
assert(1 == codonfilter208.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter208");
UseModel(P208xy);
ExecuteCommands("Tree tree208 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree208, tree);
assert(data.species == TipCount(tree208), "Number of species and number of tips differ");
DataSetFilter codonfilter209 = CreateFilter(data, 3, "624-626", "", "TAA,TAG,TGA");
assert(data.species == codonfilter209.species, "species number mismatch");
assert(1 == codonfilter209.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter209");
UseModel(P209xy);
ExecuteCommands("Tree tree209 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree209, tree);
assert(data.species == TipCount(tree209), "Number of species and number of tips differ");
DataSetFilter codonfilter210 = CreateFilter(data, 3, "627-629", "", "TAA,TAG,TGA");
assert(data.species == codonfilter210.species, "species number mismatch");
assert(1 == codonfilter210.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter210");
UseModel(P210xy);
ExecuteCommands("Tree tree210 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree210, tree);
assert(data.species == TipCount(tree210), "Number of species and number of tips differ");
DataSetFilter codonfilter211 = CreateFilter(data, 3, "630-632", "", "TAA,TAG,TGA");
assert(data.species == codonfilter211.species, "species number mismatch");
assert(1 == codonfilter211.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter211");
UseModel(P211xy);
ExecuteCommands("Tree tree211 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree211, tree);
assert(data.species == TipCount(tree211), "Number of species and number of tips differ");
DataSetFilter codonfilter212 = CreateFilter(data, 3, "633-635", "", "TAA,TAG,TGA");
assert(data.species == codonfilter212.species, "species number mismatch");
assert(1 == codonfilter212.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter212");
UseModel(P212xy);
ExecuteCommands("Tree tree212 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree212, tree);
assert(data.species == TipCount(tree212), "Number of species and number of tips differ");
DataSetFilter codonfilter213 = CreateFilter(data, 3, "636-638", "", "TAA,TAG,TGA");
assert(data.species == codonfilter213.species, "species number mismatch");
assert(1 == codonfilter213.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter213");
UseModel(P213xy);
ExecuteCommands("Tree tree213 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree213, tree);
assert(data.species == TipCount(tree213), "Number of species and number of tips differ");
DataSetFilter codonfilter214 = CreateFilter(data, 3, "639-641", "", "TAA,TAG,TGA");
assert(data.species == codonfilter214.species, "species number mismatch");
assert(1 == codonfilter214.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter214");
UseModel(P214xy);
ExecuteCommands("Tree tree214 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree214, tree);
assert(data.species == TipCount(tree214), "Number of species and number of tips differ");
DataSetFilter codonfilter215 = CreateFilter(data, 3, "642-644", "", "TAA,TAG,TGA");
assert(data.species == codonfilter215.species, "species number mismatch");
assert(1 == codonfilter215.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter215");
UseModel(P215xy);
ExecuteCommands("Tree tree215 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree215, tree);
assert(data.species == TipCount(tree215), "Number of species and number of tips differ");
DataSetFilter codonfilter216 = CreateFilter(data, 3, "645-647", "", "TAA,TAG,TGA");
assert(data.species == codonfilter216.species, "species number mismatch");
assert(1 == codonfilter216.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter216");
UseModel(P216xy);
ExecuteCommands("Tree tree216 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree216, tree);
assert(data.species == TipCount(tree216), "Number of species and number of tips differ");
DataSetFilter codonfilter217 = CreateFilter(data, 3, "648-650", "", "TAA,TAG,TGA");
assert(data.species == codonfilter217.species, "species number mismatch");
assert(1 == codonfilter217.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter217");
UseModel(P217xy);
ExecuteCommands("Tree tree217 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree217, tree);
assert(data.species == TipCount(tree217), "Number of species and number of tips differ");
DataSetFilter codonfilter218 = CreateFilter(data, 3, "651-653", "", "TAA,TAG,TGA");
assert(data.species == codonfilter218.species, "species number mismatch");
assert(1 == codonfilter218.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter218");
UseModel(P218xy);
ExecuteCommands("Tree tree218 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree218, tree);
assert(data.species == TipCount(tree218), "Number of species and number of tips differ");
DataSetFilter codonfilter219 = CreateFilter(data, 3, "654-656", "", "TAA,TAG,TGA");
assert(data.species == codonfilter219.species, "species number mismatch");
assert(1 == codonfilter219.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter219");
UseModel(P219xy);
ExecuteCommands("Tree tree219 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree219, tree);
assert(data.species == TipCount(tree219), "Number of species and number of tips differ");
DataSetFilter codonfilter220 = CreateFilter(data, 3, "657-659", "", "TAA,TAG,TGA");
assert(data.species == codonfilter220.species, "species number mismatch");
assert(1 == codonfilter220.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter220");
UseModel(P220xy);
ExecuteCommands("Tree tree220 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree220, tree);
assert(data.species == TipCount(tree220), "Number of species and number of tips differ");
DataSetFilter codonfilter221 = CreateFilter(data, 3, "660-662", "", "TAA,TAG,TGA");
assert(data.species == codonfilter221.species, "species number mismatch");
assert(1 == codonfilter221.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter221");
UseModel(P221xy);
ExecuteCommands("Tree tree221 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree221, tree);
assert(data.species == TipCount(tree221), "Number of species and number of tips differ");
DataSetFilter codonfilter222 = CreateFilter(data, 3, "663-665", "", "TAA,TAG,TGA");
assert(data.species == codonfilter222.species, "species number mismatch");
assert(1 == codonfilter222.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter222");
UseModel(P222xy);
ExecuteCommands("Tree tree222 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree222, tree);
assert(data.species == TipCount(tree222), "Number of species and number of tips differ");
DataSetFilter codonfilter223 = CreateFilter(data, 3, "666-668", "", "TAA,TAG,TGA");
assert(data.species == codonfilter223.species, "species number mismatch");
assert(1 == codonfilter223.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter223");
UseModel(P223xy);
ExecuteCommands("Tree tree223 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree223, tree);
assert(data.species == TipCount(tree223), "Number of species and number of tips differ");
DataSetFilter codonfilter224 = CreateFilter(data, 3, "669-671", "", "TAA,TAG,TGA");
assert(data.species == codonfilter224.species, "species number mismatch");
assert(1 == codonfilter224.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter224");
UseModel(P224xy);
ExecuteCommands("Tree tree224 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree224, tree);
assert(data.species == TipCount(tree224), "Number of species and number of tips differ");
DataSetFilter codonfilter225 = CreateFilter(data, 3, "672-674", "", "TAA,TAG,TGA");
assert(data.species == codonfilter225.species, "species number mismatch");
assert(1 == codonfilter225.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter225");
UseModel(P225xy);
ExecuteCommands("Tree tree225 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree225, tree);
assert(data.species == TipCount(tree225), "Number of species and number of tips differ");
DataSetFilter codonfilter226 = CreateFilter(data, 3, "675-677", "", "TAA,TAG,TGA");
assert(data.species == codonfilter226.species, "species number mismatch");
assert(1 == codonfilter226.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter226");
UseModel(P226xy);
ExecuteCommands("Tree tree226 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree226, tree);
assert(data.species == TipCount(tree226), "Number of species and number of tips differ");
DataSetFilter codonfilter227 = CreateFilter(data, 3, "678-680", "", "TAA,TAG,TGA");
assert(data.species == codonfilter227.species, "species number mismatch");
assert(1 == codonfilter227.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter227");
UseModel(P227xy);
ExecuteCommands("Tree tree227 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree227, tree);
assert(data.species == TipCount(tree227), "Number of species and number of tips differ");
DataSetFilter codonfilter228 = CreateFilter(data, 3, "681-683", "", "TAA,TAG,TGA");
assert(data.species == codonfilter228.species, "species number mismatch");
assert(1 == codonfilter228.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter228");
UseModel(P228xy);
ExecuteCommands("Tree tree228 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree228, tree);
assert(data.species == TipCount(tree228), "Number of species and number of tips differ");
DataSetFilter codonfilter229 = CreateFilter(data, 3, "684-686", "", "TAA,TAG,TGA");
assert(data.species == codonfilter229.species, "species number mismatch");
assert(1 == codonfilter229.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter229");
UseModel(P229xy);
ExecuteCommands("Tree tree229 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree229, tree);
assert(data.species == TipCount(tree229), "Number of species and number of tips differ");
DataSetFilter codonfilter230 = CreateFilter(data, 3, "687-689", "", "TAA,TAG,TGA");
assert(data.species == codonfilter230.species, "species number mismatch");
assert(1 == codonfilter230.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter230");
UseModel(P230xy);
ExecuteCommands("Tree tree230 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree230, tree);
assert(data.species == TipCount(tree230), "Number of species and number of tips differ");
DataSetFilter codonfilter231 = CreateFilter(data, 3, "690-692", "", "TAA,TAG,TGA");
assert(data.species == codonfilter231.species, "species number mismatch");
assert(1 == codonfilter231.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter231");
UseModel(P231xy);
ExecuteCommands("Tree tree231 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree231, tree);
assert(data.species == TipCount(tree231), "Number of species and number of tips differ");
DataSetFilter codonfilter232 = CreateFilter(data, 3, "693-695", "", "TAA,TAG,TGA");
assert(data.species == codonfilter232.species, "species number mismatch");
assert(1 == codonfilter232.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter232");
UseModel(P232xy);
ExecuteCommands("Tree tree232 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree232, tree);
assert(data.species == TipCount(tree232), "Number of species and number of tips differ");
DataSetFilter codonfilter233 = CreateFilter(data, 3, "696-698", "", "TAA,TAG,TGA");
assert(data.species == codonfilter233.species, "species number mismatch");
assert(1 == codonfilter233.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter233");
UseModel(P233xy);
ExecuteCommands("Tree tree233 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree233, tree);
assert(data.species == TipCount(tree233), "Number of species and number of tips differ");
DataSetFilter codonfilter234 = CreateFilter(data, 3, "699-701", "", "TAA,TAG,TGA");
assert(data.species == codonfilter234.species, "species number mismatch");
assert(1 == codonfilter234.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter234");
UseModel(P234xy);
ExecuteCommands("Tree tree234 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree234, tree);
assert(data.species == TipCount(tree234), "Number of species and number of tips differ");
DataSetFilter codonfilter235 = CreateFilter(data, 3, "702-704", "", "TAA,TAG,TGA");
assert(data.species == codonfilter235.species, "species number mismatch");
assert(1 == codonfilter235.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter235");
UseModel(P235xy);
ExecuteCommands("Tree tree235 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree235, tree);
assert(data.species == TipCount(tree235), "Number of species and number of tips differ");
DataSetFilter codonfilter236 = CreateFilter(data, 3, "705-707", "", "TAA,TAG,TGA");
assert(data.species == codonfilter236.species, "species number mismatch");
assert(1 == codonfilter236.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter236");
UseModel(P236xy);
ExecuteCommands("Tree tree236 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree236, tree);
assert(data.species == TipCount(tree236), "Number of species and number of tips differ");
DataSetFilter codonfilter237 = CreateFilter(data, 3, "708-710", "", "TAA,TAG,TGA");
assert(data.species == codonfilter237.species, "species number mismatch");
assert(1 == codonfilter237.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter237");
UseModel(P237xy);
ExecuteCommands("Tree tree237 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree237, tree);
assert(data.species == TipCount(tree237), "Number of species and number of tips differ");
DataSetFilter codonfilter238 = CreateFilter(data, 3, "711-713", "", "TAA,TAG,TGA");
assert(data.species == codonfilter238.species, "species number mismatch");
assert(1 == codonfilter238.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter238");
UseModel(P238xy);
ExecuteCommands("Tree tree238 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree238, tree);
assert(data.species == TipCount(tree238), "Number of species and number of tips differ");
DataSetFilter codonfilter239 = CreateFilter(data, 3, "714-716", "", "TAA,TAG,TGA");
assert(data.species == codonfilter239.species, "species number mismatch");
assert(1 == codonfilter239.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter239");
UseModel(P239xy);
ExecuteCommands("Tree tree239 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree239, tree);
assert(data.species == TipCount(tree239), "Number of species and number of tips differ");
DataSetFilter codonfilter240 = CreateFilter(data, 3, "717-719", "", "TAA,TAG,TGA");
assert(data.species == codonfilter240.species, "species number mismatch");
assert(1 == codonfilter240.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter240");
UseModel(P240xy);
ExecuteCommands("Tree tree240 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree240, tree);
assert(data.species == TipCount(tree240), "Number of species and number of tips differ");
DataSetFilter codonfilter241 = CreateFilter(data, 3, "720-722", "", "TAA,TAG,TGA");
assert(data.species == codonfilter241.species, "species number mismatch");
assert(1 == codonfilter241.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter241");
UseModel(P241xy);
ExecuteCommands("Tree tree241 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree241, tree);
assert(data.species == TipCount(tree241), "Number of species and number of tips differ");
DataSetFilter codonfilter242 = CreateFilter(data, 3, "723-725", "", "TAA,TAG,TGA");
assert(data.species == codonfilter242.species, "species number mismatch");
assert(1 == codonfilter242.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter242");
UseModel(P242xy);
ExecuteCommands("Tree tree242 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree242, tree);
assert(data.species == TipCount(tree242), "Number of species and number of tips differ");
DataSetFilter codonfilter243 = CreateFilter(data, 3, "726-728", "", "TAA,TAG,TGA");
assert(data.species == codonfilter243.species, "species number mismatch");
assert(1 == codonfilter243.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter243");
UseModel(P243xy);
ExecuteCommands("Tree tree243 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree243, tree);
assert(data.species == TipCount(tree243), "Number of species and number of tips differ");
DataSetFilter codonfilter244 = CreateFilter(data, 3, "729-731", "", "TAA,TAG,TGA");
assert(data.species == codonfilter244.species, "species number mismatch");
assert(1 == codonfilter244.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter244");
UseModel(P244xy);
ExecuteCommands("Tree tree244 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree244, tree);
assert(data.species == TipCount(tree244), "Number of species and number of tips differ");
DataSetFilter codonfilter245 = CreateFilter(data, 3, "732-734", "", "TAA,TAG,TGA");
assert(data.species == codonfilter245.species, "species number mismatch");
assert(1 == codonfilter245.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter245");
UseModel(P245xy);
ExecuteCommands("Tree tree245 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree245, tree);
assert(data.species == TipCount(tree245), "Number of species and number of tips differ");
DataSetFilter codonfilter246 = CreateFilter(data, 3, "735-737", "", "TAA,TAG,TGA");
assert(data.species == codonfilter246.species, "species number mismatch");
assert(1 == codonfilter246.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter246");
UseModel(P246xy);
ExecuteCommands("Tree tree246 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree246, tree);
assert(data.species == TipCount(tree246), "Number of species and number of tips differ");
DataSetFilter codonfilter247 = CreateFilter(data, 3, "738-740", "", "TAA,TAG,TGA");
assert(data.species == codonfilter247.species, "species number mismatch");
assert(1 == codonfilter247.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter247");
UseModel(P247xy);
ExecuteCommands("Tree tree247 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree247, tree);
assert(data.species == TipCount(tree247), "Number of species and number of tips differ");
DataSetFilter codonfilter248 = CreateFilter(data, 3, "741-743", "", "TAA,TAG,TGA");
assert(data.species == codonfilter248.species, "species number mismatch");
assert(1 == codonfilter248.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter248");
UseModel(P248xy);
ExecuteCommands("Tree tree248 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree248, tree);
assert(data.species == TipCount(tree248), "Number of species and number of tips differ");
DataSetFilter codonfilter249 = CreateFilter(data, 3, "744-746", "", "TAA,TAG,TGA");
assert(data.species == codonfilter249.species, "species number mismatch");
assert(1 == codonfilter249.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter249");
UseModel(P249xy);
ExecuteCommands("Tree tree249 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree249, tree);
assert(data.species == TipCount(tree249), "Number of species and number of tips differ");
DataSetFilter codonfilter250 = CreateFilter(data, 3, "747-749", "", "TAA,TAG,TGA");
assert(data.species == codonfilter250.species, "species number mismatch");
assert(1 == codonfilter250.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter250");
UseModel(P250xy);
ExecuteCommands("Tree tree250 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree250, tree);
assert(data.species == TipCount(tree250), "Number of species and number of tips differ");
DataSetFilter codonfilter251 = CreateFilter(data, 3, "750-752", "", "TAA,TAG,TGA");
assert(data.species == codonfilter251.species, "species number mismatch");
assert(1 == codonfilter251.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter251");
UseModel(P251xy);
ExecuteCommands("Tree tree251 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree251, tree);
assert(data.species == TipCount(tree251), "Number of species and number of tips differ");
DataSetFilter codonfilter252 = CreateFilter(data, 3, "753-755", "", "TAA,TAG,TGA");
assert(data.species == codonfilter252.species, "species number mismatch");
assert(1 == codonfilter252.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter252");
UseModel(P252xy);
ExecuteCommands("Tree tree252 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree252, tree);
assert(data.species == TipCount(tree252), "Number of species and number of tips differ");
DataSetFilter codonfilter253 = CreateFilter(data, 3, "756-758", "", "TAA,TAG,TGA");
assert(data.species == codonfilter253.species, "species number mismatch");
assert(1 == codonfilter253.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter253");
UseModel(P253xy);
ExecuteCommands("Tree tree253 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree253, tree);
assert(data.species == TipCount(tree253), "Number of species and number of tips differ");
DataSetFilter codonfilter254 = CreateFilter(data, 3, "759-761", "", "TAA,TAG,TGA");
assert(data.species == codonfilter254.species, "species number mismatch");
assert(1 == codonfilter254.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter254");
UseModel(P254xy);
ExecuteCommands("Tree tree254 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree254, tree);
assert(data.species == TipCount(tree254), "Number of species and number of tips differ");
DataSetFilter codonfilter255 = CreateFilter(data, 3, "762-764", "", "TAA,TAG,TGA");
assert(data.species == codonfilter255.species, "species number mismatch");
assert(1 == codonfilter255.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter255");
UseModel(P255xy);
ExecuteCommands("Tree tree255 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree255, tree);
assert(data.species == TipCount(tree255), "Number of species and number of tips differ");
DataSetFilter codonfilter256 = CreateFilter(data, 3, "765-767", "", "TAA,TAG,TGA");
assert(data.species == codonfilter256.species, "species number mismatch");
assert(1 == codonfilter256.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter256");
UseModel(P256xy);
ExecuteCommands("Tree tree256 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree256, tree);
assert(data.species == TipCount(tree256), "Number of species and number of tips differ");
DataSetFilter codonfilter257 = CreateFilter(data, 3, "768-770", "", "TAA,TAG,TGA");
assert(data.species == codonfilter257.species, "species number mismatch");
assert(1 == codonfilter257.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter257");
UseModel(P257xy);
ExecuteCommands("Tree tree257 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree257, tree);
assert(data.species == TipCount(tree257), "Number of species and number of tips differ");
DataSetFilter codonfilter258 = CreateFilter(data, 3, "771-773", "", "TAA,TAG,TGA");
assert(data.species == codonfilter258.species, "species number mismatch");
assert(1 == codonfilter258.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter258");
UseModel(P258xy);
ExecuteCommands("Tree tree258 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree258, tree);
assert(data.species == TipCount(tree258), "Number of species and number of tips differ");
DataSetFilter codonfilter259 = CreateFilter(data, 3, "774-776", "", "TAA,TAG,TGA");
assert(data.species == codonfilter259.species, "species number mismatch");
assert(1 == codonfilter259.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter259");
UseModel(P259xy);
ExecuteCommands("Tree tree259 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree259, tree);
assert(data.species == TipCount(tree259), "Number of species and number of tips differ");
DataSetFilter codonfilter260 = CreateFilter(data, 3, "777-779", "", "TAA,TAG,TGA");
assert(data.species == codonfilter260.species, "species number mismatch");
assert(1 == codonfilter260.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter260");
UseModel(P260xy);
ExecuteCommands("Tree tree260 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree260, tree);
assert(data.species == TipCount(tree260), "Number of species and number of tips differ");
DataSetFilter codonfilter261 = CreateFilter(data, 3, "780-782", "", "TAA,TAG,TGA");
assert(data.species == codonfilter261.species, "species number mismatch");
assert(1 == codonfilter261.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter261");
UseModel(P261xy);
ExecuteCommands("Tree tree261 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree261, tree);
assert(data.species == TipCount(tree261), "Number of species and number of tips differ");
DataSetFilter codonfilter262 = CreateFilter(data, 3, "783-785", "", "TAA,TAG,TGA");
assert(data.species == codonfilter262.species, "species number mismatch");
assert(1 == codonfilter262.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter262");
UseModel(P262xy);
ExecuteCommands("Tree tree262 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree262, tree);
assert(data.species == TipCount(tree262), "Number of species and number of tips differ");
DataSetFilter codonfilter263 = CreateFilter(data, 3, "786-788", "", "TAA,TAG,TGA");
assert(data.species == codonfilter263.species, "species number mismatch");
assert(1 == codonfilter263.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter263");
UseModel(P263xy);
ExecuteCommands("Tree tree263 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree263, tree);
assert(data.species == TipCount(tree263), "Number of species and number of tips differ");
DataSetFilter codonfilter264 = CreateFilter(data, 3, "789-791", "", "TAA,TAG,TGA");
assert(data.species == codonfilter264.species, "species number mismatch");
assert(1 == codonfilter264.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter264");
UseModel(P264xy);
ExecuteCommands("Tree tree264 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree264, tree);
assert(data.species == TipCount(tree264), "Number of species and number of tips differ");
DataSetFilter codonfilter265 = CreateFilter(data, 3, "792-794", "", "TAA,TAG,TGA");
assert(data.species == codonfilter265.species, "species number mismatch");
assert(1 == codonfilter265.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter265");
UseModel(P265xy);
ExecuteCommands("Tree tree265 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree265, tree);
assert(data.species == TipCount(tree265), "Number of species and number of tips differ");
DataSetFilter codonfilter266 = CreateFilter(data, 3, "795-797", "", "TAA,TAG,TGA");
assert(data.species == codonfilter266.species, "species number mismatch");
assert(1 == codonfilter266.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter266");
UseModel(P266xy);
ExecuteCommands("Tree tree266 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree266, tree);
assert(data.species == TipCount(tree266), "Number of species and number of tips differ");
DataSetFilter codonfilter267 = CreateFilter(data, 3, "798-800", "", "TAA,TAG,TGA");
assert(data.species == codonfilter267.species, "species number mismatch");
assert(1 == codonfilter267.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter267");
UseModel(P267xy);
ExecuteCommands("Tree tree267 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree267, tree);
assert(data.species == TipCount(tree267), "Number of species and number of tips differ");
DataSetFilter codonfilter268 = CreateFilter(data, 3, "801-803", "", "TAA,TAG,TGA");
assert(data.species == codonfilter268.species, "species number mismatch");
assert(1 == codonfilter268.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter268");
UseModel(P268xy);
ExecuteCommands("Tree tree268 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree268, tree);
assert(data.species == TipCount(tree268), "Number of species and number of tips differ");
DataSetFilter codonfilter269 = CreateFilter(data, 3, "804-806", "", "TAA,TAG,TGA");
assert(data.species == codonfilter269.species, "species number mismatch");
assert(1 == codonfilter269.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter269");
UseModel(P269xy);
ExecuteCommands("Tree tree269 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree269, tree);
assert(data.species == TipCount(tree269), "Number of species and number of tips differ");
DataSetFilter codonfilter270 = CreateFilter(data, 3, "807-809", "", "TAA,TAG,TGA");
assert(data.species == codonfilter270.species, "species number mismatch");
assert(1 == codonfilter270.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter270");
UseModel(P270xy);
ExecuteCommands("Tree tree270 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree270, tree);
assert(data.species == TipCount(tree270), "Number of species and number of tips differ");
DataSetFilter codonfilter271 = CreateFilter(data, 3, "810-812", "", "TAA,TAG,TGA");
assert(data.species == codonfilter271.species, "species number mismatch");
assert(1 == codonfilter271.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter271");
UseModel(P271xy);
ExecuteCommands("Tree tree271 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree271, tree);
assert(data.species == TipCount(tree271), "Number of species and number of tips differ");
DataSetFilter codonfilter272 = CreateFilter(data, 3, "813-815", "", "TAA,TAG,TGA");
assert(data.species == codonfilter272.species, "species number mismatch");
assert(1 == codonfilter272.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter272");
UseModel(P272xy);
ExecuteCommands("Tree tree272 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree272, tree);
assert(data.species == TipCount(tree272), "Number of species and number of tips differ");
DataSetFilter codonfilter273 = CreateFilter(data, 3, "816-818", "", "TAA,TAG,TGA");
assert(data.species == codonfilter273.species, "species number mismatch");
assert(1 == codonfilter273.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter273");
UseModel(P273xy);
ExecuteCommands("Tree tree273 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree273, tree);
assert(data.species == TipCount(tree273), "Number of species and number of tips differ");
DataSetFilter codonfilter274 = CreateFilter(data, 3, "819-821", "", "TAA,TAG,TGA");
assert(data.species == codonfilter274.species, "species number mismatch");
assert(1 == codonfilter274.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter274");
UseModel(P274xy);
ExecuteCommands("Tree tree274 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree274, tree);
assert(data.species == TipCount(tree274), "Number of species and number of tips differ");
DataSetFilter codonfilter275 = CreateFilter(data, 3, "822-824", "", "TAA,TAG,TGA");
assert(data.species == codonfilter275.species, "species number mismatch");
assert(1 == codonfilter275.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter275");
UseModel(P275xy);
ExecuteCommands("Tree tree275 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree275, tree);
assert(data.species == TipCount(tree275), "Number of species and number of tips differ");
DataSetFilter codonfilter276 = CreateFilter(data, 3, "825-827", "", "TAA,TAG,TGA");
assert(data.species == codonfilter276.species, "species number mismatch");
assert(1 == codonfilter276.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter276");
UseModel(P276xy);
ExecuteCommands("Tree tree276 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree276, tree);
assert(data.species == TipCount(tree276), "Number of species and number of tips differ");
DataSetFilter codonfilter277 = CreateFilter(data, 3, "828-830", "", "TAA,TAG,TGA");
assert(data.species == codonfilter277.species, "species number mismatch");
assert(1 == codonfilter277.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter277");
UseModel(P277xy);
ExecuteCommands("Tree tree277 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree277, tree);
assert(data.species == TipCount(tree277), "Number of species and number of tips differ");
DataSetFilter codonfilter278 = CreateFilter(data, 3, "831-833", "", "TAA,TAG,TGA");
assert(data.species == codonfilter278.species, "species number mismatch");
assert(1 == codonfilter278.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter278");
UseModel(P278xy);
ExecuteCommands("Tree tree278 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree278, tree);
assert(data.species == TipCount(tree278), "Number of species and number of tips differ");
DataSetFilter codonfilter279 = CreateFilter(data, 3, "834-836", "", "TAA,TAG,TGA");
assert(data.species == codonfilter279.species, "species number mismatch");
assert(1 == codonfilter279.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter279");
UseModel(P279xy);
ExecuteCommands("Tree tree279 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree279, tree);
assert(data.species == TipCount(tree279), "Number of species and number of tips differ");
DataSetFilter codonfilter280 = CreateFilter(data, 3, "837-839", "", "TAA,TAG,TGA");
assert(data.species == codonfilter280.species, "species number mismatch");
assert(1 == codonfilter280.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter280");
UseModel(P280xy);
ExecuteCommands("Tree tree280 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree280, tree);
assert(data.species == TipCount(tree280), "Number of species and number of tips differ");
DataSetFilter codonfilter281 = CreateFilter(data, 3, "840-842", "", "TAA,TAG,TGA");
assert(data.species == codonfilter281.species, "species number mismatch");
assert(1 == codonfilter281.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter281");
UseModel(P281xy);
ExecuteCommands("Tree tree281 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree281, tree);
assert(data.species == TipCount(tree281), "Number of species and number of tips differ");
DataSetFilter codonfilter282 = CreateFilter(data, 3, "843-845", "", "TAA,TAG,TGA");
assert(data.species == codonfilter282.species, "species number mismatch");
assert(1 == codonfilter282.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter282");
UseModel(P282xy);
ExecuteCommands("Tree tree282 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree282, tree);
assert(data.species == TipCount(tree282), "Number of species and number of tips differ");
DataSetFilter codonfilter283 = CreateFilter(data, 3, "846-848", "", "TAA,TAG,TGA");
assert(data.species == codonfilter283.species, "species number mismatch");
assert(1 == codonfilter283.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter283");
UseModel(P283xy);
ExecuteCommands("Tree tree283 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree283, tree);
assert(data.species == TipCount(tree283), "Number of species and number of tips differ");
DataSetFilter codonfilter284 = CreateFilter(data, 3, "849-851", "", "TAA,TAG,TGA");
assert(data.species == codonfilter284.species, "species number mismatch");
assert(1 == codonfilter284.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter284");
UseModel(P284xy);
ExecuteCommands("Tree tree284 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree284, tree);
assert(data.species == TipCount(tree284), "Number of species and number of tips differ");
DataSetFilter codonfilter285 = CreateFilter(data, 3, "852-854", "", "TAA,TAG,TGA");
assert(data.species == codonfilter285.species, "species number mismatch");
assert(1 == codonfilter285.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter285");
UseModel(P285xy);
ExecuteCommands("Tree tree285 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree285, tree);
assert(data.species == TipCount(tree285), "Number of species and number of tips differ");
DataSetFilter codonfilter286 = CreateFilter(data, 3, "855-857", "", "TAA,TAG,TGA");
assert(data.species == codonfilter286.species, "species number mismatch");
assert(1 == codonfilter286.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter286");
UseModel(P286xy);
ExecuteCommands("Tree tree286 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree286, tree);
assert(data.species == TipCount(tree286), "Number of species and number of tips differ");
DataSetFilter codonfilter287 = CreateFilter(data, 3, "858-860", "", "TAA,TAG,TGA");
assert(data.species == codonfilter287.species, "species number mismatch");
assert(1 == codonfilter287.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter287");
UseModel(P287xy);
ExecuteCommands("Tree tree287 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree287, tree);
assert(data.species == TipCount(tree287), "Number of species and number of tips differ");
DataSetFilter codonfilter288 = CreateFilter(data, 3, "861-863", "", "TAA,TAG,TGA");
assert(data.species == codonfilter288.species, "species number mismatch");
assert(1 == codonfilter288.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter288");
UseModel(P288xy);
ExecuteCommands("Tree tree288 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree288, tree);
assert(data.species == TipCount(tree288), "Number of species and number of tips differ");
DataSetFilter codonfilter289 = CreateFilter(data, 3, "864-866", "", "TAA,TAG,TGA");
assert(data.species == codonfilter289.species, "species number mismatch");
assert(1 == codonfilter289.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter289");
UseModel(P289xy);
ExecuteCommands("Tree tree289 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree289, tree);
assert(data.species == TipCount(tree289), "Number of species and number of tips differ");
DataSetFilter codonfilter290 = CreateFilter(data, 3, "867-869", "", "TAA,TAG,TGA");
assert(data.species == codonfilter290.species, "species number mismatch");
assert(1 == codonfilter290.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter290");
UseModel(P290xy);
ExecuteCommands("Tree tree290 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree290, tree);
assert(data.species == TipCount(tree290), "Number of species and number of tips differ");
DataSetFilter codonfilter291 = CreateFilter(data, 3, "870-872", "", "TAA,TAG,TGA");
assert(data.species == codonfilter291.species, "species number mismatch");
assert(1 == codonfilter291.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter291");
UseModel(P291xy);
ExecuteCommands("Tree tree291 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree291, tree);
assert(data.species == TipCount(tree291), "Number of species and number of tips differ");
DataSetFilter codonfilter292 = CreateFilter(data, 3, "873-875", "", "TAA,TAG,TGA");
assert(data.species == codonfilter292.species, "species number mismatch");
assert(1 == codonfilter292.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter292");
UseModel(P292xy);
ExecuteCommands("Tree tree292 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree292, tree);
assert(data.species == TipCount(tree292), "Number of species and number of tips differ");
DataSetFilter codonfilter293 = CreateFilter(data, 3, "876-878", "", "TAA,TAG,TGA");
assert(data.species == codonfilter293.species, "species number mismatch");
assert(1 == codonfilter293.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter293");
UseModel(P293xy);
ExecuteCommands("Tree tree293 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree293, tree);
assert(data.species == TipCount(tree293), "Number of species and number of tips differ");
DataSetFilter codonfilter294 = CreateFilter(data, 3, "879-881", "", "TAA,TAG,TGA");
assert(data.species == codonfilter294.species, "species number mismatch");
assert(1 == codonfilter294.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter294");
UseModel(P294xy);
ExecuteCommands("Tree tree294 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree294, tree);
assert(data.species == TipCount(tree294), "Number of species and number of tips differ");
DataSetFilter codonfilter295 = CreateFilter(data, 3, "882-884", "", "TAA,TAG,TGA");
assert(data.species == codonfilter295.species, "species number mismatch");
assert(1 == codonfilter295.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter295");
UseModel(P295xy);
ExecuteCommands("Tree tree295 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree295, tree);
assert(data.species == TipCount(tree295), "Number of species and number of tips differ");
DataSetFilter codonfilter296 = CreateFilter(data, 3, "885-887", "", "TAA,TAG,TGA");
assert(data.species == codonfilter296.species, "species number mismatch");
assert(1 == codonfilter296.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter296");
UseModel(P296xy);
ExecuteCommands("Tree tree296 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree296, tree);
assert(data.species == TipCount(tree296), "Number of species and number of tips differ");
DataSetFilter codonfilter297 = CreateFilter(data, 3, "888-890", "", "TAA,TAG,TGA");
assert(data.species == codonfilter297.species, "species number mismatch");
assert(1 == codonfilter297.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter297");
UseModel(P297xy);
ExecuteCommands("Tree tree297 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree297, tree);
assert(data.species == TipCount(tree297), "Number of species and number of tips differ");
DataSetFilter codonfilter298 = CreateFilter(data, 3, "891-893", "", "TAA,TAG,TGA");
assert(data.species == codonfilter298.species, "species number mismatch");
assert(1 == codonfilter298.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter298");
UseModel(P298xy);
ExecuteCommands("Tree tree298 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree298, tree);
assert(data.species == TipCount(tree298), "Number of species and number of tips differ");
DataSetFilter codonfilter299 = CreateFilter(data, 3, "894-896", "", "TAA,TAG,TGA");
assert(data.species == codonfilter299.species, "species number mismatch");
assert(1 == codonfilter299.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter299");
UseModel(P299xy);
ExecuteCommands("Tree tree299 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree299, tree);
assert(data.species == TipCount(tree299), "Number of species and number of tips differ");
DataSetFilter codonfilter300 = CreateFilter(data, 3, "897-899", "", "TAA,TAG,TGA");
assert(data.species == codonfilter300.species, "species number mismatch");
assert(1 == codonfilter300.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter300");
UseModel(P300xy);
ExecuteCommands("Tree tree300 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree300, tree);
assert(data.species == TipCount(tree300), "Number of species and number of tips differ");
DataSetFilter codonfilter301 = CreateFilter(data, 3, "900-902", "", "TAA,TAG,TGA");
assert(data.species == codonfilter301.species, "species number mismatch");
assert(1 == codonfilter301.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter301");
UseModel(P301xy);
ExecuteCommands("Tree tree301 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree301, tree);
assert(data.species == TipCount(tree301), "Number of species and number of tips differ");
DataSetFilter codonfilter302 = CreateFilter(data, 3, "903-905", "", "TAA,TAG,TGA");
assert(data.species == codonfilter302.species, "species number mismatch");
assert(1 == codonfilter302.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter302");
UseModel(P302xy);
ExecuteCommands("Tree tree302 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree302, tree);
assert(data.species == TipCount(tree302), "Number of species and number of tips differ");
DataSetFilter codonfilter303 = CreateFilter(data, 3, "906-908", "", "TAA,TAG,TGA");
assert(data.species == codonfilter303.species, "species number mismatch");
assert(1 == codonfilter303.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter303");
UseModel(P303xy);
ExecuteCommands("Tree tree303 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree303, tree);
assert(data.species == TipCount(tree303), "Number of species and number of tips differ");
DataSetFilter codonfilter304 = CreateFilter(data, 3, "909-911", "", "TAA,TAG,TGA");
assert(data.species == codonfilter304.species, "species number mismatch");
assert(1 == codonfilter304.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter304");
UseModel(P304xy);
ExecuteCommands("Tree tree304 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree304, tree);
assert(data.species == TipCount(tree304), "Number of species and number of tips differ");
DataSetFilter codonfilter305 = CreateFilter(data, 3, "912-914", "", "TAA,TAG,TGA");
assert(data.species == codonfilter305.species, "species number mismatch");
assert(1 == codonfilter305.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter305");
UseModel(P305xy);
ExecuteCommands("Tree tree305 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree305, tree);
assert(data.species == TipCount(tree305), "Number of species and number of tips differ");
DataSetFilter codonfilter306 = CreateFilter(data, 3, "915-917", "", "TAA,TAG,TGA");
assert(data.species == codonfilter306.species, "species number mismatch");
assert(1 == codonfilter306.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter306");
UseModel(P306xy);
ExecuteCommands("Tree tree306 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree306, tree);
assert(data.species == TipCount(tree306), "Number of species and number of tips differ");
DataSetFilter codonfilter307 = CreateFilter(data, 3, "918-920", "", "TAA,TAG,TGA");
assert(data.species == codonfilter307.species, "species number mismatch");
assert(1 == codonfilter307.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter307");
UseModel(P307xy);
ExecuteCommands("Tree tree307 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree307, tree);
assert(data.species == TipCount(tree307), "Number of species and number of tips differ");
DataSetFilter codonfilter308 = CreateFilter(data, 3, "921-923", "", "TAA,TAG,TGA");
assert(data.species == codonfilter308.species, "species number mismatch");
assert(1 == codonfilter308.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter308");
UseModel(P308xy);
ExecuteCommands("Tree tree308 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree308, tree);
assert(data.species == TipCount(tree308), "Number of species and number of tips differ");
DataSetFilter codonfilter309 = CreateFilter(data, 3, "924-926", "", "TAA,TAG,TGA");
assert(data.species == codonfilter309.species, "species number mismatch");
assert(1 == codonfilter309.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter309");
UseModel(P309xy);
ExecuteCommands("Tree tree309 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree309, tree);
assert(data.species == TipCount(tree309), "Number of species and number of tips differ");
DataSetFilter codonfilter310 = CreateFilter(data, 3, "927-929", "", "TAA,TAG,TGA");
assert(data.species == codonfilter310.species, "species number mismatch");
assert(1 == codonfilter310.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter310");
UseModel(P310xy);
ExecuteCommands("Tree tree310 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree310, tree);
assert(data.species == TipCount(tree310), "Number of species and number of tips differ");
DataSetFilter codonfilter311 = CreateFilter(data, 3, "930-932", "", "TAA,TAG,TGA");
assert(data.species == codonfilter311.species, "species number mismatch");
assert(1 == codonfilter311.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter311");
UseModel(P311xy);
ExecuteCommands("Tree tree311 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree311, tree);
assert(data.species == TipCount(tree311), "Number of species and number of tips differ");
DataSetFilter codonfilter312 = CreateFilter(data, 3, "933-935", "", "TAA,TAG,TGA");
assert(data.species == codonfilter312.species, "species number mismatch");
assert(1 == codonfilter312.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter312");
UseModel(P312xy);
ExecuteCommands("Tree tree312 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree312, tree);
assert(data.species == TipCount(tree312), "Number of species and number of tips differ");
DataSetFilter codonfilter313 = CreateFilter(data, 3, "936-938", "", "TAA,TAG,TGA");
assert(data.species == codonfilter313.species, "species number mismatch");
assert(1 == codonfilter313.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter313");
UseModel(P313xy);
ExecuteCommands("Tree tree313 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree313, tree);
assert(data.species == TipCount(tree313), "Number of species and number of tips differ");
DataSetFilter codonfilter314 = CreateFilter(data, 3, "939-941", "", "TAA,TAG,TGA");
assert(data.species == codonfilter314.species, "species number mismatch");
assert(1 == codonfilter314.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter314");
UseModel(P314xy);
ExecuteCommands("Tree tree314 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree314, tree);
assert(data.species == TipCount(tree314), "Number of species and number of tips differ");
DataSetFilter codonfilter315 = CreateFilter(data, 3, "942-944", "", "TAA,TAG,TGA");
assert(data.species == codonfilter315.species, "species number mismatch");
assert(1 == codonfilter315.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter315");
UseModel(P315xy);
ExecuteCommands("Tree tree315 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree315, tree);
assert(data.species == TipCount(tree315), "Number of species and number of tips differ");
DataSetFilter codonfilter316 = CreateFilter(data, 3, "945-947", "", "TAA,TAG,TGA");
assert(data.species == codonfilter316.species, "species number mismatch");
assert(1 == codonfilter316.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter316");
UseModel(P316xy);
ExecuteCommands("Tree tree316 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree316, tree);
assert(data.species == TipCount(tree316), "Number of species and number of tips differ");
DataSetFilter codonfilter317 = CreateFilter(data, 3, "948-950", "", "TAA,TAG,TGA");
assert(data.species == codonfilter317.species, "species number mismatch");
assert(1 == codonfilter317.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter317");
UseModel(P317xy);
ExecuteCommands("Tree tree317 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree317, tree);
assert(data.species == TipCount(tree317), "Number of species and number of tips differ");
DataSetFilter codonfilter318 = CreateFilter(data, 3, "951-953", "", "TAA,TAG,TGA");
assert(data.species == codonfilter318.species, "species number mismatch");
assert(1 == codonfilter318.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter318");
UseModel(P318xy);
ExecuteCommands("Tree tree318 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree318, tree);
assert(data.species == TipCount(tree318), "Number of species and number of tips differ");
DataSetFilter codonfilter319 = CreateFilter(data, 3, "954-956", "", "TAA,TAG,TGA");
assert(data.species == codonfilter319.species, "species number mismatch");
assert(1 == codonfilter319.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter319");
UseModel(P319xy);
ExecuteCommands("Tree tree319 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree319, tree);
assert(data.species == TipCount(tree319), "Number of species and number of tips differ");
DataSetFilter codonfilter320 = CreateFilter(data, 3, "957-959", "", "TAA,TAG,TGA");
assert(data.species == codonfilter320.species, "species number mismatch");
assert(1 == codonfilter320.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter320");
UseModel(P320xy);
ExecuteCommands("Tree tree320 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree320, tree);
assert(data.species == TipCount(tree320), "Number of species and number of tips differ");
DataSetFilter codonfilter321 = CreateFilter(data, 3, "960-962", "", "TAA,TAG,TGA");
assert(data.species == codonfilter321.species, "species number mismatch");
assert(1 == codonfilter321.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter321");
UseModel(P321xy);
ExecuteCommands("Tree tree321 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree321, tree);
assert(data.species == TipCount(tree321), "Number of species and number of tips differ");
DataSetFilter codonfilter322 = CreateFilter(data, 3, "963-965", "", "TAA,TAG,TGA");
assert(data.species == codonfilter322.species, "species number mismatch");
assert(1 == codonfilter322.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter322");
UseModel(P322xy);
ExecuteCommands("Tree tree322 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree322, tree);
assert(data.species == TipCount(tree322), "Number of species and number of tips differ");
DataSetFilter codonfilter323 = CreateFilter(data, 3, "966-968", "", "TAA,TAG,TGA");
assert(data.species == codonfilter323.species, "species number mismatch");
assert(1 == codonfilter323.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter323");
UseModel(P323xy);
ExecuteCommands("Tree tree323 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree323, tree);
assert(data.species == TipCount(tree323), "Number of species and number of tips differ");
DataSetFilter codonfilter324 = CreateFilter(data, 3, "969-971", "", "TAA,TAG,TGA");
assert(data.species == codonfilter324.species, "species number mismatch");
assert(1 == codonfilter324.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter324");
UseModel(P324xy);
ExecuteCommands("Tree tree324 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree324, tree);
assert(data.species == TipCount(tree324), "Number of species and number of tips differ");
DataSetFilter codonfilter325 = CreateFilter(data, 3, "972-974", "", "TAA,TAG,TGA");
assert(data.species == codonfilter325.species, "species number mismatch");
assert(1 == codonfilter325.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter325");
UseModel(P325xy);
ExecuteCommands("Tree tree325 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree325, tree);
assert(data.species == TipCount(tree325), "Number of species and number of tips differ");
DataSetFilter codonfilter326 = CreateFilter(data, 3, "975-977", "", "TAA,TAG,TGA");
assert(data.species == codonfilter326.species, "species number mismatch");
assert(1 == codonfilter326.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter326");
UseModel(P326xy);
ExecuteCommands("Tree tree326 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree326, tree);
assert(data.species == TipCount(tree326), "Number of species and number of tips differ");
DataSetFilter codonfilter327 = CreateFilter(data, 3, "978-980", "", "TAA,TAG,TGA");
assert(data.species == codonfilter327.species, "species number mismatch");
assert(1 == codonfilter327.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter327");
UseModel(P327xy);
ExecuteCommands("Tree tree327 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree327, tree);
assert(data.species == TipCount(tree327), "Number of species and number of tips differ");
DataSetFilter codonfilter328 = CreateFilter(data, 3, "981-983", "", "TAA,TAG,TGA");
assert(data.species == codonfilter328.species, "species number mismatch");
assert(1 == codonfilter328.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter328");
UseModel(P328xy);
ExecuteCommands("Tree tree328 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree328, tree);
assert(data.species == TipCount(tree328), "Number of species and number of tips differ");
DataSetFilter codonfilter329 = CreateFilter(data, 3, "984-986", "", "TAA,TAG,TGA");
assert(data.species == codonfilter329.species, "species number mismatch");
assert(1 == codonfilter329.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter329");
UseModel(P329xy);
ExecuteCommands("Tree tree329 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree329, tree);
assert(data.species == TipCount(tree329), "Number of species and number of tips differ");
DataSetFilter codonfilter330 = CreateFilter(data, 3, "987-989", "", "TAA,TAG,TGA");
assert(data.species == codonfilter330.species, "species number mismatch");
assert(1 == codonfilter330.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter330");
UseModel(P330xy);
ExecuteCommands("Tree tree330 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree330, tree);
assert(data.species == TipCount(tree330), "Number of species and number of tips differ");
DataSetFilter codonfilter331 = CreateFilter(data, 3, "990-992", "", "TAA,TAG,TGA");
assert(data.species == codonfilter331.species, "species number mismatch");
assert(1 == codonfilter331.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter331");
UseModel(P331xy);
ExecuteCommands("Tree tree331 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree331, tree);
assert(data.species == TipCount(tree331), "Number of species and number of tips differ");
DataSetFilter codonfilter332 = CreateFilter(data, 3, "993-995", "", "TAA,TAG,TGA");
assert(data.species == codonfilter332.species, "species number mismatch");
assert(1 == codonfilter332.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter332");
UseModel(P332xy);
ExecuteCommands("Tree tree332 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree332, tree);
assert(data.species == TipCount(tree332), "Number of species and number of tips differ");
DataSetFilter codonfilter333 = CreateFilter(data, 3, "996-998", "", "TAA,TAG,TGA");
assert(data.species == codonfilter333.species, "species number mismatch");
assert(1 == codonfilter333.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter333");
UseModel(P333xy);
ExecuteCommands("Tree tree333 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree333, tree);
assert(data.species == TipCount(tree333), "Number of species and number of tips differ");
DataSetFilter codonfilter334 = CreateFilter(data, 3, "999-1001", "", "TAA,TAG,TGA");
assert(data.species == codonfilter334.species, "species number mismatch");
assert(1 == codonfilter334.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter334");
UseModel(P334xy);
ExecuteCommands("Tree tree334 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree334, tree);
assert(data.species == TipCount(tree334), "Number of species and number of tips differ");
DataSetFilter codonfilter335 = CreateFilter(data, 3, "1002-1004", "", "TAA,TAG,TGA");
assert(data.species == codonfilter335.species, "species number mismatch");
assert(1 == codonfilter335.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter335");
UseModel(P335xy);
ExecuteCommands("Tree tree335 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree335, tree);
assert(data.species == TipCount(tree335), "Number of species and number of tips differ");
DataSetFilter codonfilter336 = CreateFilter(data, 3, "1005-1007", "", "TAA,TAG,TGA");
assert(data.species == codonfilter336.species, "species number mismatch");
assert(1 == codonfilter336.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter336");
UseModel(P336xy);
ExecuteCommands("Tree tree336 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree336, tree);
assert(data.species == TipCount(tree336), "Number of species and number of tips differ");
DataSetFilter codonfilter337 = CreateFilter(data, 3, "1008-1010", "", "TAA,TAG,TGA");
assert(data.species == codonfilter337.species, "species number mismatch");
assert(1 == codonfilter337.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter337");
UseModel(P337xy);
ExecuteCommands("Tree tree337 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree337, tree);
assert(data.species == TipCount(tree337), "Number of species and number of tips differ");
DataSetFilter codonfilter338 = CreateFilter(data, 3, "1011-1013", "", "TAA,TAG,TGA");
assert(data.species == codonfilter338.species, "species number mismatch");
assert(1 == codonfilter338.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter338");
UseModel(P338xy);
ExecuteCommands("Tree tree338 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree338, tree);
assert(data.species == TipCount(tree338), "Number of species and number of tips differ");
DataSetFilter codonfilter339 = CreateFilter(data, 3, "1014-1016", "", "TAA,TAG,TGA");
assert(data.species == codonfilter339.species, "species number mismatch");
assert(1 == codonfilter339.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter339");
UseModel(P339xy);
ExecuteCommands("Tree tree339 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree339, tree);
assert(data.species == TipCount(tree339), "Number of species and number of tips differ");
DataSetFilter codonfilter340 = CreateFilter(data, 3, "1017-1019", "", "TAA,TAG,TGA");
assert(data.species == codonfilter340.species, "species number mismatch");
assert(1 == codonfilter340.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter340");
UseModel(P340xy);
ExecuteCommands("Tree tree340 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree340, tree);
assert(data.species == TipCount(tree340), "Number of species and number of tips differ");
DataSetFilter codonfilter341 = CreateFilter(data, 3, "1020-1022", "", "TAA,TAG,TGA");
assert(data.species == codonfilter341.species, "species number mismatch");
assert(1 == codonfilter341.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter341");
UseModel(P341xy);
ExecuteCommands("Tree tree341 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree341, tree);
assert(data.species == TipCount(tree341), "Number of species and number of tips differ");
DataSetFilter codonfilter342 = CreateFilter(data, 3, "1023-1025", "", "TAA,TAG,TGA");
assert(data.species == codonfilter342.species, "species number mismatch");
assert(1 == codonfilter342.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter342");
UseModel(P342xy);
ExecuteCommands("Tree tree342 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree342, tree);
assert(data.species == TipCount(tree342), "Number of species and number of tips differ");
DataSetFilter codonfilter343 = CreateFilter(data, 3, "1026-1028", "", "TAA,TAG,TGA");
assert(data.species == codonfilter343.species, "species number mismatch");
assert(1 == codonfilter343.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter343");
UseModel(P343xy);
ExecuteCommands("Tree tree343 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree343, tree);
assert(data.species == TipCount(tree343), "Number of species and number of tips differ");
DataSetFilter codonfilter344 = CreateFilter(data, 3, "1029-1031", "", "TAA,TAG,TGA");
assert(data.species == codonfilter344.species, "species number mismatch");
assert(1 == codonfilter344.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter344");
UseModel(P344xy);
ExecuteCommands("Tree tree344 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree344, tree);
assert(data.species == TipCount(tree344), "Number of species and number of tips differ");
DataSetFilter codonfilter345 = CreateFilter(data, 3, "1032-1034", "", "TAA,TAG,TGA");
assert(data.species == codonfilter345.species, "species number mismatch");
assert(1 == codonfilter345.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter345");
UseModel(P345xy);
ExecuteCommands("Tree tree345 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree345, tree);
assert(data.species == TipCount(tree345), "Number of species and number of tips differ");
DataSetFilter codonfilter346 = CreateFilter(data, 3, "1035-1037", "", "TAA,TAG,TGA");
assert(data.species == codonfilter346.species, "species number mismatch");
assert(1 == codonfilter346.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter346");
UseModel(P346xy);
ExecuteCommands("Tree tree346 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree346, tree);
assert(data.species == TipCount(tree346), "Number of species and number of tips differ");
DataSetFilter codonfilter347 = CreateFilter(data, 3, "1038-1040", "", "TAA,TAG,TGA");
assert(data.species == codonfilter347.species, "species number mismatch");
assert(1 == codonfilter347.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter347");
UseModel(P347xy);
ExecuteCommands("Tree tree347 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree347, tree);
assert(data.species == TipCount(tree347), "Number of species and number of tips differ");
DataSetFilter codonfilter348 = CreateFilter(data, 3, "1041-1043", "", "TAA,TAG,TGA");
assert(data.species == codonfilter348.species, "species number mismatch");
assert(1 == codonfilter348.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter348");
UseModel(P348xy);
ExecuteCommands("Tree tree348 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree348, tree);
assert(data.species == TipCount(tree348), "Number of species and number of tips differ");
DataSetFilter codonfilter349 = CreateFilter(data, 3, "1044-1046", "", "TAA,TAG,TGA");
assert(data.species == codonfilter349.species, "species number mismatch");
assert(1 == codonfilter349.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter349");
UseModel(P349xy);
ExecuteCommands("Tree tree349 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree349, tree);
assert(data.species == TipCount(tree349), "Number of species and number of tips differ");
DataSetFilter codonfilter350 = CreateFilter(data, 3, "1047-1049", "", "TAA,TAG,TGA");
assert(data.species == codonfilter350.species, "species number mismatch");
assert(1 == codonfilter350.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter350");
UseModel(P350xy);
ExecuteCommands("Tree tree350 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree350, tree);
assert(data.species == TipCount(tree350), "Number of species and number of tips differ");
DataSetFilter codonfilter351 = CreateFilter(data, 3, "1050-1052", "", "TAA,TAG,TGA");
assert(data.species == codonfilter351.species, "species number mismatch");
assert(1 == codonfilter351.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter351");
UseModel(P351xy);
ExecuteCommands("Tree tree351 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree351, tree);
assert(data.species == TipCount(tree351), "Number of species and number of tips differ");
DataSetFilter codonfilter352 = CreateFilter(data, 3, "1053-1055", "", "TAA,TAG,TGA");
assert(data.species == codonfilter352.species, "species number mismatch");
assert(1 == codonfilter352.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter352");
UseModel(P352xy);
ExecuteCommands("Tree tree352 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree352, tree);
assert(data.species == TipCount(tree352), "Number of species and number of tips differ");
DataSetFilter codonfilter353 = CreateFilter(data, 3, "1056-1058", "", "TAA,TAG,TGA");
assert(data.species == codonfilter353.species, "species number mismatch");
assert(1 == codonfilter353.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter353");
UseModel(P353xy);
ExecuteCommands("Tree tree353 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree353, tree);
assert(data.species == TipCount(tree353), "Number of species and number of tips differ");
DataSetFilter codonfilter354 = CreateFilter(data, 3, "1059-1061", "", "TAA,TAG,TGA");
assert(data.species == codonfilter354.species, "species number mismatch");
assert(1 == codonfilter354.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter354");
UseModel(P354xy);
ExecuteCommands("Tree tree354 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree354, tree);
assert(data.species == TipCount(tree354), "Number of species and number of tips differ");
DataSetFilter codonfilter355 = CreateFilter(data, 3, "1062-1064", "", "TAA,TAG,TGA");
assert(data.species == codonfilter355.species, "species number mismatch");
assert(1 == codonfilter355.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter355");
UseModel(P355xy);
ExecuteCommands("Tree tree355 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree355, tree);
assert(data.species == TipCount(tree355), "Number of species and number of tips differ");
DataSetFilter codonfilter356 = CreateFilter(data, 3, "1065-1067", "", "TAA,TAG,TGA");
assert(data.species == codonfilter356.species, "species number mismatch");
assert(1 == codonfilter356.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter356");
UseModel(P356xy);
ExecuteCommands("Tree tree356 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree356, tree);
assert(data.species == TipCount(tree356), "Number of species and number of tips differ");
DataSetFilter codonfilter357 = CreateFilter(data, 3, "1068-1070", "", "TAA,TAG,TGA");
assert(data.species == codonfilter357.species, "species number mismatch");
assert(1 == codonfilter357.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter357");
UseModel(P357xy);
ExecuteCommands("Tree tree357 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree357, tree);
assert(data.species == TipCount(tree357), "Number of species and number of tips differ");
DataSetFilter codonfilter358 = CreateFilter(data, 3, "1071-1073", "", "TAA,TAG,TGA");
assert(data.species == codonfilter358.species, "species number mismatch");
assert(1 == codonfilter358.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter358");
UseModel(P358xy);
ExecuteCommands("Tree tree358 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree358, tree);
assert(data.species == TipCount(tree358), "Number of species and number of tips differ");
DataSetFilter codonfilter359 = CreateFilter(data, 3, "1074-1076", "", "TAA,TAG,TGA");
assert(data.species == codonfilter359.species, "species number mismatch");
assert(1 == codonfilter359.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter359");
UseModel(P359xy);
ExecuteCommands("Tree tree359 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree359, tree);
assert(data.species == TipCount(tree359), "Number of species and number of tips differ");
DataSetFilter codonfilter360 = CreateFilter(data, 3, "1077-1079", "", "TAA,TAG,TGA");
assert(data.species == codonfilter360.species, "species number mismatch");
assert(1 == codonfilter360.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter360");
UseModel(P360xy);
ExecuteCommands("Tree tree360 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree360, tree);
assert(data.species == TipCount(tree360), "Number of species and number of tips differ");
DataSetFilter codonfilter361 = CreateFilter(data, 3, "1080-1082", "", "TAA,TAG,TGA");
assert(data.species == codonfilter361.species, "species number mismatch");
assert(1 == codonfilter361.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter361");
UseModel(P361xy);
ExecuteCommands("Tree tree361 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree361, tree);
assert(data.species == TipCount(tree361), "Number of species and number of tips differ");
DataSetFilter codonfilter362 = CreateFilter(data, 3, "1083-1085", "", "TAA,TAG,TGA");
assert(data.species == codonfilter362.species, "species number mismatch");
assert(1 == codonfilter362.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter362");
UseModel(P362xy);
ExecuteCommands("Tree tree362 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree362, tree);
assert(data.species == TipCount(tree362), "Number of species and number of tips differ");
DataSetFilter codonfilter363 = CreateFilter(data, 3, "1086-1088", "", "TAA,TAG,TGA");
assert(data.species == codonfilter363.species, "species number mismatch");
assert(1 == codonfilter363.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter363");
UseModel(P363xy);
ExecuteCommands("Tree tree363 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree363, tree);
assert(data.species == TipCount(tree363), "Number of species and number of tips differ");
DataSetFilter codonfilter364 = CreateFilter(data, 3, "1089-1091", "", "TAA,TAG,TGA");
assert(data.species == codonfilter364.species, "species number mismatch");
assert(1 == codonfilter364.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter364");
UseModel(P364xy);
ExecuteCommands("Tree tree364 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree364, tree);
assert(data.species == TipCount(tree364), "Number of species and number of tips differ");
DataSetFilter codonfilter365 = CreateFilter(data, 3, "1092-1094", "", "TAA,TAG,TGA");
assert(data.species == codonfilter365.species, "species number mismatch");
assert(1 == codonfilter365.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter365");
UseModel(P365xy);
ExecuteCommands("Tree tree365 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree365, tree);
assert(data.species == TipCount(tree365), "Number of species and number of tips differ");
DataSetFilter codonfilter366 = CreateFilter(data, 3, "1095-1097", "", "TAA,TAG,TGA");
assert(data.species == codonfilter366.species, "species number mismatch");
assert(1 == codonfilter366.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter366");
UseModel(P366xy);
ExecuteCommands("Tree tree366 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree366, tree);
assert(data.species == TipCount(tree366), "Number of species and number of tips differ");
DataSetFilter codonfilter367 = CreateFilter(data, 3, "1098-1100", "", "TAA,TAG,TGA");
assert(data.species == codonfilter367.species, "species number mismatch");
assert(1 == codonfilter367.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter367");
UseModel(P367xy);
ExecuteCommands("Tree tree367 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree367, tree);
assert(data.species == TipCount(tree367), "Number of species and number of tips differ");
DataSetFilter codonfilter368 = CreateFilter(data, 3, "1101-1103", "", "TAA,TAG,TGA");
assert(data.species == codonfilter368.species, "species number mismatch");
assert(1 == codonfilter368.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter368");
UseModel(P368xy);
ExecuteCommands("Tree tree368 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree368, tree);
assert(data.species == TipCount(tree368), "Number of species and number of tips differ");
DataSetFilter codonfilter369 = CreateFilter(data, 3, "1104-1106", "", "TAA,TAG,TGA");
assert(data.species == codonfilter369.species, "species number mismatch");
assert(1 == codonfilter369.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter369");
UseModel(P369xy);
ExecuteCommands("Tree tree369 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree369, tree);
assert(data.species == TipCount(tree369), "Number of species and number of tips differ");
DataSetFilter codonfilter370 = CreateFilter(data, 3, "1107-1109", "", "TAA,TAG,TGA");
assert(data.species == codonfilter370.species, "species number mismatch");
assert(1 == codonfilter370.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter370");
UseModel(P370xy);
ExecuteCommands("Tree tree370 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree370, tree);
assert(data.species == TipCount(tree370), "Number of species and number of tips differ");
DataSetFilter codonfilter371 = CreateFilter(data, 3, "1110-1112", "", "TAA,TAG,TGA");
assert(data.species == codonfilter371.species, "species number mismatch");
assert(1 == codonfilter371.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter371");
UseModel(P371xy);
ExecuteCommands("Tree tree371 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree371, tree);
assert(data.species == TipCount(tree371), "Number of species and number of tips differ");
DataSetFilter codonfilter372 = CreateFilter(data, 3, "1113-1115", "", "TAA,TAG,TGA");
assert(data.species == codonfilter372.species, "species number mismatch");
assert(1 == codonfilter372.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter372");
UseModel(P372xy);
ExecuteCommands("Tree tree372 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree372, tree);
assert(data.species == TipCount(tree372), "Number of species and number of tips differ");
DataSetFilter codonfilter373 = CreateFilter(data, 3, "1116-1118", "", "TAA,TAG,TGA");
assert(data.species == codonfilter373.species, "species number mismatch");
assert(1 == codonfilter373.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter373");
UseModel(P373xy);
ExecuteCommands("Tree tree373 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree373, tree);
assert(data.species == TipCount(tree373), "Number of species and number of tips differ");
DataSetFilter codonfilter374 = CreateFilter(data, 3, "1119-1121", "", "TAA,TAG,TGA");
assert(data.species == codonfilter374.species, "species number mismatch");
assert(1 == codonfilter374.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter374");
UseModel(P374xy);
ExecuteCommands("Tree tree374 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree374, tree);
assert(data.species == TipCount(tree374), "Number of species and number of tips differ");
DataSetFilter codonfilter375 = CreateFilter(data, 3, "1122-1124", "", "TAA,TAG,TGA");
assert(data.species == codonfilter375.species, "species number mismatch");
assert(1 == codonfilter375.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter375");
UseModel(P375xy);
ExecuteCommands("Tree tree375 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree375, tree);
assert(data.species == TipCount(tree375), "Number of species and number of tips differ");
DataSetFilter codonfilter376 = CreateFilter(data, 3, "1125-1127", "", "TAA,TAG,TGA");
assert(data.species == codonfilter376.species, "species number mismatch");
assert(1 == codonfilter376.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter376");
UseModel(P376xy);
ExecuteCommands("Tree tree376 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree376, tree);
assert(data.species == TipCount(tree376), "Number of species and number of tips differ");
DataSetFilter codonfilter377 = CreateFilter(data, 3, "1128-1130", "", "TAA,TAG,TGA");
assert(data.species == codonfilter377.species, "species number mismatch");
assert(1 == codonfilter377.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter377");
UseModel(P377xy);
ExecuteCommands("Tree tree377 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree377, tree);
assert(data.species == TipCount(tree377), "Number of species and number of tips differ");
DataSetFilter codonfilter378 = CreateFilter(data, 3, "1131-1133", "", "TAA,TAG,TGA");
assert(data.species == codonfilter378.species, "species number mismatch");
assert(1 == codonfilter378.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter378");
UseModel(P378xy);
ExecuteCommands("Tree tree378 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree378, tree);
assert(data.species == TipCount(tree378), "Number of species and number of tips differ");
DataSetFilter codonfilter379 = CreateFilter(data, 3, "1134-1136", "", "TAA,TAG,TGA");
assert(data.species == codonfilter379.species, "species number mismatch");
assert(1 == codonfilter379.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter379");
UseModel(P379xy);
ExecuteCommands("Tree tree379 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree379, tree);
assert(data.species == TipCount(tree379), "Number of species and number of tips differ");
DataSetFilter codonfilter380 = CreateFilter(data, 3, "1137-1139", "", "TAA,TAG,TGA");
assert(data.species == codonfilter380.species, "species number mismatch");
assert(1 == codonfilter380.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter380");
UseModel(P380xy);
ExecuteCommands("Tree tree380 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree380, tree);
assert(data.species == TipCount(tree380), "Number of species and number of tips differ");
DataSetFilter codonfilter381 = CreateFilter(data, 3, "1140-1142", "", "TAA,TAG,TGA");
assert(data.species == codonfilter381.species, "species number mismatch");
assert(1 == codonfilter381.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter381");
UseModel(P381xy);
ExecuteCommands("Tree tree381 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree381, tree);
assert(data.species == TipCount(tree381), "Number of species and number of tips differ");
DataSetFilter codonfilter382 = CreateFilter(data, 3, "1143-1145", "", "TAA,TAG,TGA");
assert(data.species == codonfilter382.species, "species number mismatch");
assert(1 == codonfilter382.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter382");
UseModel(P382xy);
ExecuteCommands("Tree tree382 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree382, tree);
assert(data.species == TipCount(tree382), "Number of species and number of tips differ");
DataSetFilter codonfilter383 = CreateFilter(data, 3, "1146-1148", "", "TAA,TAG,TGA");
assert(data.species == codonfilter383.species, "species number mismatch");
assert(1 == codonfilter383.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter383");
UseModel(P383xy);
ExecuteCommands("Tree tree383 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree383, tree);
assert(data.species == TipCount(tree383), "Number of species and number of tips differ");
DataSetFilter codonfilter384 = CreateFilter(data, 3, "1149-1151", "", "TAA,TAG,TGA");
assert(data.species == codonfilter384.species, "species number mismatch");
assert(1 == codonfilter384.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter384");
UseModel(P384xy);
ExecuteCommands("Tree tree384 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree384, tree);
assert(data.species == TipCount(tree384), "Number of species and number of tips differ");
DataSetFilter codonfilter385 = CreateFilter(data, 3, "1152-1154", "", "TAA,TAG,TGA");
assert(data.species == codonfilter385.species, "species number mismatch");
assert(1 == codonfilter385.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter385");
UseModel(P385xy);
ExecuteCommands("Tree tree385 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree385, tree);
assert(data.species == TipCount(tree385), "Number of species and number of tips differ");
DataSetFilter codonfilter386 = CreateFilter(data, 3, "1155-1157", "", "TAA,TAG,TGA");
assert(data.species == codonfilter386.species, "species number mismatch");
assert(1 == codonfilter386.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter386");
UseModel(P386xy);
ExecuteCommands("Tree tree386 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree386, tree);
assert(data.species == TipCount(tree386), "Number of species and number of tips differ");
DataSetFilter codonfilter387 = CreateFilter(data, 3, "1158-1160", "", "TAA,TAG,TGA");
assert(data.species == codonfilter387.species, "species number mismatch");
assert(1 == codonfilter387.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter387");
UseModel(P387xy);
ExecuteCommands("Tree tree387 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree387, tree);
assert(data.species == TipCount(tree387), "Number of species and number of tips differ");
DataSetFilter codonfilter388 = CreateFilter(data, 3, "1161-1163", "", "TAA,TAG,TGA");
assert(data.species == codonfilter388.species, "species number mismatch");
assert(1 == codonfilter388.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter388");
UseModel(P388xy);
ExecuteCommands("Tree tree388 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree388, tree);
assert(data.species == TipCount(tree388), "Number of species and number of tips differ");
DataSetFilter codonfilter389 = CreateFilter(data, 3, "1164-1166", "", "TAA,TAG,TGA");
assert(data.species == codonfilter389.species, "species number mismatch");
assert(1 == codonfilter389.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter389");
UseModel(P389xy);
ExecuteCommands("Tree tree389 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree389, tree);
assert(data.species == TipCount(tree389), "Number of species and number of tips differ");
DataSetFilter codonfilter390 = CreateFilter(data, 3, "1167-1169", "", "TAA,TAG,TGA");
assert(data.species == codonfilter390.species, "species number mismatch");
assert(1 == codonfilter390.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter390");
UseModel(P390xy);
ExecuteCommands("Tree tree390 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree390, tree);
assert(data.species == TipCount(tree390), "Number of species and number of tips differ");
DataSetFilter codonfilter391 = CreateFilter(data, 3, "1170-1172", "", "TAA,TAG,TGA");
assert(data.species == codonfilter391.species, "species number mismatch");
assert(1 == codonfilter391.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter391");
UseModel(P391xy);
ExecuteCommands("Tree tree391 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree391, tree);
assert(data.species == TipCount(tree391), "Number of species and number of tips differ");
DataSetFilter codonfilter392 = CreateFilter(data, 3, "1173-1175", "", "TAA,TAG,TGA");
assert(data.species == codonfilter392.species, "species number mismatch");
assert(1 == codonfilter392.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter392");
UseModel(P392xy);
ExecuteCommands("Tree tree392 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree392, tree);
assert(data.species == TipCount(tree392), "Number of species and number of tips differ");
DataSetFilter codonfilter393 = CreateFilter(data, 3, "1176-1178", "", "TAA,TAG,TGA");
assert(data.species == codonfilter393.species, "species number mismatch");
assert(1 == codonfilter393.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter393");
UseModel(P393xy);
ExecuteCommands("Tree tree393 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree393, tree);
assert(data.species == TipCount(tree393), "Number of species and number of tips differ");
DataSetFilter codonfilter394 = CreateFilter(data, 3, "1179-1181", "", "TAA,TAG,TGA");
assert(data.species == codonfilter394.species, "species number mismatch");
assert(1 == codonfilter394.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter394");
UseModel(P394xy);
ExecuteCommands("Tree tree394 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree394, tree);
assert(data.species == TipCount(tree394), "Number of species and number of tips differ");
DataSetFilter codonfilter395 = CreateFilter(data, 3, "1182-1184", "", "TAA,TAG,TGA");
assert(data.species == codonfilter395.species, "species number mismatch");
assert(1 == codonfilter395.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter395");
UseModel(P395xy);
ExecuteCommands("Tree tree395 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree395, tree);
assert(data.species == TipCount(tree395), "Number of species and number of tips differ");
DataSetFilter codonfilter396 = CreateFilter(data, 3, "1185-1187", "", "TAA,TAG,TGA");
assert(data.species == codonfilter396.species, "species number mismatch");
assert(1 == codonfilter396.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter396");
UseModel(P396xy);
ExecuteCommands("Tree tree396 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree396, tree);
assert(data.species == TipCount(tree396), "Number of species and number of tips differ");
DataSetFilter codonfilter397 = CreateFilter(data, 3, "1188-1190", "", "TAA,TAG,TGA");
assert(data.species == codonfilter397.species, "species number mismatch");
assert(1 == codonfilter397.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter397");
UseModel(P397xy);
ExecuteCommands("Tree tree397 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree397, tree);
assert(data.species == TipCount(tree397), "Number of species and number of tips differ");
DataSetFilter codonfilter398 = CreateFilter(data, 3, "1191-1193", "", "TAA,TAG,TGA");
assert(data.species == codonfilter398.species, "species number mismatch");
assert(1 == codonfilter398.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter398");
UseModel(P398xy);
ExecuteCommands("Tree tree398 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree398, tree);
assert(data.species == TipCount(tree398), "Number of species and number of tips differ");
DataSetFilter codonfilter399 = CreateFilter(data, 3, "1194-1196", "", "TAA,TAG,TGA");
assert(data.species == codonfilter399.species, "species number mismatch");
assert(1 == codonfilter399.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter399");
UseModel(P399xy);
ExecuteCommands("Tree tree399 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree399, tree);
assert(data.species == TipCount(tree399), "Number of species and number of tips differ");
DataSetFilter codonfilter400 = CreateFilter(data, 3, "1197-1199", "", "TAA,TAG,TGA");
assert(data.species == codonfilter400.species, "species number mismatch");
assert(1 == codonfilter400.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter400");
UseModel(P400xy);
ExecuteCommands("Tree tree400 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree400, tree);
assert(data.species == TipCount(tree400), "Number of species and number of tips differ");
DataSetFilter codonfilter401 = CreateFilter(data, 3, "1200-1202", "", "TAA,TAG,TGA");
assert(data.species == codonfilter401.species, "species number mismatch");
assert(1 == codonfilter401.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter401");
UseModel(P401xy);
ExecuteCommands("Tree tree401 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree401, tree);
assert(data.species == TipCount(tree401), "Number of species and number of tips differ");
DataSetFilter codonfilter402 = CreateFilter(data, 3, "1203-1205", "", "TAA,TAG,TGA");
assert(data.species == codonfilter402.species, "species number mismatch");
assert(1 == codonfilter402.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter402");
UseModel(P402xy);
ExecuteCommands("Tree tree402 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree402, tree);
assert(data.species == TipCount(tree402), "Number of species and number of tips differ");
DataSetFilter codonfilter403 = CreateFilter(data, 3, "1206-1208", "", "TAA,TAG,TGA");
assert(data.species == codonfilter403.species, "species number mismatch");
assert(1 == codonfilter403.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter403");
UseModel(P403xy);
ExecuteCommands("Tree tree403 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree403, tree);
assert(data.species == TipCount(tree403), "Number of species and number of tips differ");
DataSetFilter codonfilter404 = CreateFilter(data, 3, "1209-1211", "", "TAA,TAG,TGA");
assert(data.species == codonfilter404.species, "species number mismatch");
assert(1 == codonfilter404.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter404");
UseModel(P404xy);
ExecuteCommands("Tree tree404 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree404, tree);
assert(data.species == TipCount(tree404), "Number of species and number of tips differ");
DataSetFilter codonfilter405 = CreateFilter(data, 3, "1212-1214", "", "TAA,TAG,TGA");
assert(data.species == codonfilter405.species, "species number mismatch");
assert(1 == codonfilter405.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter405");
UseModel(P405xy);
ExecuteCommands("Tree tree405 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree405, tree);
assert(data.species == TipCount(tree405), "Number of species and number of tips differ");
DataSetFilter codonfilter406 = CreateFilter(data, 3, "1215-1217", "", "TAA,TAG,TGA");
assert(data.species == codonfilter406.species, "species number mismatch");
assert(1 == codonfilter406.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter406");
UseModel(P406xy);
ExecuteCommands("Tree tree406 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree406, tree);
assert(data.species == TipCount(tree406), "Number of species and number of tips differ");
DataSetFilter codonfilter407 = CreateFilter(data, 3, "1218-1220", "", "TAA,TAG,TGA");
assert(data.species == codonfilter407.species, "species number mismatch");
assert(1 == codonfilter407.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter407");
UseModel(P407xy);
ExecuteCommands("Tree tree407 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree407, tree);
assert(data.species == TipCount(tree407), "Number of species and number of tips differ");
DataSetFilter codonfilter408 = CreateFilter(data, 3, "1221-1223", "", "TAA,TAG,TGA");
assert(data.species == codonfilter408.species, "species number mismatch");
assert(1 == codonfilter408.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter408");
UseModel(P408xy);
ExecuteCommands("Tree tree408 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree408, tree);
assert(data.species == TipCount(tree408), "Number of species and number of tips differ");
DataSetFilter codonfilter409 = CreateFilter(data, 3, "1224-1226", "", "TAA,TAG,TGA");
assert(data.species == codonfilter409.species, "species number mismatch");
assert(1 == codonfilter409.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter409");
UseModel(P409xy);
ExecuteCommands("Tree tree409 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree409, tree);
assert(data.species == TipCount(tree409), "Number of species and number of tips differ");
DataSetFilter codonfilter410 = CreateFilter(data, 3, "1227-1229", "", "TAA,TAG,TGA");
assert(data.species == codonfilter410.species, "species number mismatch");
assert(1 == codonfilter410.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter410");
UseModel(P410xy);
ExecuteCommands("Tree tree410 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree410, tree);
assert(data.species == TipCount(tree410), "Number of species and number of tips differ");
DataSetFilter codonfilter411 = CreateFilter(data, 3, "1230-1232", "", "TAA,TAG,TGA");
assert(data.species == codonfilter411.species, "species number mismatch");
assert(1 == codonfilter411.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter411");
UseModel(P411xy);
ExecuteCommands("Tree tree411 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree411, tree);
assert(data.species == TipCount(tree411), "Number of species and number of tips differ");
DataSetFilter codonfilter412 = CreateFilter(data, 3, "1233-1235", "", "TAA,TAG,TGA");
assert(data.species == codonfilter412.species, "species number mismatch");
assert(1 == codonfilter412.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter412");
UseModel(P412xy);
ExecuteCommands("Tree tree412 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree412, tree);
assert(data.species == TipCount(tree412), "Number of species and number of tips differ");
DataSetFilter codonfilter413 = CreateFilter(data, 3, "1236-1238", "", "TAA,TAG,TGA");
assert(data.species == codonfilter413.species, "species number mismatch");
assert(1 == codonfilter413.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter413");
UseModel(P413xy);
ExecuteCommands("Tree tree413 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree413, tree);
assert(data.species == TipCount(tree413), "Number of species and number of tips differ");
DataSetFilter codonfilter414 = CreateFilter(data, 3, "1239-1241", "", "TAA,TAG,TGA");
assert(data.species == codonfilter414.species, "species number mismatch");
assert(1 == codonfilter414.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter414");
UseModel(P414xy);
ExecuteCommands("Tree tree414 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree414, tree);
assert(data.species == TipCount(tree414), "Number of species and number of tips differ");
DataSetFilter codonfilter415 = CreateFilter(data, 3, "1242-1244", "", "TAA,TAG,TGA");
assert(data.species == codonfilter415.species, "species number mismatch");
assert(1 == codonfilter415.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter415");
UseModel(P415xy);
ExecuteCommands("Tree tree415 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree415, tree);
assert(data.species == TipCount(tree415), "Number of species and number of tips differ");
DataSetFilter codonfilter416 = CreateFilter(data, 3, "1245-1247", "", "TAA,TAG,TGA");
assert(data.species == codonfilter416.species, "species number mismatch");
assert(1 == codonfilter416.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter416");
UseModel(P416xy);
ExecuteCommands("Tree tree416 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree416, tree);
assert(data.species == TipCount(tree416), "Number of species and number of tips differ");
DataSetFilter codonfilter417 = CreateFilter(data, 3, "1248-1250", "", "TAA,TAG,TGA");
assert(data.species == codonfilter417.species, "species number mismatch");
assert(1 == codonfilter417.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter417");
UseModel(P417xy);
ExecuteCommands("Tree tree417 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree417, tree);
assert(data.species == TipCount(tree417), "Number of species and number of tips differ");
DataSetFilter codonfilter418 = CreateFilter(data, 3, "1251-1253", "", "TAA,TAG,TGA");
assert(data.species == codonfilter418.species, "species number mismatch");
assert(1 == codonfilter418.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter418");
UseModel(P418xy);
ExecuteCommands("Tree tree418 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree418, tree);
assert(data.species == TipCount(tree418), "Number of species and number of tips differ");
DataSetFilter codonfilter419 = CreateFilter(data, 3, "1254-1256", "", "TAA,TAG,TGA");
assert(data.species == codonfilter419.species, "species number mismatch");
assert(1 == codonfilter419.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter419");
UseModel(P419xy);
ExecuteCommands("Tree tree419 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree419, tree);
assert(data.species == TipCount(tree419), "Number of species and number of tips differ");
DataSetFilter codonfilter420 = CreateFilter(data, 3, "1257-1259", "", "TAA,TAG,TGA");
assert(data.species == codonfilter420.species, "species number mismatch");
assert(1 == codonfilter420.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter420");
UseModel(P420xy);
ExecuteCommands("Tree tree420 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree420, tree);
assert(data.species == TipCount(tree420), "Number of species and number of tips differ");
DataSetFilter codonfilter421 = CreateFilter(data, 3, "1260-1262", "", "TAA,TAG,TGA");
assert(data.species == codonfilter421.species, "species number mismatch");
assert(1 == codonfilter421.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter421");
UseModel(P421xy);
ExecuteCommands("Tree tree421 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree421, tree);
assert(data.species == TipCount(tree421), "Number of species and number of tips differ");
DataSetFilter codonfilter422 = CreateFilter(data, 3, "1263-1265", "", "TAA,TAG,TGA");
assert(data.species == codonfilter422.species, "species number mismatch");
assert(1 == codonfilter422.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter422");
UseModel(P422xy);
ExecuteCommands("Tree tree422 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree422, tree);
assert(data.species == TipCount(tree422), "Number of species and number of tips differ");
DataSetFilter codonfilter423 = CreateFilter(data, 3, "1266-1268", "", "TAA,TAG,TGA");
assert(data.species == codonfilter423.species, "species number mismatch");
assert(1 == codonfilter423.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter423");
UseModel(P423xy);
ExecuteCommands("Tree tree423 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree423, tree);
assert(data.species == TipCount(tree423), "Number of species and number of tips differ");
DataSetFilter codonfilter424 = CreateFilter(data, 3, "1269-1271", "", "TAA,TAG,TGA");
assert(data.species == codonfilter424.species, "species number mismatch");
assert(1 == codonfilter424.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter424");
UseModel(P424xy);
ExecuteCommands("Tree tree424 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree424, tree);
assert(data.species == TipCount(tree424), "Number of species and number of tips differ");
DataSetFilter codonfilter425 = CreateFilter(data, 3, "1272-1274", "", "TAA,TAG,TGA");
assert(data.species == codonfilter425.species, "species number mismatch");
assert(1 == codonfilter425.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter425");
UseModel(P425xy);
ExecuteCommands("Tree tree425 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree425, tree);
assert(data.species == TipCount(tree425), "Number of species and number of tips differ");
DataSetFilter codonfilter426 = CreateFilter(data, 3, "1275-1277", "", "TAA,TAG,TGA");
assert(data.species == codonfilter426.species, "species number mismatch");
assert(1 == codonfilter426.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter426");
UseModel(P426xy);
ExecuteCommands("Tree tree426 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree426, tree);
assert(data.species == TipCount(tree426), "Number of species and number of tips differ");
DataSetFilter codonfilter427 = CreateFilter(data, 3, "1278-1280", "", "TAA,TAG,TGA");
assert(data.species == codonfilter427.species, "species number mismatch");
assert(1 == codonfilter427.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter427");
UseModel(P427xy);
ExecuteCommands("Tree tree427 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree427, tree);
assert(data.species == TipCount(tree427), "Number of species and number of tips differ");
DataSetFilter codonfilter428 = CreateFilter(data, 3, "1281-1283", "", "TAA,TAG,TGA");
assert(data.species == codonfilter428.species, "species number mismatch");
assert(1 == codonfilter428.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter428");
UseModel(P428xy);
ExecuteCommands("Tree tree428 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree428, tree);
assert(data.species == TipCount(tree428), "Number of species and number of tips differ");
DataSetFilter codonfilter429 = CreateFilter(data, 3, "1284-1286", "", "TAA,TAG,TGA");
assert(data.species == codonfilter429.species, "species number mismatch");
assert(1 == codonfilter429.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter429");
UseModel(P429xy);
ExecuteCommands("Tree tree429 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree429, tree);
assert(data.species == TipCount(tree429), "Number of species and number of tips differ");
DataSetFilter codonfilter430 = CreateFilter(data, 3, "1287-1289", "", "TAA,TAG,TGA");
assert(data.species == codonfilter430.species, "species number mismatch");
assert(1 == codonfilter430.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter430");
UseModel(P430xy);
ExecuteCommands("Tree tree430 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree430, tree);
assert(data.species == TipCount(tree430), "Number of species and number of tips differ");
DataSetFilter codonfilter431 = CreateFilter(data, 3, "1290-1292", "", "TAA,TAG,TGA");
assert(data.species == codonfilter431.species, "species number mismatch");
assert(1 == codonfilter431.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter431");
UseModel(P431xy);
ExecuteCommands("Tree tree431 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree431, tree);
assert(data.species == TipCount(tree431), "Number of species and number of tips differ");
DataSetFilter codonfilter432 = CreateFilter(data, 3, "1293-1295", "", "TAA,TAG,TGA");
assert(data.species == codonfilter432.species, "species number mismatch");
assert(1 == codonfilter432.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter432");
UseModel(P432xy);
ExecuteCommands("Tree tree432 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree432, tree);
assert(data.species == TipCount(tree432), "Number of species and number of tips differ");
DataSetFilter codonfilter433 = CreateFilter(data, 3, "1296-1298", "", "TAA,TAG,TGA");
assert(data.species == codonfilter433.species, "species number mismatch");
assert(1 == codonfilter433.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter433");
UseModel(P433xy);
ExecuteCommands("Tree tree433 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree433, tree);
assert(data.species == TipCount(tree433), "Number of species and number of tips differ");
DataSetFilter codonfilter434 = CreateFilter(data, 3, "1299-1301", "", "TAA,TAG,TGA");
assert(data.species == codonfilter434.species, "species number mismatch");
assert(1 == codonfilter434.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter434");
UseModel(P434xy);
ExecuteCommands("Tree tree434 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree434, tree);
assert(data.species == TipCount(tree434), "Number of species and number of tips differ");
DataSetFilter codonfilter435 = CreateFilter(data, 3, "1302-1304", "", "TAA,TAG,TGA");
assert(data.species == codonfilter435.species, "species number mismatch");
assert(1 == codonfilter435.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter435");
UseModel(P435xy);
ExecuteCommands("Tree tree435 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree435, tree);
assert(data.species == TipCount(tree435), "Number of species and number of tips differ");
DataSetFilter codonfilter436 = CreateFilter(data, 3, "1305-1307", "", "TAA,TAG,TGA");
assert(data.species == codonfilter436.species, "species number mismatch");
assert(1 == codonfilter436.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter436");
UseModel(P436xy);
ExecuteCommands("Tree tree436 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree436, tree);
assert(data.species == TipCount(tree436), "Number of species and number of tips differ");
DataSetFilter codonfilter437 = CreateFilter(data, 3, "1308-1310", "", "TAA,TAG,TGA");
assert(data.species == codonfilter437.species, "species number mismatch");
assert(1 == codonfilter437.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter437");
UseModel(P437xy);
ExecuteCommands("Tree tree437 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree437, tree);
assert(data.species == TipCount(tree437), "Number of species and number of tips differ");
DataSetFilter codonfilter438 = CreateFilter(data, 3, "1311-1313", "", "TAA,TAG,TGA");
assert(data.species == codonfilter438.species, "species number mismatch");
assert(1 == codonfilter438.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter438");
UseModel(P438xy);
ExecuteCommands("Tree tree438 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree438, tree);
assert(data.species == TipCount(tree438), "Number of species and number of tips differ");
DataSetFilter codonfilter439 = CreateFilter(data, 3, "1314-1316", "", "TAA,TAG,TGA");
assert(data.species == codonfilter439.species, "species number mismatch");
assert(1 == codonfilter439.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter439");
UseModel(P439xy);
ExecuteCommands("Tree tree439 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree439, tree);
assert(data.species == TipCount(tree439), "Number of species and number of tips differ");
DataSetFilter codonfilter440 = CreateFilter(data, 3, "1317-1319", "", "TAA,TAG,TGA");
assert(data.species == codonfilter440.species, "species number mismatch");
assert(1 == codonfilter440.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter440");
UseModel(P440xy);
ExecuteCommands("Tree tree440 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree440, tree);
assert(data.species == TipCount(tree440), "Number of species and number of tips differ");
DataSetFilter codonfilter441 = CreateFilter(data, 3, "1320-1322", "", "TAA,TAG,TGA");
assert(data.species == codonfilter441.species, "species number mismatch");
assert(1 == codonfilter441.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter441");
UseModel(P441xy);
ExecuteCommands("Tree tree441 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree441, tree);
assert(data.species == TipCount(tree441), "Number of species and number of tips differ");
DataSetFilter codonfilter442 = CreateFilter(data, 3, "1323-1325", "", "TAA,TAG,TGA");
assert(data.species == codonfilter442.species, "species number mismatch");
assert(1 == codonfilter442.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter442");
UseModel(P442xy);
ExecuteCommands("Tree tree442 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree442, tree);
assert(data.species == TipCount(tree442), "Number of species and number of tips differ");
DataSetFilter codonfilter443 = CreateFilter(data, 3, "1326-1328", "", "TAA,TAG,TGA");
assert(data.species == codonfilter443.species, "species number mismatch");
assert(1 == codonfilter443.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter443");
UseModel(P443xy);
ExecuteCommands("Tree tree443 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree443, tree);
assert(data.species == TipCount(tree443), "Number of species and number of tips differ");
DataSetFilter codonfilter444 = CreateFilter(data, 3, "1329-1331", "", "TAA,TAG,TGA");
assert(data.species == codonfilter444.species, "species number mismatch");
assert(1 == codonfilter444.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter444");
UseModel(P444xy);
ExecuteCommands("Tree tree444 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree444, tree);
assert(data.species == TipCount(tree444), "Number of species and number of tips differ");
DataSetFilter codonfilter445 = CreateFilter(data, 3, "1332-1334", "", "TAA,TAG,TGA");
assert(data.species == codonfilter445.species, "species number mismatch");
assert(1 == codonfilter445.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter445");
UseModel(P445xy);
ExecuteCommands("Tree tree445 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree445, tree);
assert(data.species == TipCount(tree445), "Number of species and number of tips differ");
DataSetFilter codonfilter446 = CreateFilter(data, 3, "1335-1337", "", "TAA,TAG,TGA");
assert(data.species == codonfilter446.species, "species number mismatch");
assert(1 == codonfilter446.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter446");
UseModel(P446xy);
ExecuteCommands("Tree tree446 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree446, tree);
assert(data.species == TipCount(tree446), "Number of species and number of tips differ");
DataSetFilter codonfilter447 = CreateFilter(data, 3, "1338-1340", "", "TAA,TAG,TGA");
assert(data.species == codonfilter447.species, "species number mismatch");
assert(1 == codonfilter447.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter447");
UseModel(P447xy);
ExecuteCommands("Tree tree447 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree447, tree);
assert(data.species == TipCount(tree447), "Number of species and number of tips differ");
DataSetFilter codonfilter448 = CreateFilter(data, 3, "1341-1343", "", "TAA,TAG,TGA");
assert(data.species == codonfilter448.species, "species number mismatch");
assert(1 == codonfilter448.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter448");
UseModel(P448xy);
ExecuteCommands("Tree tree448 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree448, tree);
assert(data.species == TipCount(tree448), "Number of species and number of tips differ");
DataSetFilter codonfilter449 = CreateFilter(data, 3, "1344-1346", "", "TAA,TAG,TGA");
assert(data.species == codonfilter449.species, "species number mismatch");
assert(1 == codonfilter449.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter449");
UseModel(P449xy);
ExecuteCommands("Tree tree449 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree449, tree);
assert(data.species == TipCount(tree449), "Number of species and number of tips differ");
DataSetFilter codonfilter450 = CreateFilter(data, 3, "1347-1349", "", "TAA,TAG,TGA");
assert(data.species == codonfilter450.species, "species number mismatch");
assert(1 == codonfilter450.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter450");
UseModel(P450xy);
ExecuteCommands("Tree tree450 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree450, tree);
assert(data.species == TipCount(tree450), "Number of species and number of tips differ");
DataSetFilter codonfilter451 = CreateFilter(data, 3, "1350-1352", "", "TAA,TAG,TGA");
assert(data.species == codonfilter451.species, "species number mismatch");
assert(1 == codonfilter451.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter451");
UseModel(P451xy);
ExecuteCommands("Tree tree451 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree451, tree);
assert(data.species == TipCount(tree451), "Number of species and number of tips differ");
DataSetFilter codonfilter452 = CreateFilter(data, 3, "1353-1355", "", "TAA,TAG,TGA");
assert(data.species == codonfilter452.species, "species number mismatch");
assert(1 == codonfilter452.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter452");
UseModel(P452xy);
ExecuteCommands("Tree tree452 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree452, tree);
assert(data.species == TipCount(tree452), "Number of species and number of tips differ");
DataSetFilter codonfilter453 = CreateFilter(data, 3, "1356-1358", "", "TAA,TAG,TGA");
assert(data.species == codonfilter453.species, "species number mismatch");
assert(1 == codonfilter453.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter453");
UseModel(P453xy);
ExecuteCommands("Tree tree453 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree453, tree);
assert(data.species == TipCount(tree453), "Number of species and number of tips differ");
DataSetFilter codonfilter454 = CreateFilter(data, 3, "1359-1361", "", "TAA,TAG,TGA");
assert(data.species == codonfilter454.species, "species number mismatch");
assert(1 == codonfilter454.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter454");
UseModel(P454xy);
ExecuteCommands("Tree tree454 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree454, tree);
assert(data.species == TipCount(tree454), "Number of species and number of tips differ");
DataSetFilter codonfilter455 = CreateFilter(data, 3, "1362-1364", "", "TAA,TAG,TGA");
assert(data.species == codonfilter455.species, "species number mismatch");
assert(1 == codonfilter455.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter455");
UseModel(P455xy);
ExecuteCommands("Tree tree455 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree455, tree);
assert(data.species == TipCount(tree455), "Number of species and number of tips differ");
DataSetFilter codonfilter456 = CreateFilter(data, 3, "1365-1367", "", "TAA,TAG,TGA");
assert(data.species == codonfilter456.species, "species number mismatch");
assert(1 == codonfilter456.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter456");
UseModel(P456xy);
ExecuteCommands("Tree tree456 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree456, tree);
assert(data.species == TipCount(tree456), "Number of species and number of tips differ");
DataSetFilter codonfilter457 = CreateFilter(data, 3, "1368-1370", "", "TAA,TAG,TGA");
assert(data.species == codonfilter457.species, "species number mismatch");
assert(1 == codonfilter457.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter457");
UseModel(P457xy);
ExecuteCommands("Tree tree457 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree457, tree);
assert(data.species == TipCount(tree457), "Number of species and number of tips differ");
DataSetFilter codonfilter458 = CreateFilter(data, 3, "1371-1373", "", "TAA,TAG,TGA");
assert(data.species == codonfilter458.species, "species number mismatch");
assert(1 == codonfilter458.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter458");
UseModel(P458xy);
ExecuteCommands("Tree tree458 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree458, tree);
assert(data.species == TipCount(tree458), "Number of species and number of tips differ");
DataSetFilter codonfilter459 = CreateFilter(data, 3, "1374-1376", "", "TAA,TAG,TGA");
assert(data.species == codonfilter459.species, "species number mismatch");
assert(1 == codonfilter459.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter459");
UseModel(P459xy);
ExecuteCommands("Tree tree459 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree459, tree);
assert(data.species == TipCount(tree459), "Number of species and number of tips differ");
DataSetFilter codonfilter460 = CreateFilter(data, 3, "1377-1379", "", "TAA,TAG,TGA");
assert(data.species == codonfilter460.species, "species number mismatch");
assert(1 == codonfilter460.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter460");
UseModel(P460xy);
ExecuteCommands("Tree tree460 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree460, tree);
assert(data.species == TipCount(tree460), "Number of species and number of tips differ");
DataSetFilter codonfilter461 = CreateFilter(data, 3, "1380-1382", "", "TAA,TAG,TGA");
assert(data.species == codonfilter461.species, "species number mismatch");
assert(1 == codonfilter461.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter461");
UseModel(P461xy);
ExecuteCommands("Tree tree461 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree461, tree);
assert(data.species == TipCount(tree461), "Number of species and number of tips differ");
DataSetFilter codonfilter462 = CreateFilter(data, 3, "1383-1385", "", "TAA,TAG,TGA");
assert(data.species == codonfilter462.species, "species number mismatch");
assert(1 == codonfilter462.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter462");
UseModel(P462xy);
ExecuteCommands("Tree tree462 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree462, tree);
assert(data.species == TipCount(tree462), "Number of species and number of tips differ");
DataSetFilter codonfilter463 = CreateFilter(data, 3, "1386-1388", "", "TAA,TAG,TGA");
assert(data.species == codonfilter463.species, "species number mismatch");
assert(1 == codonfilter463.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter463");
UseModel(P463xy);
ExecuteCommands("Tree tree463 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree463, tree);
assert(data.species == TipCount(tree463), "Number of species and number of tips differ");
DataSetFilter codonfilter464 = CreateFilter(data, 3, "1389-1391", "", "TAA,TAG,TGA");
assert(data.species == codonfilter464.species, "species number mismatch");
assert(1 == codonfilter464.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter464");
UseModel(P464xy);
ExecuteCommands("Tree tree464 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree464, tree);
assert(data.species == TipCount(tree464), "Number of species and number of tips differ");
DataSetFilter codonfilter465 = CreateFilter(data, 3, "1392-1394", "", "TAA,TAG,TGA");
assert(data.species == codonfilter465.species, "species number mismatch");
assert(1 == codonfilter465.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter465");
UseModel(P465xy);
ExecuteCommands("Tree tree465 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree465, tree);
assert(data.species == TipCount(tree465), "Number of species and number of tips differ");
DataSetFilter codonfilter466 = CreateFilter(data, 3, "1395-1397", "", "TAA,TAG,TGA");
assert(data.species == codonfilter466.species, "species number mismatch");
assert(1 == codonfilter466.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter466");
UseModel(P466xy);
ExecuteCommands("Tree tree466 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree466, tree);
assert(data.species == TipCount(tree466), "Number of species and number of tips differ");
DataSetFilter codonfilter467 = CreateFilter(data, 3, "1398-1400", "", "TAA,TAG,TGA");
assert(data.species == codonfilter467.species, "species number mismatch");
assert(1 == codonfilter467.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter467");
UseModel(P467xy);
ExecuteCommands("Tree tree467 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree467, tree);
assert(data.species == TipCount(tree467), "Number of species and number of tips differ");
DataSetFilter codonfilter468 = CreateFilter(data, 3, "1401-1403", "", "TAA,TAG,TGA");
assert(data.species == codonfilter468.species, "species number mismatch");
assert(1 == codonfilter468.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter468");
UseModel(P468xy);
ExecuteCommands("Tree tree468 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree468, tree);
assert(data.species == TipCount(tree468), "Number of species and number of tips differ");
DataSetFilter codonfilter469 = CreateFilter(data, 3, "1404-1406", "", "TAA,TAG,TGA");
assert(data.species == codonfilter469.species, "species number mismatch");
assert(1 == codonfilter469.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter469");
UseModel(P469xy);
ExecuteCommands("Tree tree469 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree469, tree);
assert(data.species == TipCount(tree469), "Number of species and number of tips differ");
DataSetFilter codonfilter470 = CreateFilter(data, 3, "1407-1409", "", "TAA,TAG,TGA");
assert(data.species == codonfilter470.species, "species number mismatch");
assert(1 == codonfilter470.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter470");
UseModel(P470xy);
ExecuteCommands("Tree tree470 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree470, tree);
assert(data.species == TipCount(tree470), "Number of species and number of tips differ");
DataSetFilter codonfilter471 = CreateFilter(data, 3, "1410-1412", "", "TAA,TAG,TGA");
assert(data.species == codonfilter471.species, "species number mismatch");
assert(1 == codonfilter471.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter471");
UseModel(P471xy);
ExecuteCommands("Tree tree471 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree471, tree);
assert(data.species == TipCount(tree471), "Number of species and number of tips differ");
DataSetFilter codonfilter472 = CreateFilter(data, 3, "1413-1415", "", "TAA,TAG,TGA");
assert(data.species == codonfilter472.species, "species number mismatch");
assert(1 == codonfilter472.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter472");
UseModel(P472xy);
ExecuteCommands("Tree tree472 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree472, tree);
assert(data.species == TipCount(tree472), "Number of species and number of tips differ");
DataSetFilter codonfilter473 = CreateFilter(data, 3, "1416-1418", "", "TAA,TAG,TGA");
assert(data.species == codonfilter473.species, "species number mismatch");
assert(1 == codonfilter473.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter473");
UseModel(P473xy);
ExecuteCommands("Tree tree473 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree473, tree);
assert(data.species == TipCount(tree473), "Number of species and number of tips differ");
DataSetFilter codonfilter474 = CreateFilter(data, 3, "1419-1421", "", "TAA,TAG,TGA");
assert(data.species == codonfilter474.species, "species number mismatch");
assert(1 == codonfilter474.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter474");
UseModel(P474xy);
ExecuteCommands("Tree tree474 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree474, tree);
assert(data.species == TipCount(tree474), "Number of species and number of tips differ");
DataSetFilter codonfilter475 = CreateFilter(data, 3, "1422-1424", "", "TAA,TAG,TGA");
assert(data.species == codonfilter475.species, "species number mismatch");
assert(1 == codonfilter475.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter475");
UseModel(P475xy);
ExecuteCommands("Tree tree475 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree475, tree);
assert(data.species == TipCount(tree475), "Number of species and number of tips differ");
DataSetFilter codonfilter476 = CreateFilter(data, 3, "1425-1427", "", "TAA,TAG,TGA");
assert(data.species == codonfilter476.species, "species number mismatch");
assert(1 == codonfilter476.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter476");
UseModel(P476xy);
ExecuteCommands("Tree tree476 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree476, tree);
assert(data.species == TipCount(tree476), "Number of species and number of tips differ");
DataSetFilter codonfilter477 = CreateFilter(data, 3, "1428-1430", "", "TAA,TAG,TGA");
assert(data.species == codonfilter477.species, "species number mismatch");
assert(1 == codonfilter477.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter477");
UseModel(P477xy);
ExecuteCommands("Tree tree477 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree477, tree);
assert(data.species == TipCount(tree477), "Number of species and number of tips differ");
DataSetFilter codonfilter478 = CreateFilter(data, 3, "1431-1433", "", "TAA,TAG,TGA");
assert(data.species == codonfilter478.species, "species number mismatch");
assert(1 == codonfilter478.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter478");
UseModel(P478xy);
ExecuteCommands("Tree tree478 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree478, tree);
assert(data.species == TipCount(tree478), "Number of species and number of tips differ");
DataSetFilter codonfilter479 = CreateFilter(data, 3, "1434-1436", "", "TAA,TAG,TGA");
assert(data.species == codonfilter479.species, "species number mismatch");
assert(1 == codonfilter479.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter479");
UseModel(P479xy);
ExecuteCommands("Tree tree479 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree479, tree);
assert(data.species == TipCount(tree479), "Number of species and number of tips differ");
DataSetFilter codonfilter480 = CreateFilter(data, 3, "1437-1439", "", "TAA,TAG,TGA");
assert(data.species == codonfilter480.species, "species number mismatch");
assert(1 == codonfilter480.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter480");
UseModel(P480xy);
ExecuteCommands("Tree tree480 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree480, tree);
assert(data.species == TipCount(tree480), "Number of species and number of tips differ");
DataSetFilter codonfilter481 = CreateFilter(data, 3, "1440-1442", "", "TAA,TAG,TGA");
assert(data.species == codonfilter481.species, "species number mismatch");
assert(1 == codonfilter481.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter481");
UseModel(P481xy);
ExecuteCommands("Tree tree481 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree481, tree);
assert(data.species == TipCount(tree481), "Number of species and number of tips differ");
DataSetFilter codonfilter482 = CreateFilter(data, 3, "1443-1445", "", "TAA,TAG,TGA");
assert(data.species == codonfilter482.species, "species number mismatch");
assert(1 == codonfilter482.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter482");
UseModel(P482xy);
ExecuteCommands("Tree tree482 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree482, tree);
assert(data.species == TipCount(tree482), "Number of species and number of tips differ");
DataSetFilter codonfilter483 = CreateFilter(data, 3, "1446-1448", "", "TAA,TAG,TGA");
assert(data.species == codonfilter483.species, "species number mismatch");
assert(1 == codonfilter483.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter483");
UseModel(P483xy);
ExecuteCommands("Tree tree483 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree483, tree);
assert(data.species == TipCount(tree483), "Number of species and number of tips differ");
DataSetFilter codonfilter484 = CreateFilter(data, 3, "1449-1451", "", "TAA,TAG,TGA");
assert(data.species == codonfilter484.species, "species number mismatch");
assert(1 == codonfilter484.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter484");
UseModel(P484xy);
ExecuteCommands("Tree tree484 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree484, tree);
assert(data.species == TipCount(tree484), "Number of species and number of tips differ");
DataSetFilter codonfilter485 = CreateFilter(data, 3, "1452-1454", "", "TAA,TAG,TGA");
assert(data.species == codonfilter485.species, "species number mismatch");
assert(1 == codonfilter485.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter485");
UseModel(P485xy);
ExecuteCommands("Tree tree485 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree485, tree);
assert(data.species == TipCount(tree485), "Number of species and number of tips differ");
DataSetFilter codonfilter486 = CreateFilter(data, 3, "1455-1457", "", "TAA,TAG,TGA");
assert(data.species == codonfilter486.species, "species number mismatch");
assert(1 == codonfilter486.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter486");
UseModel(P486xy);
ExecuteCommands("Tree tree486 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree486, tree);
assert(data.species == TipCount(tree486), "Number of species and number of tips differ");
DataSetFilter codonfilter487 = CreateFilter(data, 3, "1458-1460", "", "TAA,TAG,TGA");
assert(data.species == codonfilter487.species, "species number mismatch");
assert(1 == codonfilter487.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter487");
UseModel(P487xy);
ExecuteCommands("Tree tree487 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree487, tree);
assert(data.species == TipCount(tree487), "Number of species and number of tips differ");
DataSetFilter codonfilter488 = CreateFilter(data, 3, "1461-1463", "", "TAA,TAG,TGA");
assert(data.species == codonfilter488.species, "species number mismatch");
assert(1 == codonfilter488.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter488");
UseModel(P488xy);
ExecuteCommands("Tree tree488 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree488, tree);
assert(data.species == TipCount(tree488), "Number of species and number of tips differ");
DataSetFilter codonfilter489 = CreateFilter(data, 3, "1464-1466", "", "TAA,TAG,TGA");
assert(data.species == codonfilter489.species, "species number mismatch");
assert(1 == codonfilter489.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter489");
UseModel(P489xy);
ExecuteCommands("Tree tree489 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree489, tree);
assert(data.species == TipCount(tree489), "Number of species and number of tips differ");
DataSetFilter codonfilter490 = CreateFilter(data, 3, "1467-1469", "", "TAA,TAG,TGA");
assert(data.species == codonfilter490.species, "species number mismatch");
assert(1 == codonfilter490.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter490");
UseModel(P490xy);
ExecuteCommands("Tree tree490 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree490, tree);
assert(data.species == TipCount(tree490), "Number of species and number of tips differ");
DataSetFilter codonfilter491 = CreateFilter(data, 3, "1470-1472", "", "TAA,TAG,TGA");
assert(data.species == codonfilter491.species, "species number mismatch");
assert(1 == codonfilter491.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter491");
UseModel(P491xy);
ExecuteCommands("Tree tree491 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree491, tree);
assert(data.species == TipCount(tree491), "Number of species and number of tips differ");
DataSetFilter codonfilter492 = CreateFilter(data, 3, "1473-1475", "", "TAA,TAG,TGA");
assert(data.species == codonfilter492.species, "species number mismatch");
assert(1 == codonfilter492.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter492");
UseModel(P492xy);
ExecuteCommands("Tree tree492 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree492, tree);
assert(data.species == TipCount(tree492), "Number of species and number of tips differ");
DataSetFilter codonfilter493 = CreateFilter(data, 3, "1476-1478", "", "TAA,TAG,TGA");
assert(data.species == codonfilter493.species, "species number mismatch");
assert(1 == codonfilter493.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter493");
UseModel(P493xy);
ExecuteCommands("Tree tree493 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree493, tree);
assert(data.species == TipCount(tree493), "Number of species and number of tips differ");
DataSetFilter codonfilter494 = CreateFilter(data, 3, "1479-1481", "", "TAA,TAG,TGA");
assert(data.species == codonfilter494.species, "species number mismatch");
assert(1 == codonfilter494.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter494");
UseModel(P494xy);
ExecuteCommands("Tree tree494 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree494, tree);
assert(data.species == TipCount(tree494), "Number of species and number of tips differ");
DataSetFilter codonfilter495 = CreateFilter(data, 3, "1482-1484", "", "TAA,TAG,TGA");
assert(data.species == codonfilter495.species, "species number mismatch");
assert(1 == codonfilter495.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter495");
UseModel(P495xy);
ExecuteCommands("Tree tree495 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree495, tree);
assert(data.species == TipCount(tree495), "Number of species and number of tips differ");
DataSetFilter codonfilter496 = CreateFilter(data, 3, "1485-1487", "", "TAA,TAG,TGA");
assert(data.species == codonfilter496.species, "species number mismatch");
assert(1 == codonfilter496.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter496");
UseModel(P496xy);
ExecuteCommands("Tree tree496 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree496, tree);
assert(data.species == TipCount(tree496), "Number of species and number of tips differ");
DataSetFilter codonfilter497 = CreateFilter(data, 3, "1488-1490", "", "TAA,TAG,TGA");
assert(data.species == codonfilter497.species, "species number mismatch");
assert(1 == codonfilter497.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter497");
UseModel(P497xy);
ExecuteCommands("Tree tree497 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree497, tree);
assert(data.species == TipCount(tree497), "Number of species and number of tips differ");
DataSetFilter codonfilter498 = CreateFilter(data, 3, "1491-1493", "", "TAA,TAG,TGA");
assert(data.species == codonfilter498.species, "species number mismatch");
assert(1 == codonfilter498.sites, "codon filter does not contain exactly one site");
CheckCodonFilter("codonfilter498");
UseModel(P498xy);
ExecuteCommands("Tree tree498 = treestring;");
ReplicateConstraint("this1.?.t := this2.?.t", tree498, tree);
assert(data.species == TipCount(tree498), "Number of species and number of tips differ");
LikelihoodFunction likelihood = (codonfilter1, tree, codonfilter2, tree2, codonfilter3, tree3, codonfilter4, tree4, codonfilter5, tree5, codonfilter6, tree6, codonfilter7, tree7, codonfilter8, tree8, codonfilter9, tree9, codonfilter10, tree10, codonfilter11, tree11, codonfilter12, tree12, codonfilter13, tree13, codonfilter14, tree14, codonfilter15, tree15, codonfilter16, tree16, codonfilter17, tree17, codonfilter18, tree18, codonfilter19, tree19, codonfilter20, tree20, codonfilter21, tree21, codonfilter22, tree22, codonfilter23, tree23, codonfilter24, tree24, codonfilter25, tree25, codonfilter26, tree26, codonfilter27, tree27, codonfilter28, tree28, codonfilter29, tree29, codonfilter30, tree30, codonfilter31, tree31, codonfilter32, tree32, codonfilter33, tree33, codonfilter34, tree34, codonfilter35, tree35, codonfilter36, tree36, codonfilter37, tree37, codonfilter38, tree38, codonfilter39, tree39, codonfilter40, tree40, codonfilter41, tree41, codonfilter42, tree42, codonfilter43, tree43, codonfilter44, tree44, codonfilter45, tree45, codonfilter46, tree46, codonfilter47, tree47, codonfilter48, tree48, codonfilter49, tree49, codonfilter50, tree50, codonfilter51, tree51, codonfilter52, tree52, codonfilter53, tree53, codonfilter54, tree54, codonfilter55, tree55, codonfilter56, tree56, codonfilter57, tree57, codonfilter58, tree58, codonfilter59, tree59, codonfilter60, tree60, codonfilter61, tree61, codonfilter62, tree62, codonfilter63, tree63, codonfilter64, tree64, codonfilter65, tree65, codonfilter66, tree66, codonfilter67, tree67, codonfilter68, tree68, codonfilter69, tree69, codonfilter70, tree70, codonfilter71, tree71, codonfilter72, tree72, codonfilter73, tree73, codonfilter74, tree74, codonfilter75, tree75, codonfilter76, tree76, codonfilter77, tree77, codonfilter78, tree78, codonfilter79, tree79, codonfilter80, tree80, codonfilter81, tree81, codonfilter82, tree82, codonfilter83, tree83, codonfilter84, tree84, codonfilter85, tree85, codonfilter86, tree86, codonfilter87, tree87, codonfilter88, tree88, codonfilter89, tree89, codonfilter90, tree90, codonfilter91, tree91, codonfilter92, tree92, codonfilter93, tree93, codonfilter94, tree94, codonfilter95, tree95, codonfilter96, tree96, codonfilter97, tree97, codonfilter98, tree98, codonfilter99, tree99, codonfilter100, tree100, codonfilter101, tree101, codonfilter102, tree102, codonfilter103, tree103, codonfilter104, tree104, codonfilter105, tree105, codonfilter106, tree106, codonfilter107, tree107, codonfilter108, tree108, codonfilter109, tree109, codonfilter110, tree110, codonfilter111, tree111, codonfilter112, tree112, codonfilter113, tree113, codonfilter114, tree114, codonfilter115, tree115, codonfilter116, tree116, codonfilter117, tree117, codonfilter118, tree118, codonfilter119, tree119, codonfilter120, tree120, codonfilter121, tree121, codonfilter122, tree122, codonfilter123, tree123, codonfilter124, tree124, codonfilter125, tree125, codonfilter126, tree126, codonfilter127, tree127, codonfilter128, tree128, codonfilter129, tree129, codonfilter130, tree130, codonfilter131, tree131, codonfilter132, tree132, codonfilter133, tree133, codonfilter134, tree134, codonfilter135, tree135, codonfilter136, tree136, codonfilter137, tree137, codonfilter138, tree138, codonfilter139, tree139, codonfilter140, tree140, codonfilter141, tree141, codonfilter142, tree142, codonfilter143, tree143, codonfilter144, tree144, codonfilter145, tree145, codonfilter146, tree146, codonfilter147, tree147, codonfilter148, tree148, codonfilter149, tree149, codonfilter150, tree150, codonfilter151, tree151, codonfilter152, tree152, codonfilter153, tree153, codonfilter154, tree154, codonfilter155, tree155, codonfilter156, tree156, codonfilter157, tree157, codonfilter158, tree158, codonfilter159, tree159, codonfilter160, tree160, codonfilter161, tree161, codonfilter162, tree162, codonfilter163, tree163, codonfilter164, tree164, codonfilter165, tree165, codonfilter166, tree166, codonfilter167, tree167, codonfilter168, tree168, codonfilter169, tree169, codonfilter170, tree170, codonfilter171, tree171, codonfilter172, tree172, codonfilter173, tree173, codonfilter174, tree174, codonfilter175, tree175, codonfilter176, tree176, codonfilter177, tree177, codonfilter178, tree178, codonfilter179, tree179, codonfilter180, tree180, codonfilter181, tree181, codonfilter182, tree182, codonfilter183, tree183, codonfilter184, tree184, codonfilter185, tree185, codonfilter186, tree186, codonfilter187, tree187, codonfilter188, tree188, codonfilter189, tree189, codonfilter190, tree190, codonfilter191, tree191, codonfilter192, tree192, codonfilter193, tree193, codonfilter194, tree194, codonfilter195, tree195, codonfilter196, tree196, codonfilter197, tree197, codonfilter198, tree198, codonfilter199, tree199, codonfilter200, tree200, codonfilter201, tree201, codonfilter202, tree202, codonfilter203, tree203, codonfilter204, tree204, codonfilter205, tree205, codonfilter206, tree206, codonfilter207, tree207, codonfilter208, tree208, codonfilter209, tree209, codonfilter210, tree210, codonfilter211, tree211, codonfilter212, tree212, codonfilter213, tree213, codonfilter214, tree214, codonfilter215, tree215, codonfilter216, tree216, codonfilter217, tree217, codonfilter218, tree218, codonfilter219, tree219, codonfilter220, tree220, codonfilter221, tree221, codonfilter222, tree222, codonfilter223, tree223, codonfilter224, tree224, codonfilter225, tree225, codonfilter226, tree226, codonfilter227, tree227, codonfilter228, tree228, codonfilter229, tree229, codonfilter230, tree230, codonfilter231, tree231, codonfilter232, tree232, codonfilter233, tree233, codonfilter234, tree234, codonfilter235, tree235, codonfilter236, tree236, codonfilter237, tree237, codonfilter238, tree238, codonfilter239, tree239, codonfilter240, tree240, codonfilter241, tree241, codonfilter242, tree242, codonfilter243, tree243, codonfilter244, tree244, codonfilter245, tree245, codonfilter246, tree246, codonfilter247, tree247, codonfilter248, tree248, codonfilter249, tree249, codonfilter250, tree250, codonfilter251, tree251, codonfilter252, tree252, codonfilter253, tree253, codonfilter254, tree254, codonfilter255, tree255, codonfilter256, tree256, codonfilter257, tree257, codonfilter258, tree258, codonfilter259, tree259, codonfilter260, tree260, codonfilter261, tree261, codonfilter262, tree262, codonfilter263, tree263, codonfilter264, tree264, codonfilter265, tree265, codonfilter266, tree266, codonfilter267, tree267, codonfilter268, tree268, codonfilter269, tree269, codonfilter270, tree270, codonfilter271, tree271, codonfilter272, tree272, codonfilter273, tree273, codonfilter274, tree274, codonfilter275, tree275, codonfilter276, tree276, codonfilter277, tree277, codonfilter278, tree278, codonfilter279, tree279, codonfilter280, tree280, codonfilter281, tree281, codonfilter282, tree282, codonfilter283, tree283, codonfilter284, tree284, codonfilter285, tree285, codonfilter286, tree286, codonfilter287, tree287, codonfilter288, tree288, codonfilter289, tree289, codonfilter290, tree290, codonfilter291, tree291, codonfilter292, tree292, codonfilter293, tree293, codonfilter294, tree294, codonfilter295, tree295, codonfilter296, tree296, codonfilter297, tree297, codonfilter298, tree298, codonfilter299, tree299, codonfilter300, tree300, codonfilter301, tree301, codonfilter302, tree302, codonfilter303, tree303, codonfilter304, tree304, codonfilter305, tree305, codonfilter306, tree306, codonfilter307, tree307, codonfilter308, tree308, codonfilter309, tree309, codonfilter310, tree310, codonfilter311, tree311, codonfilter312, tree312, codonfilter313, tree313, codonfilter314, tree314, codonfilter315, tree315, codonfilter316, tree316, codonfilter317, tree317, codonfilter318, tree318, codonfilter319, tree319, codonfilter320, tree320, codonfilter321, tree321, codonfilter322, tree322, codonfilter323, tree323, codonfilter324, tree324, codonfilter325, tree325, codonfilter326, tree326, codonfilter327, tree327, codonfilter328, tree328, codonfilter329, tree329, codonfilter330, tree330, codonfilter331, tree331, codonfilter332, tree332, codonfilter333, tree333, codonfilter334, tree334, codonfilter335, tree335, codonfilter336, tree336, codonfilter337, tree337, codonfilter338, tree338, codonfilter339, tree339, codonfilter340, tree340, codonfilter341, tree341, codonfilter342, tree342, codonfilter343, tree343, codonfilter344, tree344, codonfilter345, tree345, codonfilter346, tree346, codonfilter347, tree347, codonfilter348, tree348, codonfilter349, tree349, codonfilter350, tree350, codonfilter351, tree351, codonfilter352, tree352, codonfilter353, tree353, codonfilter354, tree354, codonfilter355, tree355, codonfilter356, tree356, codonfilter357, tree357, codonfilter358, tree358, codonfilter359, tree359, codonfilter360, tree360, codonfilter361, tree361, codonfilter362, tree362, codonfilter363, tree363, codonfilter364, tree364, codonfilter365, tree365, codonfilter366, tree366, codonfilter367, tree367, codonfilter368, tree368, codonfilter369, tree369, codonfilter370, tree370, codonfilter371, tree371, codonfilter372, tree372, codonfilter373, tree373, codonfilter374, tree374, codonfilter375, tree375, codonfilter376, tree376, codonfilter377, tree377, codonfilter378, tree378, codonfilter379, tree379, codonfilter380, tree380, codonfilter381, tree381, codonfilter382, tree382, codonfilter383, tree383, codonfilter384, tree384, codonfilter385, tree385, codonfilter386, tree386, codonfilter387, tree387, codonfilter388, tree388, codonfilter389, tree389, codonfilter390, tree390, codonfilter391, tree391, codonfilter392, tree392, codonfilter393, tree393, codonfilter394, tree394, codonfilter395, tree395, codonfilter396, tree396, codonfilter397, tree397, codonfilter398, tree398, codonfilter399, tree399, codonfilter400, tree400, codonfilter401, tree401, codonfilter402, tree402, codonfilter403, tree403, codonfilter404, tree404, codonfilter405, tree405, codonfilter406, tree406, codonfilter407, tree407, codonfilter408, tree408, codonfilter409, tree409, codonfilter410, tree410, codonfilter411, tree411, codonfilter412, tree412, codonfilter413, tree413, codonfilter414, tree414, codonfilter415, tree415, codonfilter416, tree416, codonfilter417, tree417, codonfilter418, tree418, codonfilter419, tree419, codonfilter420, tree420, codonfilter421, tree421, codonfilter422, tree422, codonfilter423, tree423, codonfilter424, tree424, codonfilter425, tree425, codonfilter426, tree426, codonfilter427, tree427, codonfilter428, tree428, codonfilter429, tree429, codonfilter430, tree430, codonfilter431, tree431, codonfilter432, tree432, codonfilter433, tree433, codonfilter434, tree434, codonfilter435, tree435, codonfilter436, tree436, codonfilter437, tree437, codonfilter438, tree438, codonfilter439, tree439, codonfilter440, tree440, codonfilter441, tree441, codonfilter442, tree442, codonfilter443, tree443, codonfilter444, tree444, codonfilter445, tree445, codonfilter446, tree446, codonfilter447, tree447, codonfilter448, tree448, codonfilter449, tree449, codonfilter450, tree450, codonfilter451, tree451, codonfilter452, tree452, codonfilter453, tree453, codonfilter454, tree454, codonfilter455, tree455, codonfilter456, tree456, codonfilter457, tree457, codonfilter458, tree458, codonfilter459, tree459, codonfilter460, tree460, codonfilter461, tree461, codonfilter462, tree462, codonfilter463, tree463, codonfilter464, tree464, codonfilter465, tree465, codonfilter466, tree466, codonfilter467, tree467, codonfilter468, tree468, codonfilter469, tree469, codonfilter470, tree470, codonfilter471, tree471, codonfilter472, tree472, codonfilter473, tree473, codonfilter474, tree474, codonfilter475, tree475, codonfilter476, tree476, codonfilter477, tree477, codonfilter478, tree478, codonfilter479, tree479, codonfilter480, tree480, codonfilter481, tree481, codonfilter482, tree482, codonfilter483, tree483, codonfilter484, tree484, codonfilter485, tree485, codonfilter486, tree486, codonfilter487, tree487, codonfilter488, tree488, codonfilter489, tree489, codonfilter490, tree490, codonfilter491, tree491, codonfilter492, tree492, codonfilter493, tree493, codonfilter494, tree494, codonfilter495, tree495, codonfilter496, tree496, codonfilter497, tree497, codonfilter498, tree498);
fprintf(stdout, "\nNow optimizing the likelihood function...\n");
Optimize(mlestimates, likelihood)
fprintf(stdout, "Completed likelihood optimization. Optimized ", mlestimates[1][1], " indpendent parameters and ", mlestimates[1][2], " shared parameters to obtain a log likelihood of ", mlestimates[1][0], ".\n");
fprintf(stdout, "Writing the results to hyphy_optimizetree_output.txt.\n");
fprintf("hyphy_optimizetree_output.txt", "Log likelihood: ", mlestimates[1][0], "\nindependent parameters (includes branch lengths): ", mlestimates[1][1], "\nshared parameters: ", mlestimates[1][2], "\nnumber of branch lengths: ", TipCount(tree) + BranchCount(tree), "\nnumber of tip nodes: ", TipCount(tree), "\nnumber of internal branches: ", BranchCount(tree), "\n",likelihood);
fprintf(stdout, "Completed HYPHY script hyphy_optimizetree_cmds.bf.\n");